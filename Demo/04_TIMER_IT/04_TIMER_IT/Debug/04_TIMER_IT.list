
04_TIMER_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066cc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f8  080068f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006900  08006900  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  2000000c  08006914  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08006914  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e74f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326f  00000000  00000000  0003e7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  00041a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000156a  00000000  00000000  00043578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd60  00000000  00000000  00044ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fcc9  00000000  00000000  00072842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001238b0  00000000  00000000  0009250b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000076b8  00000000  00000000  001b5dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001bd474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006870 	.word	0x08006870

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08006870 	.word	0x08006870

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 f99f 	bl	800183e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f824 	bl	800054c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000504:	f000 f884 	bl	8000610 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fc02 	bl	8000d10 <MX_GPIO_Init>
  MX_ADC1_Init();
 800050c:	f000 f8b0 	bl	8000670 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000510:	f000 f912 	bl	8000738 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000514:	f000 f948 	bl	80007a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000518:	f000 f986 	bl	8000828 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800051c:	f000 f9c4 	bl	80008a8 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000520:	f000 fa18 	bl	8000954 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000524:	f000 fa54 	bl	80009d0 <MX_SPI3_Init>
  MX_UART4_Init();
 8000528:	f000 fab8 	bl	8000a9c <MX_UART4_Init>
  MX_USART1_UART_Init();
 800052c:	f000 fb02 	bl	8000b34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000530:	f000 fb4c 	bl	8000bcc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000534:	f000 fb98 	bl	8000c68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000538:	f000 fbe2 	bl	8000d00 <MX_USB_OTG_FS_USB_Init>
  MX_TIM16_Init();
 800053c:	f000 fa86 	bl	8000a4c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim16);
 8000540:	4801      	ldr	r0, [pc, #4]	; (8000548 <main+0x50>)
 8000542:	f005 f8af 	bl	80056a4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000546:	e7fe      	b.n	8000546 <main+0x4e>
 8000548:	20000288 	.word	0x20000288

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b096      	sub	sp, #88	; 0x58
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2244      	movs	r2, #68	; 0x44
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f006 f95c 	bl	8006818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800056e:	2000      	movs	r0, #0
 8000570:	f003 fafa 	bl	8003b68 <HAL_PWREx_ControlVoltageScaling>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800057a:	f000 fd21 	bl	8000fc0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800057e:	f003 fac3 	bl	8003b08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xc0>)
 8000584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <SystemClock_Config+0xc0>)
 800058a:	f023 0318 	bic.w	r3, r3, #24
 800058e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000592:	2314      	movs	r3, #20
 8000594:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000596:	2301      	movs	r3, #1
 8000598:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a2:	2360      	movs	r3, #96	; 0x60
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005aa:	2301      	movs	r3, #1
 80005ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005b2:	233c      	movs	r3, #60	; 0x3c
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fb72 	bl	8003cb0 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005d2:	f000 fcf5 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2105      	movs	r1, #5
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 ff78 	bl	80044e4 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005fa:	f000 fce1 	bl	8000fc0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005fe:	f004 fd5f 	bl	80050c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000602:	bf00      	nop
 8000604:	3758      	adds	r7, #88	; 0x58
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0a6      	sub	sp, #152	; 0x98
 8000614:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2294      	movs	r2, #148	; 0x94
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f006 f8fb 	bl	8006818 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000622:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000626:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000628:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800062c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000630:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000634:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000636:	2301      	movs	r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800063e:	2318      	movs	r3, #24
 8000640:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800064e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000652:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fa02 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000662:	f000 fcad 	bl	8000fc0 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3798      	adds	r7, #152	; 0x98
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <MX_ADC1_Init+0xbc>)
 8000688:	4a29      	ldr	r2, [pc, #164]	; (8000730 <MX_ADC1_Init+0xc0>)
 800068a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_ADC1_Init+0xbc>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <MX_ADC1_Init+0xbc>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_ADC1_Init+0xbc>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <MX_ADC1_Init+0xbc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_ADC1_Init+0xbc>)
 80006a6:	2204      	movs	r2, #4
 80006a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_ADC1_Init+0xbc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_ADC1_Init+0xbc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_ADC1_Init+0xbc>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_ADC1_Init+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_ADC1_Init+0xbc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_ADC1_Init+0xbc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_ADC1_Init+0xbc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_ADC1_Init+0xbc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_ADC1_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e6:	4811      	ldr	r0, [pc, #68]	; (800072c <MX_ADC1_Init+0xbc>)
 80006e8:	f001 fabe 	bl	8001c68 <HAL_ADC_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006f2:	f000 fc65 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_ADC1_Init+0xc4>)
 80006f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006fa:	2306      	movs	r3, #6
 80006fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000702:	237f      	movs	r3, #127	; 0x7f
 8000704:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000706:	2304      	movs	r3, #4
 8000708:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_ADC1_Init+0xbc>)
 8000714:	f001 fbee 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800071e:	f000 fc4f 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028
 8000730:	50040000 	.word	0x50040000
 8000734:	04300002 	.word	0x04300002

08000738 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 800073e:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <MX_DFSDM1_Init+0x6c>)
 8000740:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 8000744:	2201      	movs	r2, #1
 8000746:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 8000750:	2202      	movs	r2, #2
 8000752:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 800076e:	2204      	movs	r2, #4
 8000770:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 800077a:	2201      	movs	r2, #1
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_DFSDM1_Init+0x68>)
 800078c:	f002 f8c0 	bl	8002910 <HAL_DFSDM_ChannelInit>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000796:	f000 fc13 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000090 	.word	0x20000090
 80007a4:	40016040 	.word	0x40016040

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_I2C1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_I2C1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_I2C1_Init+0x74>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <MX_I2C1_Init+0x7c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_I2C1_Init+0x74>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <MX_I2C1_Init+0x74>)
 80007e4:	f002 fb87 	bl	8002ef6 <HAL_I2C_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ee:	f000 fbe7 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_I2C1_Init+0x74>)
 80007f6:	f002 fc19 	bl	800302c <HAL_I2CEx_ConfigAnalogFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000800:	f000 fbde 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_I2C1_Init+0x74>)
 8000808:	f002 fc5b 	bl	80030c2 <HAL_I2CEx_ConfigDigitalFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 fbd5 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000c8 	.word	0x200000c8
 8000820:	40005400 	.word	0x40005400
 8000824:	307075b1 	.word	0x307075b1

08000828 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_I2C2_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_I2C2_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_I2C2_Init+0x74>)
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <MX_I2C2_Init+0x7c>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_I2C2_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_I2C2_Init+0x74>)
 8000840:	2201      	movs	r2, #1
 8000842:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_I2C2_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C2_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <MX_I2C2_Init+0x74>)
 8000864:	f002 fb47 	bl	8002ef6 <HAL_I2C_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800086e:	f000 fba7 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <MX_I2C2_Init+0x74>)
 8000876:	f002 fbd9 	bl	800302c <HAL_I2CEx_ConfigAnalogFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 fb9e 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_I2C2_Init+0x74>)
 8000888:	f002 fc1b 	bl	80030c2 <HAL_I2CEx_ConfigDigitalFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fb95 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000011c 	.word	0x2000011c
 80008a0:	40005800 	.word	0x40005800
 80008a4:	307075b1 	.word	0x307075b1

080008a8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <MX_OCTOSPI1_Init+0xa8>)
 80008c0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008d4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008d8:	2220      	movs	r2, #32
 80008da:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008de:	2201      	movs	r2, #1
 80008e0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 8000908:	2208      	movs	r2, #8
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800090c:	480f      	ldr	r0, [pc, #60]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 800090e:	f002 fc25 	bl	800315c <HAL_OSPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000918:	f000 fb52 	bl	8000fc0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000924:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000928:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 8000934:	f002 fccc 	bl	80032d0 <HAL_OSPIM_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800093e:	f000 fb3f 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000170 	.word	0x20000170
 8000950:	a0001000 	.word	0xa0001000

08000954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_SPI1_Init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <MX_SPI1_Init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_SPI1_Init+0x74>)
 800096e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000972:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000986:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_SPI1_Init+0x74>)
 800098a:	2208      	movs	r2, #8
 800098c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009a2:	2207      	movs	r2, #7
 80009a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009ae:	2208      	movs	r2, #8
 80009b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009b4:	f004 fd7c 	bl	80054b0 <HAL_SPI_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009be:	f000 faff 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200001c0 	.word	0x200001c0
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_SPI3_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a06:	2208      	movs	r2, #8
 8000a08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a1e:	2207      	movs	r2, #7
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a30:	f004 fd3e 	bl	80054b0 <HAL_SPI_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fac1 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000224 	.word	0x20000224
 8000a48:	40003c00 	.word	0x40003c00

08000a4c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_TIM16_Init+0x48>)
 8000a52:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <MX_TIM16_Init+0x4c>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 12583 - 1;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_TIM16_Init+0x48>)
 8000a58:	f243 1226 	movw	r2, #12582	; 0x3126
 8000a5c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_TIM16_Init+0x48>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_TIM16_Init+0x48>)
 8000a66:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a6a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_TIM16_Init+0x48>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_TIM16_Init+0x48>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_TIM16_Init+0x48>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_TIM16_Init+0x48>)
 8000a80:	f004 fdb9 	bl	80055f6 <HAL_TIM_Base_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a8a:	f000 fa99 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000288 	.word	0x20000288
 8000a98:	40014400 	.word	0x40014400

08000a9c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_UART4_Init+0x90>)
 8000aa2:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <MX_UART4_Init+0x94>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_UART4_Init+0x90>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_UART4_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_UART4_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_UART4_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_UART4_Init+0x90>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_UART4_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_UART4_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_UART4_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_UART4_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_UART4_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <MX_UART4_Init+0x90>)
 8000ae6:	f005 f82f 	bl	8005b48 <HAL_UART_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000af0:	f000 fa66 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af4:	2100      	movs	r1, #0
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_UART4_Init+0x90>)
 8000af8:	f005 fdc4 	bl	8006684 <HAL_UARTEx_SetTxFifoThreshold>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b02:	f000 fa5d 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4808      	ldr	r0, [pc, #32]	; (8000b2c <MX_UART4_Init+0x90>)
 8000b0a:	f005 fdf9 	bl	8006700 <HAL_UARTEx_SetRxFifoThreshold>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b14:	f000 fa54 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_UART4_Init+0x90>)
 8000b1a:	f005 fd7a 	bl	8006612 <HAL_UARTEx_DisableFifoMode>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b24:	f000 fa4c 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200002d4 	.word	0x200002d4
 8000b30:	40004c00 	.word	0x40004c00

08000b34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b3a:	4a23      	ldr	r2, [pc, #140]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b7e:	f004 ffe3 	bl	8005b48 <HAL_UART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b88:	f000 fa1a 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b90:	f005 fd78 	bl	8006684 <HAL_UARTEx_SetTxFifoThreshold>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9a:	f000 fa11 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000ba2:	f005 fdad 	bl	8006700 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 fa08 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000bb2:	f005 fd2e 	bl	8006612 <HAL_UARTEx_DisableFifoMode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 fa00 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000368 	.word	0x20000368
 8000bc8:	40013800 	.word	0x40013800

08000bcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000bd2:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <MX_USART2_UART_Init+0x98>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000bf8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bfc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000c18:	f004 ff96 	bl	8005b48 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c22:	f000 f9cd 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c26:	2100      	movs	r1, #0
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000c2a:	f005 fd2b 	bl	8006684 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c34:	f000 f9c4 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4809      	ldr	r0, [pc, #36]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000c3c:	f005 fd60 	bl	8006700 <HAL_UARTEx_SetRxFifoThreshold>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c46:	f000 f9bb 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000c4c:	f005 fce1 	bl	8006612 <HAL_UARTEx_DisableFifoMode>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c56:	f000 f9b3 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200003fc 	.word	0x200003fc
 8000c64:	40004400 	.word	0x40004400

08000c68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000cb2:	f004 ff49 	bl	8005b48 <HAL_UART_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cbc:	f000 f980 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000cc4:	f005 fcde 	bl	8006684 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cce:	f000 f977 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000cd6:	f005 fd13 	bl	8006700 <HAL_UARTEx_SetRxFifoThreshold>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce0:	f000 f96e 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000ce6:	f005 fc94 	bl	8006612 <HAL_UARTEx_DisableFifoMode>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf0:	f000 f966 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000490 	.word	0x20000490
 8000cfc:	40004800 	.word	0x40004800

08000d00 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d26:	4b96      	ldr	r3, [pc, #600]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a95      	ldr	r2, [pc, #596]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b93      	ldr	r3, [pc, #588]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b90      	ldr	r3, [pc, #576]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a8f      	ldr	r2, [pc, #572]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b8d      	ldr	r3, [pc, #564]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d56:	4b8a      	ldr	r3, [pc, #552]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a89      	ldr	r2, [pc, #548]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b87      	ldr	r3, [pc, #540]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b84      	ldr	r3, [pc, #528]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a83      	ldr	r2, [pc, #524]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b81      	ldr	r3, [pc, #516]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	4b7e      	ldr	r3, [pc, #504]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a7d      	ldr	r2, [pc, #500]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b7b      	ldr	r3, [pc, #492]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	4b78      	ldr	r3, [pc, #480]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a77      	ldr	r2, [pc, #476]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b75      	ldr	r3, [pc, #468]	; (8000f80 <MX_GPIO_Init+0x270>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f240 1105 	movw	r1, #261	; 0x105
 8000dbc:	4871      	ldr	r0, [pc, #452]	; (8000f84 <MX_GPIO_Init+0x274>)
 8000dbe:	f002 f845 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f248 111c 	movw	r1, #33052	; 0x811c
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f002 f83e 	bl	8002e4c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000dd6:	486c      	ldr	r0, [pc, #432]	; (8000f88 <MX_GPIO_Init+0x278>)
 8000dd8:	f002 f838 	bl	8002e4c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f242 0183 	movw	r1, #8323	; 0x2083
 8000de2:	486a      	ldr	r0, [pc, #424]	; (8000f8c <MX_GPIO_Init+0x27c>)
 8000de4:	f002 f832 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000dee:	4868      	ldr	r0, [pc, #416]	; (8000f90 <MX_GPIO_Init+0x280>)
 8000df0:	f002 f82c 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000df4:	f240 1305 	movw	r3, #261	; 0x105
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	485d      	ldr	r0, [pc, #372]	; (8000f84 <MX_GPIO_Init+0x274>)
 8000e0e:	f001 fe8b 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e12:	237a      	movs	r3, #122	; 0x7a
 8000e14:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4857      	ldr	r0, [pc, #348]	; (8000f84 <MX_GPIO_Init+0x274>)
 8000e28:	f001 fe7e 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e2c:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	4853      	ldr	r0, [pc, #332]	; (8000f90 <MX_GPIO_Init+0x280>)
 8000e44:	f001 fe70 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e48:	f248 131c 	movw	r3, #33052	; 0x811c
 8000e4c:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f001 fe60 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4842      	ldr	r0, [pc, #264]	; (8000f88 <MX_GPIO_Init+0x278>)
 8000e7e:	f001 fe53 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	483a      	ldr	r0, [pc, #232]	; (8000f88 <MX_GPIO_Init+0x278>)
 8000e9e:	f001 fe43 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ea2:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ea6:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4833      	ldr	r0, [pc, #204]	; (8000f88 <MX_GPIO_Init+0x278>)
 8000ebc:	f001 fe34 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000ec0:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000ec4:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	482d      	ldr	r0, [pc, #180]	; (8000f8c <MX_GPIO_Init+0x27c>)
 8000ed8:	f001 fe26 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000edc:	f242 0383 	movw	r3, #8323	; 0x2083
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4825      	ldr	r0, [pc, #148]	; (8000f8c <MX_GPIO_Init+0x27c>)
 8000ef6:	f001 fe17 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000efa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	481f      	ldr	r0, [pc, #124]	; (8000f90 <MX_GPIO_Init+0x280>)
 8000f14:	f001 fe08 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f001 fdfa 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f46:	230a      	movs	r3, #10
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f001 fde8 	bl	8002b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2017      	movs	r0, #23
 8000f5e:	f001 fca0 	bl	80028a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f62:	2017      	movs	r0, #23
 8000f64:	f001 fcb9 	bl	80028da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2028      	movs	r0, #40	; 0x28
 8000f6e:	f001 fc98 	bl	80028a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f72:	2028      	movs	r0, #40	; 0x28
 8000f74:	f001 fcb1 	bl	80028da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	; 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48001000 	.word	0x48001000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000c00 	.word	0x48000c00
 8000f90:	48000800 	.word	0x48000800

08000f94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d104      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000faa:	f001 ff67 	bl	8002e7c <HAL_GPIO_TogglePin>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000288 	.word	0x20000288
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_MspInit+0x44>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_MspInit+0x44>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_MspInit+0x44>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x44>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a15      	ldr	r2, [pc, #84]	; (8001088 <HAL_ADC_MspInit+0x74>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d123      	bne.n	800107e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_ADC_MspInit+0x78>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a14      	ldr	r2, [pc, #80]	; (800108c <HAL_ADC_MspInit+0x78>)
 800103c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_ADC_MspInit+0x78>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_ADC_MspInit+0x78>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_ADC_MspInit+0x78>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_ADC_MspInit+0x78>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001066:	233f      	movs	r3, #63	; 0x3f
 8001068:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800106a:	230b      	movs	r3, #11
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_ADC_MspInit+0x7c>)
 800107a:	f001 fd55 	bl	8002b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	50040000 	.word	0x50040000
 800108c:	40021000 	.word	0x40021000
 8001090:	48000800 	.word	0x48000800

08001094 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ae      	sub	sp, #184	; 0xb8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2294      	movs	r2, #148	; 0x94
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 fbaf 	bl	8006818 <memset>
  if(DFSDM1_Init == 0)
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d142      	bne.n	8001148 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fcc4 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80010de:	f7ff ff6f 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ec:	6613      	str	r3, [r2, #96]	; 0x60
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001100:	f043 0310 	orr.w	r3, r3, #16
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001112:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800112c:	2306      	movs	r3, #6
 800112e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001132:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001136:	4619      	mov	r1, r3
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800113a:	f001 fcf5 	bl	8002b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a02      	ldr	r2, [pc, #8]	; (8001150 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001146:	6013      	str	r3, [r2, #0]
  }

}
 8001148:	bf00      	nop
 800114a:	37b8      	adds	r7, #184	; 0xb8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000524 	.word	0x20000524
 8001154:	40021000 	.word	0x40021000
 8001158:	48001000 	.word	0x48001000

0800115c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0b0      	sub	sp, #192	; 0xc0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	2294      	movs	r2, #148	; 0x94
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f005 fb4b 	bl	8006818 <memset>
  if(hi2c->Instance==I2C1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a42      	ldr	r2, [pc, #264]	; (8001290 <HAL_I2C_MspInit+0x134>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d13c      	bne.n	8001206 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001194:	f107 0318 	add.w	r3, r7, #24
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fc61 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011a4:	f7ff ff0c 	bl	8000fc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <HAL_I2C_MspInit+0x138>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	4a39      	ldr	r2, [pc, #228]	; (8001294 <HAL_I2C_MspInit+0x138>)
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <HAL_I2C_MspInit+0x138>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80011c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c8:	2312      	movs	r3, #18
 80011ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011da:	2304      	movs	r3, #4
 80011dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011e4:	4619      	mov	r1, r3
 80011e6:	482c      	ldr	r0, [pc, #176]	; (8001298 <HAL_I2C_MspInit+0x13c>)
 80011e8:	f001 fc9e 	bl	8002b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <HAL_I2C_MspInit+0x138>)
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	4a28      	ldr	r2, [pc, #160]	; (8001294 <HAL_I2C_MspInit+0x138>)
 80011f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f6:	6593      	str	r3, [r2, #88]	; 0x58
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <HAL_I2C_MspInit+0x138>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001204:	e040      	b.n	8001288 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a24      	ldr	r2, [pc, #144]	; (800129c <HAL_I2C_MspInit+0x140>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d13b      	bne.n	8001288 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	4618      	mov	r0, r3
 800121e:	f003 fc1f 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001228:	f7ff feca 	bl	8000fc0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_I2C_MspInit+0x138>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_I2C_MspInit+0x138>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_I2C_MspInit+0x138>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001244:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124c:	2312      	movs	r3, #18
 800124e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001252:	2301      	movs	r3, #1
 8001254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800125e:	2304      	movs	r3, #4
 8001260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001268:	4619      	mov	r1, r3
 800126a:	480b      	ldr	r0, [pc, #44]	; (8001298 <HAL_I2C_MspInit+0x13c>)
 800126c:	f001 fc5c 	bl	8002b28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_I2C_MspInit+0x138>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_I2C_MspInit+0x138>)
 8001276:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127a:	6593      	str	r3, [r2, #88]	; 0x58
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_I2C_MspInit+0x138>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
}
 8001288:	bf00      	nop
 800128a:	37c0      	adds	r7, #192	; 0xc0
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40005400 	.word	0x40005400
 8001294:	40021000 	.word	0x40021000
 8001298:	48000400 	.word	0x48000400
 800129c:	40005800 	.word	0x40005800

080012a0 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0b0      	sub	sp, #192	; 0xc0
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	2294      	movs	r2, #148	; 0x94
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f005 faa9 	bl	8006818 <memset>
  if(hospi->Instance==OCTOSPI1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a28      	ldr	r2, [pc, #160]	; (800136c <HAL_OSPI_MspInit+0xcc>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d149      	bne.n	8001364 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80012d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	f107 0318 	add.w	r3, r7, #24
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fbbd 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80012ec:	f7ff fe68 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <HAL_OSPI_MspInit+0xd0>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f4:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <HAL_OSPI_MspInit+0xd0>)
 80012f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <HAL_OSPI_MspInit+0xd0>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_OSPI_MspInit+0xd0>)
 800130a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800130c:	4a18      	ldr	r2, [pc, #96]	; (8001370 <HAL_OSPI_MspInit+0xd0>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001312:	6513      	str	r3, [r2, #80]	; 0x50
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_OSPI_MspInit+0xd0>)
 8001316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_OSPI_MspInit+0xd0>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_OSPI_MspInit+0xd0>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_OSPI_MspInit+0xd0>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001338:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800133c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001352:	230a      	movs	r3, #10
 8001354:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001358:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800135c:	4619      	mov	r1, r3
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <HAL_OSPI_MspInit+0xd4>)
 8001360:	f001 fbe2 	bl	8002b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	37c0      	adds	r7, #192	; 0xc0
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	a0001000 	.word	0xa0001000
 8001370:	40021000 	.word	0x40021000
 8001374:	48001000 	.word	0x48001000

08001378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <HAL_SPI_MspInit+0xdc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d129      	bne.n	80013ee <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	4a2e      	ldr	r2, [pc, #184]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 80013a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a4:	6613      	str	r3, [r2, #96]	; 0x60
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a28      	ldr	r2, [pc, #160]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80013ca:	23e0      	movs	r3, #224	; 0xe0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013da:	2305      	movs	r3, #5
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f001 fb9e 	bl	8002b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013ec:	e02d      	b.n	800144a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1a      	ldr	r2, [pc, #104]	; (800145c <HAL_SPI_MspInit+0xe4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d128      	bne.n	800144a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	4a16      	ldr	r2, [pc, #88]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 80013fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001402:	6593      	str	r3, [r2, #88]	; 0x58
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	4a10      	ldr	r2, [pc, #64]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_SPI_MspInit+0xe0>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001428:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800143a:	2306      	movs	r3, #6
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4806      	ldr	r0, [pc, #24]	; (8001460 <HAL_SPI_MspInit+0xe8>)
 8001446:	f001 fb6f 	bl	8002b28 <HAL_GPIO_Init>
}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	; 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40013000 	.word	0x40013000
 8001458:	40021000 	.word	0x40021000
 800145c:	40003c00 	.word	0x40003c00
 8001460:	48000800 	.word	0x48000800

08001464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <HAL_TIM_Base_MspInit+0x44>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d113      	bne.n	800149e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_TIM_Base_MspInit+0x48>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147a:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <HAL_TIM_Base_MspInit+0x48>)
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	6613      	str	r3, [r2, #96]	; 0x60
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_TIM_Base_MspInit+0x48>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2019      	movs	r0, #25
 8001494:	f001 fa05 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001498:	2019      	movs	r0, #25
 800149a:	f001 fa1e 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40014400 	.word	0x40014400
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0b4      	sub	sp, #208	; 0xd0
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014cc:	2294      	movs	r2, #148	; 0x94
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 f9a1 	bl	8006818 <memset>
  if(huart->Instance==UART4)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a83      	ldr	r2, [pc, #524]	; (80016e8 <HAL_UART_MspInit+0x238>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d13c      	bne.n	800155a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014e0:	2308      	movs	r3, #8
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 fab7 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014f8:	f7ff fd62 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014fc:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <HAL_UART_MspInit+0x23c>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	4a7a      	ldr	r2, [pc, #488]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001506:	6593      	str	r3, [r2, #88]	; 0x58
 8001508:	4b78      	ldr	r3, [pc, #480]	; (80016ec <HAL_UART_MspInit+0x23c>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b75      	ldr	r3, [pc, #468]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	4a74      	ldr	r2, [pc, #464]	; (80016ec <HAL_UART_MspInit+0x23c>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001520:	4b72      	ldr	r3, [pc, #456]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	623b      	str	r3, [r7, #32]
 800152a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800152c:	2303      	movs	r3, #3
 800152e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001544:	2308      	movs	r3, #8
 8001546:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f001 fae8 	bl	8002b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001558:	e0c2      	b.n	80016e0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a64      	ldr	r2, [pc, #400]	; (80016f0 <HAL_UART_MspInit+0x240>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d13b      	bne.n	80015dc <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001564:	2301      	movs	r3, #1
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001568:	2300      	movs	r3, #0
 800156a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fa75 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800157c:	f7ff fd20 	bl	8000fc0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001580:	4b5a      	ldr	r3, [pc, #360]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001584:	4a59      	ldr	r2, [pc, #356]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6613      	str	r3, [r2, #96]	; 0x60
 800158c:	4b57      	ldr	r3, [pc, #348]	; (80016ec <HAL_UART_MspInit+0x23c>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b54      	ldr	r3, [pc, #336]	; (80016ec <HAL_UART_MspInit+0x23c>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	4a53      	ldr	r2, [pc, #332]	; (80016ec <HAL_UART_MspInit+0x23c>)
 800159e:	f043 0302 	orr.w	r3, r3, #2
 80015a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a4:	4b51      	ldr	r3, [pc, #324]	; (80016ec <HAL_UART_MspInit+0x23c>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80015b0:	23c0      	movs	r3, #192	; 0xc0
 80015b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c8:	2307      	movs	r3, #7
 80015ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015d2:	4619      	mov	r1, r3
 80015d4:	4847      	ldr	r0, [pc, #284]	; (80016f4 <HAL_UART_MspInit+0x244>)
 80015d6:	f001 faa7 	bl	8002b28 <HAL_GPIO_Init>
}
 80015da:	e081      	b.n	80016e0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a45      	ldr	r2, [pc, #276]	; (80016f8 <HAL_UART_MspInit+0x248>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d13b      	bne.n	800165e <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015e6:	2302      	movs	r3, #2
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fa34 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_UART_MspInit+0x152>
      Error_Handler();
 80015fe:	f7ff fcdf 	bl	8000fc0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001602:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a39      	ldr	r2, [pc, #228]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	6593      	str	r3, [r2, #88]	; 0x58
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_UART_MspInit+0x23c>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a33      	ldr	r2, [pc, #204]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001632:	2378      	movs	r3, #120	; 0x78
 8001634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164a:	2307      	movs	r3, #7
 800164c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001650:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001654:	4619      	mov	r1, r3
 8001656:	4829      	ldr	r0, [pc, #164]	; (80016fc <HAL_UART_MspInit+0x24c>)
 8001658:	f001 fa66 	bl	8002b28 <HAL_GPIO_Init>
}
 800165c:	e040      	b.n	80016e0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a27      	ldr	r2, [pc, #156]	; (8001700 <HAL_UART_MspInit+0x250>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d13b      	bne.n	80016e0 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001668:	2304      	movs	r3, #4
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800166c:	2300      	movs	r3, #0
 800166e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001674:	4618      	mov	r0, r3
 8001676:	f003 f9f3 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001680:	f7ff fc9e 	bl	8000fc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <HAL_UART_MspInit+0x23c>)
 800168a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168e:	6593      	str	r3, [r2, #88]	; 0x58
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_UART_MspInit+0x23c>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_UART_MspInit+0x23c>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	4a12      	ldr	r2, [pc, #72]	; (80016ec <HAL_UART_MspInit+0x23c>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_UART_MspInit+0x23c>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80016b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ce:	2307      	movs	r3, #7
 80016d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016d8:	4619      	mov	r1, r3
 80016da:	4808      	ldr	r0, [pc, #32]	; (80016fc <HAL_UART_MspInit+0x24c>)
 80016dc:	f001 fa24 	bl	8002b28 <HAL_GPIO_Init>
}
 80016e0:	bf00      	nop
 80016e2:	37d0      	adds	r7, #208	; 0xd0
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40004c00 	.word	0x40004c00
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40013800 	.word	0x40013800
 80016f4:	48000400 	.word	0x48000400
 80016f8:	40004400 	.word	0x40004400
 80016fc:	48000c00 	.word	0x48000c00
 8001700:	40004800 	.word	0x40004800

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 f8ca 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800175c:	2020      	movs	r0, #32
 800175e:	f001 fba7 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001762:	2040      	movs	r0, #64	; 0x40
 8001764:	f001 fba4 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001768:	2080      	movs	r0, #128	; 0x80
 800176a:	f001 fba1 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800176e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001772:	f001 fb9d 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001782:	f003 ffff 	bl	8005784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000288 	.word	0x20000288

08001790 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001794:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001798:	f001 fb8a 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800179c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017a0:	f001 fb86 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80017a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017a8:	f001 fb82 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80017ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017b0:	f001 fb7e 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80017b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017b8:	f001 fb7a 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80017bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017c0:	f001 fb76 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001824 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f0:	f7ff ffea 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	; (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181a:	f005 f805 	bl	8006828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181e:	f7fe fe6b 	bl	80004f8 <main>

08001822 <LoopForever>:

LoopForever:
    b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001824:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001830:	08006908 	.word	0x08006908
  ldr r2, =_sbss
 8001834:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001838:	20000550 	.word	0x20000550

0800183c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_IRQHandler>

0800183e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f001 f81f 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f80e 	bl	8001870 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e001      	b.n	8001864 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001860:	f7ff fbb4 	bl	8000fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001864:	79fb      	ldrb	r3, [r7, #7]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_InitTick+0x6c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_InitTick+0x70>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_InitTick+0x6c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f001 f82b 	bl	80028f6 <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d809      	bhi.n	80018c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 fff5 	bl	80028a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_InitTick+0x74>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e007      	b.n	80018d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e004      	b.n	80018d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	e001      	b.n	80018d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008
 800190c:	20000528 	.word	0x20000528

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000528 	.word	0x20000528

08001928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3360      	adds	r3, #96	; 0x60
 80019a2:	461a      	mov	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <LL_ADC_SetOffset+0x44>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	4313      	orrs	r3, r2
 80019c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019c8:	bf00      	nop
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	03fff000 	.word	0x03fff000

080019d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3360      	adds	r3, #96	; 0x60
 80019e6:	461a      	mov	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3360      	adds	r3, #96	; 0x60
 8001a14:	461a      	mov	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	615a      	str	r2, [r3, #20]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3330      	adds	r3, #48	; 0x30
 8001a70:	461a      	mov	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	4413      	add	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	211f      	movs	r1, #31
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	401a      	ands	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	0e9b      	lsrs	r3, r3, #26
 8001a98:	f003 011f 	and.w	r1, r3, #31
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3314      	adds	r3, #20
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	0e5b      	lsrs	r3, r3, #25
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	0d1b      	lsrs	r3, r3, #20
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	2107      	movs	r1, #7
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	401a      	ands	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	0d1b      	lsrs	r3, r3, #20
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0318 	and.w	r3, r3, #24
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b34:	40d9      	lsrs	r1, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	400b      	ands	r3, r1
 8001b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	0007ffff 	.word	0x0007ffff

08001b58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6093      	str	r3, [r2, #8]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b90:	d101      	bne.n	8001b96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001be0:	d101      	bne.n	8001be6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <LL_ADC_IsEnabled+0x18>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <LL_ADC_IsEnabled+0x1a>
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d101      	bne.n	8001c58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e129      	b.n	8001ed6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff f9bf 	bl	8001014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff67 	bl	8001b7c <LL_ADC_IsDeepPowerDownEnabled>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff4d 	bl	8001b58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff82 	bl	8001bcc <LL_ADC_IsInternalRegulatorEnabled>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d115      	bne.n	8001cfa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff66 	bl	8001ba4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd8:	4b81      	ldr	r3, [pc, #516]	; (8001ee0 <HAL_ADC_Init+0x278>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	4a81      	ldr	r2, [pc, #516]	; (8001ee4 <HAL_ADC_Init+0x27c>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff64 	bl	8001bcc <LL_ADC_IsInternalRegulatorEnabled>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f043 0210 	orr.w	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1a:	f043 0201 	orr.w	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff75 	bl	8001c1a <LL_ADC_REG_IsConversionOngoing>
 8001d30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 80c2 	bne.w	8001ec4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 80be 	bne.w	8001ec4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d50:	f043 0202 	orr.w	r2, r3, #2
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff49 	bl	8001bf4 <LL_ADC_IsEnabled>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10b      	bne.n	8001d80 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d68:	485f      	ldr	r0, [pc, #380]	; (8001ee8 <HAL_ADC_Init+0x280>)
 8001d6a:	f7ff ff43 	bl	8001bf4 <LL_ADC_IsEnabled>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	485c      	ldr	r0, [pc, #368]	; (8001eec <HAL_ADC_Init+0x284>)
 8001d7c:	f7ff fdd4 	bl	8001928 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7e5b      	ldrb	r3, [r3, #25]
 8001d84:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d8a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d90:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d96:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d106      	bne.n	8001dbc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	3b01      	subs	r3, #1
 8001db4:	045b      	lsls	r3, r3, #17
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <HAL_ADC_Init+0x288>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	69b9      	ldr	r1, [r7, #24]
 8001de8:	430b      	orrs	r3, r1
 8001dea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff25 	bl	8001c40 <LL_ADC_INJ_IsConversionOngoing>
 8001df6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d140      	bne.n	8001e80 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d13d      	bne.n	8001e80 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7e1b      	ldrb	r3, [r3, #24]
 8001e0c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e0e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e16:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e26:	f023 0306 	bic.w	r3, r3, #6
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d118      	bne.n	8001e70 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e60:	430a      	orrs	r2, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	611a      	str	r2, [r3, #16]
 8001e6e:	e007      	b.n	8001e80 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10c      	bne.n	8001ea2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f023 010f 	bic.w	r1, r3, #15
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea0:	e007      	b.n	8001eb2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 020f 	bic.w	r2, r2, #15
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	659a      	str	r2, [r3, #88]	; 0x58
 8001ec2:	e007      	b.n	8001ed4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	f043 0210 	orr.w	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ed4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	053e2d63 	.word	0x053e2d63
 8001ee8:	50040000 	.word	0x50040000
 8001eec:	50040300 	.word	0x50040300
 8001ef0:	fff0c007 	.word	0xfff0c007

08001ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b0b6      	sub	sp, #216	; 0xd8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x22>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e3d5      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x7ce>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fe79 	bl	8001c1a <LL_ADC_REG_IsConversionOngoing>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 83ba 	bne.w	80026a4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d824      	bhi.n	8001f8a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	3b02      	subs	r3, #2
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d81b      	bhi.n	8001f82 <HAL_ADC_ConfigChannel+0x8e>
 8001f4a:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <HAL_ADC_ConfigChannel+0x5c>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f69 	.word	0x08001f69
 8001f58:	08001f71 	.word	0x08001f71
 8001f5c:	08001f79 	.word	0x08001f79
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001f60:	230c      	movs	r3, #12
 8001f62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f66:	e010      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001f68:	2312      	movs	r3, #18
 8001f6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f6e:	e00c      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001f70:	2318      	movs	r3, #24
 8001f72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f76:	e008      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f80:	e003      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001f82:	2306      	movs	r3, #6
 8001f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f88:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001f98:	f7ff fd62 	bl	8001a60 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fe3a 	bl	8001c1a <LL_ADC_REG_IsConversionOngoing>
 8001fa6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe46 	bl	8001c40 <LL_ADC_INJ_IsConversionOngoing>
 8001fb4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f040 81bf 	bne.w	8002340 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 81ba 	bne.w	8002340 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7ff fd69 	bl	8001ab8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd23 	bl	8001a3a <LL_ADC_SetSamplingTimeCommonConfig>
 8001ff4:	e00e      	b.n	8002014 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6819      	ldr	r1, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	461a      	mov	r2, r3
 8002004:	f7ff fd58 	bl	8001ab8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fd13 	bl	8001a3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	08db      	lsrs	r3, r3, #3
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d00a      	beq.n	800204c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002046:	f7ff fca3 	bl	8001990 <LL_ADC_SetOffset>
 800204a:	e179      	b.n	8002340 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fcc0 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x184>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fcb5 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 021f 	and.w	r2, r3, #31
 8002076:	e01e      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x1c2>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fcaa 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800209a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800209e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e004      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80020aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x1da>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0e9b      	lsrs	r3, r3, #26
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	e018      	b.n	8002100 <HAL_ADC_ConfigChannel+0x20c>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80020e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80020ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e004      	b.n	8002100 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80020f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002100:	429a      	cmp	r2, r3
 8002102:	d106      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fc79 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fc5d 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10a      	bne.n	800213e <HAL_ADC_ConfigChannel+0x24a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2101      	movs	r1, #1
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fc52 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	e01e      	b.n	800217c <HAL_ADC_ConfigChannel+0x288>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2101      	movs	r1, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fc47 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800215c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800216c:	2320      	movs	r3, #32
 800216e:	e004      	b.n	800217a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002170:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x2a0>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	e018      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x2d2>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80021a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80021b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e004      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80021bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d106      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	2101      	movs	r1, #1
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fc16 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2102      	movs	r1, #2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fbfa 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10a      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x310>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2102      	movs	r1, #2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fbef 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	f003 021f 	and.w	r2, r3, #31
 8002202:	e01e      	b.n	8002242 <HAL_ADC_ConfigChannel+0x34e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2102      	movs	r1, #2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fbe4 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002226:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800222a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e004      	b.n	8002240 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_ADC_ConfigChannel+0x366>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0e9b      	lsrs	r3, r3, #26
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	e014      	b.n	8002284 <HAL_ADC_ConfigChannel+0x390>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800226a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800226e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e004      	b.n	8002284 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800227a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002284:	429a      	cmp	r2, r3
 8002286:	d106      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	2102      	movs	r1, #2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fbb7 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2103      	movs	r1, #3
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fb9b 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x3ce>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2103      	movs	r1, #3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fb90 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	0e9b      	lsrs	r3, r3, #26
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	e017      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x3fe>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2103      	movs	r1, #3
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fb85 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80022de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e003      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80022e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_ADC_ConfigChannel+0x416>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0e9b      	lsrs	r3, r3, #26
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	e011      	b.n	800232e <HAL_ADC_ConfigChannel+0x43a>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800231a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800231c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e003      	b.n	800232e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800232e:	429a      	cmp	r2, r3
 8002330:	d106      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	2103      	movs	r1, #3
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fb62 	bl	8001a04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fc55 	bl	8001bf4 <LL_ADC_IsEnabled>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 813f 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6819      	ldr	r1, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	461a      	mov	r2, r3
 8002360:	f7ff fbd6 	bl	8001b10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a8e      	ldr	r2, [pc, #568]	; (80025a4 <HAL_ADC_ConfigChannel+0x6b0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	f040 8130 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x4a4>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	3301      	adds	r3, #1
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	2b09      	cmp	r3, #9
 800238e:	bf94      	ite	ls
 8002390:	2301      	movls	r3, #1
 8002392:	2300      	movhi	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	e019      	b.n	80023cc <HAL_ADC_ConfigChannel+0x4d8>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80023a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80023aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e003      	b.n	80023bc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80023b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2b09      	cmp	r3, #9
 80023c4:	bf94      	ite	ls
 80023c6:	2301      	movls	r3, #1
 80023c8:	2300      	movhi	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d079      	beq.n	80024c4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d107      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x4f8>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0e9b      	lsrs	r3, r3, #26
 80023e2:	3301      	adds	r3, #1
 80023e4:	069b      	lsls	r3, r3, #26
 80023e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ea:	e015      	b.n	8002418 <HAL_ADC_ConfigChannel+0x524>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80023fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80023fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e003      	b.n	8002410 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	069b      	lsls	r3, r3, #26
 8002414:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x544>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	3301      	adds	r3, #1
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	2101      	movs	r1, #1
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	e017      	b.n	8002468 <HAL_ADC_ConfigChannel+0x574>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002448:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800244a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002450:	2320      	movs	r3, #32
 8002452:	e003      	b.n	800245c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	3301      	adds	r3, #1
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	ea42 0103 	orr.w	r1, r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <HAL_ADC_ConfigChannel+0x59a>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	3301      	adds	r3, #1
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	051b      	lsls	r3, r3, #20
 800248c:	e018      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x5cc>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80024a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80024a6:	2320      	movs	r3, #32
 80024a8:	e003      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c0:	430b      	orrs	r3, r1
 80024c2:	e080      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d107      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x5ec>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	3301      	adds	r3, #1
 80024d8:	069b      	lsls	r3, r3, #26
 80024da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024de:	e015      	b.n	800250c <HAL_ADC_ConfigChannel+0x618>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80024f8:	2320      	movs	r3, #32
 80024fa:	e003      	b.n	8002504 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	069b      	lsls	r3, r3, #26
 8002508:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_ADC_ConfigChannel+0x638>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0e9b      	lsrs	r3, r3, #26
 800251e:	3301      	adds	r3, #1
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	e017      	b.n	800255c <HAL_ADC_ConfigChannel+0x668>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	61bb      	str	r3, [r7, #24]
  return result;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002544:	2320      	movs	r3, #32
 8002546:	e003      	b.n	8002550 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3301      	adds	r3, #1
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	ea42 0103 	orr.w	r1, r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10d      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x694>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0e9b      	lsrs	r3, r3, #26
 8002572:	3301      	adds	r3, #1
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	3b1e      	subs	r3, #30
 8002580:	051b      	lsls	r3, r3, #20
 8002582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002586:	e01d      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x6d0>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	60fb      	str	r3, [r7, #12]
  return result;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80025a0:	2320      	movs	r3, #32
 80025a2:	e005      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x6bc>
 80025a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 021f 	and.w	r2, r3, #31
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	3b1e      	subs	r3, #30
 80025be:	051b      	lsls	r3, r3, #20
 80025c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ca:	4619      	mov	r1, r3
 80025cc:	f7ff fa74 	bl	8001ab8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_ADC_ConfigChannel+0x7d8>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d06c      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025dc:	483c      	ldr	r0, [pc, #240]	; (80026d0 <HAL_ADC_ConfigChannel+0x7dc>)
 80025de:	f7ff f9c9 	bl	8001974 <LL_ADC_GetCommonPathInternalCh>
 80025e2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a3a      	ldr	r2, [pc, #232]	; (80026d4 <HAL_ADC_ConfigChannel+0x7e0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d127      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d121      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a35      	ldr	r2, [pc, #212]	; (80026d8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d157      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800260a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800260e:	4619      	mov	r1, r3
 8002610:	482f      	ldr	r0, [pc, #188]	; (80026d0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002612:	f7ff f99c 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HAL_ADC_ConfigChannel+0x7e8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	099b      	lsrs	r3, r3, #6
 800261c:	4a30      	ldr	r2, [pc, #192]	; (80026e0 <HAL_ADC_ConfigChannel+0x7ec>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002630:	e002      	b.n	8002638 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	3b01      	subs	r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f9      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800263e:	e03a      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d113      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800264a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800264e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10d      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d12a      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002668:	4619      	mov	r1, r3
 800266a:	4819      	ldr	r0, [pc, #100]	; (80026d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800266c:	f7ff f96f 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002670:	e021      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d11c      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800267c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d116      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d111      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002696:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800269a:	4619      	mov	r1, r3
 800269c:	480c      	ldr	r0, [pc, #48]	; (80026d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800269e:	f7ff f956 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
 80026a2:	e008      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80026be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	37d8      	adds	r7, #216	; 0xd8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	80080000 	.word	0x80080000
 80026d0:	50040300 	.word	0x50040300
 80026d4:	c7520000 	.word	0xc7520000
 80026d8:	50040000 	.word	0x50040000
 80026dc:	20000000 	.word	0x20000000
 80026e0:	053e2d63 	.word	0x053e2d63
 80026e4:	cb840000 	.word	0xcb840000
 80026e8:	80000001 	.word	0x80000001

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4907      	ldr	r1, [pc, #28]	; (8002788 <__NVIC_EnableIRQ+0x38>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	; (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f7ff ff8e 	bl	800278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff29 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff3e 	bl	8002734 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff8e 	bl	80027e0 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5d 	bl	800278c <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff31 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa2 	bl	8002848 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0ac      	b.n	8002a7c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f8b2 	bl	8002a90 <DFSDM_GetChannelFromInstance>
 800292c:	4603      	mov	r3, r0
 800292e:	4a55      	ldr	r2, [pc, #340]	; (8002a84 <HAL_DFSDM_ChannelInit+0x174>)
 8002930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e09f      	b.n	8002a7c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7fe fba9 	bl	8001094 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002942:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <HAL_DFSDM_ChannelInit+0x178>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	4a4f      	ldr	r2, [pc, #316]	; (8002a88 <HAL_DFSDM_ChannelInit+0x178>)
 800294a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800294c:	4b4e      	ldr	r3, [pc, #312]	; (8002a88 <HAL_DFSDM_ChannelInit+0x178>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d125      	bne.n	80029a0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002954:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4c      	ldr	r2, [pc, #304]	; (8002a8c <HAL_DFSDM_ChannelInit+0x17c>)
 800295a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800295e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002960:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4948      	ldr	r1, [pc, #288]	; (8002a8c <HAL_DFSDM_ChannelInit+0x17c>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a46      	ldr	r2, [pc, #280]	; (8002a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8002974:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002978:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	791b      	ldrb	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d108      	bne.n	8002994 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002982:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	3b01      	subs	r3, #1
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	493f      	ldr	r1, [pc, #252]	; (8002a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002994:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a3c      	ldr	r2, [pc, #240]	; (8002a8c <HAL_DFSDM_ChannelInit+0x17c>)
 800299a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800299e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80029ae:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029be:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80029c4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 020f 	bic.w	r2, r2, #15
 80029dc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002a04:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6899      	ldr	r1, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	3b01      	subs	r3, #1
 8002a16:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f002 0207 	and.w	r2, r2, #7
 8002a30:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f810 	bl	8002a90 <DFSDM_GetChannelFromInstance>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4904      	ldr	r1, [pc, #16]	; (8002a84 <HAL_DFSDM_ChannelInit+0x174>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000530 	.word	0x20000530
 8002a88:	2000052c 	.word	0x2000052c
 8002a8c:	40016000 	.word	0x40016000

08002a90 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <DFSDM_GetChannelFromInstance+0x7c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d102      	bne.n	8002aa6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e02b      	b.n	8002afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a19      	ldr	r2, [pc, #100]	; (8002b10 <DFSDM_GetChannelFromInstance+0x80>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d102      	bne.n	8002ab4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e024      	b.n	8002afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <DFSDM_GetChannelFromInstance+0x84>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d102      	bne.n	8002ac2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002abc:	2302      	movs	r3, #2
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	e01d      	b.n	8002afe <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <DFSDM_GetChannelFromInstance+0x88>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d102      	bne.n	8002ad0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002aca:	2304      	movs	r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e016      	b.n	8002afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <DFSDM_GetChannelFromInstance+0x8c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d102      	bne.n	8002ade <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002ad8:	2305      	movs	r3, #5
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e00f      	b.n	8002afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <DFSDM_GetChannelFromInstance+0x90>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d102      	bne.n	8002aec <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	e008      	b.n	8002afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <DFSDM_GetChannelFromInstance+0x94>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d102      	bne.n	8002afa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002af4:	2307      	movs	r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e001      	b.n	8002afe <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002afa:	2303      	movs	r3, #3
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40016000 	.word	0x40016000
 8002b10:	40016020 	.word	0x40016020
 8002b14:	40016040 	.word	0x40016040
 8002b18:	40016080 	.word	0x40016080
 8002b1c:	400160a0 	.word	0x400160a0
 8002b20:	400160c0 	.word	0x400160c0
 8002b24:	400160e0 	.word	0x400160e0

08002b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b36:	e166      	b.n	8002e06 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8158 	beq.w	8002e00 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d005      	beq.n	8002b68 <HAL_GPIO_Init+0x40>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d130      	bne.n	8002bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	f003 0201 	and.w	r2, r3, #1
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d017      	beq.n	8002c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2203      	movs	r2, #3
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d123      	bne.n	8002c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	6939      	ldr	r1, [r7, #16]
 8002c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2203      	movs	r2, #3
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0203 	and.w	r2, r3, #3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80b2 	beq.w	8002e00 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9c:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_GPIO_Init+0x2fc>)
 8002c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca0:	4a60      	ldr	r2, [pc, #384]	; (8002e24 <HAL_GPIO_Init+0x2fc>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <HAL_GPIO_Init+0x2fc>)
 8002caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cb4:	4a5c      	ldr	r2, [pc, #368]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	3302      	adds	r3, #2
 8002cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	220f      	movs	r2, #15
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cde:	d02b      	beq.n	8002d38 <HAL_GPIO_Init+0x210>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <HAL_GPIO_Init+0x304>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d025      	beq.n	8002d34 <HAL_GPIO_Init+0x20c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a51      	ldr	r2, [pc, #324]	; (8002e30 <HAL_GPIO_Init+0x308>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d01f      	beq.n	8002d30 <HAL_GPIO_Init+0x208>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a50      	ldr	r2, [pc, #320]	; (8002e34 <HAL_GPIO_Init+0x30c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d019      	beq.n	8002d2c <HAL_GPIO_Init+0x204>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a4f      	ldr	r2, [pc, #316]	; (8002e38 <HAL_GPIO_Init+0x310>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <HAL_GPIO_Init+0x200>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a4e      	ldr	r2, [pc, #312]	; (8002e3c <HAL_GPIO_Init+0x314>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00d      	beq.n	8002d24 <HAL_GPIO_Init+0x1fc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a4d      	ldr	r2, [pc, #308]	; (8002e40 <HAL_GPIO_Init+0x318>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d007      	beq.n	8002d20 <HAL_GPIO_Init+0x1f8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a4c      	ldr	r2, [pc, #304]	; (8002e44 <HAL_GPIO_Init+0x31c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_GPIO_Init+0x1f4>
 8002d18:	2307      	movs	r3, #7
 8002d1a:	e00e      	b.n	8002d3a <HAL_GPIO_Init+0x212>
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	e00c      	b.n	8002d3a <HAL_GPIO_Init+0x212>
 8002d20:	2306      	movs	r3, #6
 8002d22:	e00a      	b.n	8002d3a <HAL_GPIO_Init+0x212>
 8002d24:	2305      	movs	r3, #5
 8002d26:	e008      	b.n	8002d3a <HAL_GPIO_Init+0x212>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	e006      	b.n	8002d3a <HAL_GPIO_Init+0x212>
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e004      	b.n	8002d3a <HAL_GPIO_Init+0x212>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e002      	b.n	8002d3a <HAL_GPIO_Init+0x212>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_GPIO_Init+0x212>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	f002 0203 	and.w	r2, r2, #3
 8002d40:	0092      	lsls	r2, r2, #2
 8002d42:	4093      	lsls	r3, r2
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d4a:	4937      	ldr	r1, [pc, #220]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_GPIO_Init+0x320>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d7c:	4a32      	ldr	r2, [pc, #200]	; (8002e48 <HAL_GPIO_Init+0x320>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_GPIO_Init+0x320>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002da6:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <HAL_GPIO_Init+0x320>)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dac:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_GPIO_Init+0x320>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <HAL_GPIO_Init+0x320>)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dd6:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_GPIO_Init+0x320>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dfa:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <HAL_GPIO_Init+0x320>)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3301      	adds	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f47f ae91 	bne.w	8002b38 <HAL_GPIO_Init+0x10>
  }
}
 8002e16:	bf00      	nop
 8002e18:	bf00      	nop
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	48000400 	.word	0x48000400
 8002e30:	48000800 	.word	0x48000800
 8002e34:	48000c00 	.word	0x48000c00
 8002e38:	48001000 	.word	0x48001000
 8002e3c:	48001400 	.word	0x48001400
 8002e40:	48001800 	.word	0x48001800
 8002e44:	48001c00 	.word	0x48001c00
 8002e48:	40010400 	.word	0x40010400

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e68:	e002      	b.n	8002e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4013      	ands	r3, r2
 8002e94:	041a      	lsls	r2, r3, #16
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	43d9      	mvns	r1, r3
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	400b      	ands	r3, r1
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ec6:	4a05      	ldr	r2, [pc, #20]	; (8002edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f806 	bl	8002ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40010400 	.word	0x40010400

08002ee0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e08d      	b.n	8003024 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7fe f91d 	bl	800115c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2224      	movs	r2, #36	; 0x24
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	e006      	b.n	8002f7e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d108      	bne.n	8002f98 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e007      	b.n	8002fa8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69d9      	ldr	r1, [r3, #28]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1a      	ldr	r2, [r3, #32]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b20      	cmp	r3, #32
 8003040:	d138      	bne.n	80030b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800304c:	2302      	movs	r3, #2
 800304e:	e032      	b.n	80030b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	; 0x24
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800307e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6819      	ldr	r1, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d139      	bne.n	800314c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e033      	b.n	800314e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2224      	movs	r2, #36	; 0x24
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003114:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af02      	add	r7, sp, #8
 8003162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003168:	f7fe fbd2 	bl	8001910 <HAL_GetTick>
 800316c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e092      	b.n	80032a0 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	2b00      	cmp	r3, #0
 8003186:	f040 808b 	bne.w	80032a0 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe f888 	bl	80012a0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003190:	f241 3188 	movw	r1, #5000	; 0x1388
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f88b 	bl	80032b0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	4b42      	ldr	r3, [pc, #264]	; (80032ac <HAL_OSPI_Init+0x150>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	68d1      	ldr	r1, [r2, #12]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6912      	ldr	r2, [r2, #16]
 80031ac:	3a01      	subs	r2, #1
 80031ae:	0412      	lsls	r2, r2, #16
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6952      	ldr	r2, [r2, #20]
 80031b6:	3a01      	subs	r2, #1
 80031b8:	0212      	lsls	r2, r2, #8
 80031ba:	4311      	orrs	r1, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031c0:	4311      	orrs	r1, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	69d2      	ldr	r2, [r2, #28]
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0412      	lsls	r2, r2, #16
 80031da:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	021a      	lsls	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2200      	movs	r2, #0
 8003200:	2120      	movs	r1, #32
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fb98 	bl	8003938 <OSPI_WaitFlagStateUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d146      	bne.n	80032a0 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	1e5a      	subs	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003248:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d107      	bne.n	8003288 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0202 	orr.w	r2, r2, #2
 8003286:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003290:	d103      	bne.n	800329a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	645a      	str	r2, [r3, #68]	; 0x44
 8003298:	e002      	b.n	80032a0 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	f8e0f8f4 	.word	0xf8e0f8f4

080032b0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b092      	sub	sp, #72	; 0x48
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a08      	ldr	r2, [pc, #32]	; (8003310 <HAL_OSPIM_Config+0x40>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d105      	bne.n	80032fe <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80032fc:	e004      	b.n	8003308 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80032fe:	2301      	movs	r3, #1
 8003300:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003308:	2300      	movs	r3, #0
 800330a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800330e:	e01f      	b.n	8003350 <HAL_OSPIM_Config+0x80>
 8003310:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003314:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003318:	3301      	adds	r3, #1
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003320:	f107 0114 	add.w	r1, r7, #20
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	4619      	mov	r1, r3
 8003330:	f000 fb3a 	bl	80039a8 <OSPIM_GetConfig>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2208      	movs	r2, #8
 8003344:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003346:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800334a:	3301      	adds	r3, #1
 800334c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003350:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003354:	2b01      	cmp	r3, #1
 8003356:	d9dd      	bls.n	8003314 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003358:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 82de 	bne.w	800391e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003362:	4bc6      	ldr	r3, [pc, #792]	; (800367c <HAL_OSPIM_Config+0x3ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800336e:	4bc3      	ldr	r3, [pc, #780]	; (800367c <HAL_OSPIM_Config+0x3ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4ac2      	ldr	r2, [pc, #776]	; (800367c <HAL_OSPIM_Config+0x3ac>)
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800337a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003386:	4bbe      	ldr	r3, [pc, #760]	; (8003680 <HAL_OSPIM_Config+0x3b0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003392:	4bbb      	ldr	r3, [pc, #748]	; (8003680 <HAL_OSPIM_Config+0x3b0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4aba      	ldr	r2, [pc, #744]	; (8003680 <HAL_OSPIM_Config+0x3b0>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800339e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80033a2:	f043 0302 	orr.w	r3, r3, #2
 80033a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80033aa:	49b6      	ldr	r1, [pc, #728]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 80033ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	3348      	adds	r3, #72	; 0x48
 80033b8:	443b      	add	r3, r7
 80033ba:	3b2c      	subs	r3, #44	; 0x2c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3b01      	subs	r3, #1
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	48af      	ldr	r0, [pc, #700]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 80033c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	3348      	adds	r3, #72	; 0x48
 80033d4:	443b      	add	r3, r7
 80033d6:	3b2c      	subs	r3, #44	; 0x2c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3b01      	subs	r3, #1
 80033dc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4403      	add	r3, r0
 80033e4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80033e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	3348      	adds	r3, #72	; 0x48
 80033f2:	443b      	add	r3, r7
 80033f4:	3b34      	subs	r3, #52	; 0x34
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a1 	beq.w	8003540 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80033fe:	49a1      	ldr	r1, [pc, #644]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 8003400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3348      	adds	r3, #72	; 0x48
 800340c:	443b      	add	r3, r7
 800340e:	3b34      	subs	r3, #52	; 0x34
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3b01      	subs	r3, #1
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	489a      	ldr	r0, [pc, #616]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 800341c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	3348      	adds	r3, #72	; 0x48
 8003428:	443b      	add	r3, r7
 800342a:	3b34      	subs	r3, #52	; 0x34
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	f021 0201 	bic.w	r2, r1, #1
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4403      	add	r3, r0
 8003438:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800343a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	3348      	adds	r3, #72	; 0x48
 8003446:	443b      	add	r3, r7
 8003448:	3b30      	subs	r3, #48	; 0x30
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01d      	beq.n	800348c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003450:	498c      	ldr	r1, [pc, #560]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 8003452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	3348      	adds	r3, #72	; 0x48
 800345e:	443b      	add	r3, r7
 8003460:	3b30      	subs	r3, #48	; 0x30
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3b01      	subs	r3, #1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	4885      	ldr	r0, [pc, #532]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 800346e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	3348      	adds	r3, #72	; 0x48
 800347a:	443b      	add	r3, r7
 800347c:	3b30      	subs	r3, #48	; 0x30
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3b01      	subs	r3, #1
 8003482:	f021 0210 	bic.w	r2, r1, #16
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4403      	add	r3, r0
 800348a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800348c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	3348      	adds	r3, #72	; 0x48
 8003498:	443b      	add	r3, r7
 800349a:	3b28      	subs	r3, #40	; 0x28
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d021      	beq.n	80034e6 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80034a2:	4978      	ldr	r1, [pc, #480]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 80034a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	3348      	adds	r3, #72	; 0x48
 80034b0:	443b      	add	r3, r7
 80034b2:	3b28      	subs	r3, #40	; 0x28
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	4870      	ldr	r0, [pc, #448]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 80034c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	3348      	adds	r3, #72	; 0x48
 80034d0:	443b      	add	r3, r7
 80034d2:	3b28      	subs	r3, #40	; 0x28
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4403      	add	r3, r0
 80034e4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80034e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	3348      	adds	r3, #72	; 0x48
 80034f2:	443b      	add	r3, r7
 80034f4:	3b24      	subs	r3, #36	; 0x24
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d021      	beq.n	8003540 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80034fc:	4961      	ldr	r1, [pc, #388]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 80034fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	3348      	adds	r3, #72	; 0x48
 800350a:	443b      	add	r3, r7
 800350c:	3b24      	subs	r3, #36	; 0x24
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3b01      	subs	r3, #1
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	4859      	ldr	r0, [pc, #356]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 800351e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	3348      	adds	r3, #72	; 0x48
 800352a:	443b      	add	r3, r7
 800352c:	3b24      	subs	r3, #36	; 0x24
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3b01      	subs	r3, #1
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4403      	add	r3, r0
 800353e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	3348      	adds	r3, #72	; 0x48
 8003552:	443b      	add	r3, r7
 8003554:	3b34      	subs	r3, #52	; 0x34
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4299      	cmp	r1, r3
 800355a:	d038      	beq.n	80035ce <HAL_OSPIM_Config+0x2fe>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	3348      	adds	r3, #72	; 0x48
 800356e:	443b      	add	r3, r7
 8003570:	3b30      	subs	r3, #48	; 0x30
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4299      	cmp	r1, r3
 8003576:	d02a      	beq.n	80035ce <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	6899      	ldr	r1, [r3, #8]
 800357c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	3348      	adds	r3, #72	; 0x48
 800358a:	443b      	add	r3, r7
 800358c:	3b2c      	subs	r3, #44	; 0x2c
 800358e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003590:	4299      	cmp	r1, r3
 8003592:	d01c      	beq.n	80035ce <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	68d9      	ldr	r1, [r3, #12]
 8003598:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	3348      	adds	r3, #72	; 0x48
 80035a6:	443b      	add	r3, r7
 80035a8:	3b28      	subs	r3, #40	; 0x28
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4299      	cmp	r1, r3
 80035ae:	d00e      	beq.n	80035ce <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	6919      	ldr	r1, [r3, #16]
 80035b4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	3348      	adds	r3, #72	; 0x48
 80035c2:	443b      	add	r3, r7
 80035c4:	3b24      	subs	r3, #36	; 0x24
 80035c6:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80035c8:	4299      	cmp	r1, r3
 80035ca:	f040 80d3 	bne.w	8003774 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80035ce:	492d      	ldr	r1, [pc, #180]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 80035d0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	3348      	adds	r3, #72	; 0x48
 80035de:	443b      	add	r3, r7
 80035e0:	3b34      	subs	r3, #52	; 0x34
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	4825      	ldr	r0, [pc, #148]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 80035ee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	3348      	adds	r3, #72	; 0x48
 80035fc:	443b      	add	r3, r7
 80035fe:	3b34      	subs	r3, #52	; 0x34
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3b01      	subs	r3, #1
 8003604:	f021 0201 	bic.w	r2, r1, #1
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4403      	add	r3, r0
 800360c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800360e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	3348      	adds	r3, #72	; 0x48
 800361c:	443b      	add	r3, r7
 800361e:	3b30      	subs	r3, #48	; 0x30
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d01f      	beq.n	8003666 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003626:	4917      	ldr	r1, [pc, #92]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 8003628:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	3348      	adds	r3, #72	; 0x48
 8003636:	443b      	add	r3, r7
 8003638:	3b30      	subs	r3, #48	; 0x30
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3b01      	subs	r3, #1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	480f      	ldr	r0, [pc, #60]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 8003646:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	3348      	adds	r3, #72	; 0x48
 8003654:	443b      	add	r3, r7
 8003656:	3b30      	subs	r3, #48	; 0x30
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3b01      	subs	r3, #1
 800365c:	f021 0210 	bic.w	r2, r1, #16
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4403      	add	r3, r0
 8003664:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003666:	4907      	ldr	r1, [pc, #28]	; (8003684 <HAL_OSPIM_Config+0x3b4>)
 8003668:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	3348      	adds	r3, #72	; 0x48
 8003676:	443b      	add	r3, r7
 8003678:	3b2c      	subs	r3, #44	; 0x2c
 800367a:	e005      	b.n	8003688 <HAL_OSPIM_Config+0x3b8>
 800367c:	a0001000 	.word	0xa0001000
 8003680:	a0001400 	.word	0xa0001400
 8003684:	50061c00 	.word	0x50061c00
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3b01      	subs	r3, #1
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	6859      	ldr	r1, [r3, #4]
 8003692:	48a6      	ldr	r0, [pc, #664]	; (800392c <HAL_OSPIM_Config+0x65c>)
 8003694:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3348      	adds	r3, #72	; 0x48
 80036a2:	443b      	add	r3, r7
 80036a4:	3b2c      	subs	r3, #44	; 0x2c
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4403      	add	r3, r0
 80036b2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80036b4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	3348      	adds	r3, #72	; 0x48
 80036c2:	443b      	add	r3, r7
 80036c4:	3b28      	subs	r3, #40	; 0x28
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d023      	beq.n	8003714 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80036cc:	4997      	ldr	r1, [pc, #604]	; (800392c <HAL_OSPIM_Config+0x65c>)
 80036ce:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	3348      	adds	r3, #72	; 0x48
 80036dc:	443b      	add	r3, r7
 80036de:	3b28      	subs	r3, #40	; 0x28
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	488f      	ldr	r0, [pc, #572]	; (800392c <HAL_OSPIM_Config+0x65c>)
 80036f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	3348      	adds	r3, #72	; 0x48
 80036fe:	443b      	add	r3, r7
 8003700:	3b28      	subs	r3, #40	; 0x28
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3b01      	subs	r3, #1
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4403      	add	r3, r0
 8003712:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003714:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	3348      	adds	r3, #72	; 0x48
 8003722:	443b      	add	r3, r7
 8003724:	3b24      	subs	r3, #36	; 0x24
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d023      	beq.n	8003774 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800372c:	497f      	ldr	r1, [pc, #508]	; (800392c <HAL_OSPIM_Config+0x65c>)
 800372e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	3348      	adds	r3, #72	; 0x48
 800373c:	443b      	add	r3, r7
 800373e:	3b24      	subs	r3, #36	; 0x24
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3b01      	subs	r3, #1
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	4877      	ldr	r0, [pc, #476]	; (800392c <HAL_OSPIM_Config+0x65c>)
 8003750:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	3348      	adds	r3, #72	; 0x48
 800375e:	443b      	add	r3, r7
 8003760:	3b24      	subs	r3, #36	; 0x24
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3b01      	subs	r3, #1
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4403      	add	r3, r0
 8003772:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003774:	4a6d      	ldr	r2, [pc, #436]	; (800392c <HAL_OSPIM_Config+0x65c>)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	3b01      	subs	r3, #1
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003788:	025b      	lsls	r3, r3, #9
 800378a:	431a      	orrs	r2, r3
 800378c:	4967      	ldr	r1, [pc, #412]	; (800392c <HAL_OSPIM_Config+0x65c>)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	3b01      	subs	r3, #1
 8003794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800379e:	4a63      	ldr	r2, [pc, #396]	; (800392c <HAL_OSPIM_Config+0x65c>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f023 0203 	bic.w	r2, r3, #3
 80037b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	431a      	orrs	r2, r3
 80037b6:	495d      	ldr	r1, [pc, #372]	; (800392c <HAL_OSPIM_Config+0x65c>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3b01      	subs	r3, #1
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d014      	beq.n	80037fa <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80037d0:	4a56      	ldr	r2, [pc, #344]	; (800392c <HAL_OSPIM_Config+0x65c>)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e4:	015b      	lsls	r3, r3, #5
 80037e6:	431a      	orrs	r2, r3
 80037e8:	4950      	ldr	r1, [pc, #320]	; (800392c <HAL_OSPIM_Config+0x65c>)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	f042 0210 	orr.w	r2, r2, #16
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d019      	beq.n	800383a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003806:	4a49      	ldr	r2, [pc, #292]	; (800392c <HAL_OSPIM_Config+0x65c>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	3b01      	subs	r3, #1
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800381c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381e:	049b      	lsls	r3, r3, #18
 8003820:	431a      	orrs	r2, r3
 8003822:	4942      	ldr	r1, [pc, #264]	; (800392c <HAL_OSPIM_Config+0x65c>)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	3b01      	subs	r3, #1
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	e01c      	b.n	8003874 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d018      	beq.n	8003874 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003842:	4a3a      	ldr	r2, [pc, #232]	; (800392c <HAL_OSPIM_Config+0x65c>)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	3b01      	subs	r3, #1
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800385a:	069b      	lsls	r3, r3, #26
 800385c:	431a      	orrs	r2, r3
 800385e:	4933      	ldr	r1, [pc, #204]	; (800392c <HAL_OSPIM_Config+0x65c>)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	3b01      	subs	r3, #1
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d019      	beq.n	80038b4 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003880:	4a2a      	ldr	r2, [pc, #168]	; (800392c <HAL_OSPIM_Config+0x65c>)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	3b01      	subs	r3, #1
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003898:	049b      	lsls	r3, r3, #18
 800389a:	431a      	orrs	r2, r3
 800389c:	4923      	ldr	r1, [pc, #140]	; (800392c <HAL_OSPIM_Config+0x65c>)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	e01c      	b.n	80038ee <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d018      	beq.n	80038ee <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80038bc:	4a1b      	ldr	r2, [pc, #108]	; (800392c <HAL_OSPIM_Config+0x65c>)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d4:	069b      	lsls	r3, r3, #26
 80038d6:	431a      	orrs	r2, r3
 80038d8:	4914      	ldr	r1, [pc, #80]	; (800392c <HAL_OSPIM_Config+0x65c>)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	3b01      	subs	r3, #1
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80038ee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80038fa:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <HAL_OSPIM_Config+0x660>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <HAL_OSPIM_Config+0x660>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003906:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_OSPIM_Config+0x664>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <HAL_OSPIM_Config+0x664>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800391e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003922:	4618      	mov	r0, r3
 8003924:	3748      	adds	r7, #72	; 0x48
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	50061c00 	.word	0x50061c00
 8003930:	a0001000 	.word	0xa0001000
 8003934:	a0001400 	.word	0xa0001400

08003938 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003948:	e01a      	b.n	8003980 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d016      	beq.n	8003980 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fd ffdd 	bl	8001910 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800396e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003974:	f043 0201 	orr.w	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e00e      	b.n	800399e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	429a      	cmp	r2, r3
 800399a:	d1d6      	bne.n	800394a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <OSPIM_GetConfig+0x26>
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d802      	bhi.n	80039ce <OSPIM_GetConfig+0x26>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
 80039d2:	e08e      	b.n	8003af2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2200      	movs	r2, #0
 80039de:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2200      	movs	r2, #0
 80039ea:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d101      	bne.n	80039fc <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80039f8:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <OSPIM_GetConfig+0x158>)
 80039fa:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e074      	b.n	8003aec <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003a02:	4a40      	ldr	r2, [pc, #256]	; (8003b04 <OSPIM_GetConfig+0x15c>)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4053      	eors	r3, r2
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4053      	eors	r3, r2
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4053      	eors	r3, r2
 8003a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d018      	beq.n	8003aaa <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4053      	eors	r3, r2
 8003a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d111      	bne.n	8003aaa <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3301      	adds	r3, #1
 8003a94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	60da      	str	r2, [r3, #12]
 8003a9c:	e005      	b.n	8003aaa <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d018      	beq.n	8003ae6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4053      	eors	r3, r2
 8003aba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d111      	bne.n	8003ae6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	611a      	str	r2, [r3, #16]
 8003ad8:	e005      	b.n	8003ae6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3301      	adds	r3, #1
 8003ade:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d987      	bls.n	8003a02 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	04040222 	.word	0x04040222
 8003b04:	50061c00 	.word	0x50061c00

08003b08 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40007000 	.word	0x40007000

08003b28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b38:	d102      	bne.n	8003b40 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3e:	e00b      	b.n	8003b58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d102      	bne.n	8003b56 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b54:	e000      	b.n	8003b58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003b56:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40007000 	.word	0x40007000

08003b68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d141      	bne.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b76:	4b4b      	ldr	r3, [pc, #300]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d131      	bne.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b84:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8a:	4a46      	ldr	r2, [pc, #280]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b9c:	4a41      	ldr	r2, [pc, #260]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ba4:	4b40      	ldr	r3, [pc, #256]	; (8003ca8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2232      	movs	r2, #50	; 0x32
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	4a3f      	ldr	r2, [pc, #252]	; (8003cac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	0c9b      	lsrs	r3, r3, #18
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bba:	e002      	b.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bc2:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d102      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f2      	bne.n	8003bbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bd6:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d158      	bne.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e057      	b.n	8003c98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003be8:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bee:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bf8:	e04d      	b.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c00:	d141      	bne.n	8003c86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c02:	4b28      	ldr	r3, [pc, #160]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d131      	bne.n	8003c74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c16:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c20:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c28:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2232      	movs	r2, #50	; 0x32
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	4a1c      	ldr	r2, [pc, #112]	; (8003cac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	0c9b      	lsrs	r3, r3, #18
 8003c42:	3301      	adds	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c46:	e002      	b.n	8003c4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c4e:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5a:	d102      	bne.n	8003c62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f2      	bne.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6e:	d112      	bne.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e011      	b.n	8003c98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c84:	e007      	b.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c86:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c8e:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c94:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	431bde83 	.word	0x431bde83

08003cb0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f000 bc08 	b.w	80044d4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc4:	4b96      	ldr	r3, [pc, #600]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cce:	4b94      	ldr	r3, [pc, #592]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80e4 	beq.w	8003eae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_RCC_OscConfig+0x4c>
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	f040 808b 	bne.w	8003e0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	f040 8087 	bne.w	8003e0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cfc:	4b88      	ldr	r3, [pc, #544]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_OscConfig+0x64>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e3df      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1a      	ldr	r2, [r3, #32]
 8003d18:	4b81      	ldr	r3, [pc, #516]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <HAL_RCC_OscConfig+0x7e>
 8003d24:	4b7e      	ldr	r3, [pc, #504]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2c:	e005      	b.n	8003d3a <HAL_RCC_OscConfig+0x8a>
 8003d2e:	4b7c      	ldr	r3, [pc, #496]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d223      	bcs.n	8003d86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fdcc 	bl	80048e0 <RCC_SetFlashLatencyFromMSIRange>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e3c0      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d52:	4b73      	ldr	r3, [pc, #460]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a72      	ldr	r2, [pc, #456]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d58:	f043 0308 	orr.w	r3, r3, #8
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4b70      	ldr	r3, [pc, #448]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	496d      	ldr	r1, [pc, #436]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d70:	4b6b      	ldr	r3, [pc, #428]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	4968      	ldr	r1, [pc, #416]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
 8003d84:	e025      	b.n	8003dd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d86:	4b66      	ldr	r3, [pc, #408]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a65      	ldr	r2, [pc, #404]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	f043 0308 	orr.w	r3, r3, #8
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b63      	ldr	r3, [pc, #396]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4960      	ldr	r1, [pc, #384]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003da4:	4b5e      	ldr	r3, [pc, #376]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	495b      	ldr	r1, [pc, #364]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fd8c 	bl	80048e0 <RCC_SetFlashLatencyFromMSIRange>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e380      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dd2:	f000 fcc1 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	4950      	ldr	r1, [pc, #320]	; (8003f24 <HAL_RCC_OscConfig+0x274>)
 8003de4:	5ccb      	ldrb	r3, [r1, r3]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	fa22 f303 	lsr.w	r3, r2, r3
 8003dee:	4a4e      	ldr	r2, [pc, #312]	; (8003f28 <HAL_RCC_OscConfig+0x278>)
 8003df0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003df2:	4b4e      	ldr	r3, [pc, #312]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fd fd3a 	bl	8001870 <HAL_InitTick>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d052      	beq.n	8003eac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	e364      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d032      	beq.n	8003e78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e12:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a42      	ldr	r2, [pc, #264]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fd77 	bl	8001910 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e26:	f7fd fd73 	bl	8001910 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e34d      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e38:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e44:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a35      	ldr	r2, [pc, #212]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	f043 0308 	orr.w	r3, r3, #8
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b33      	ldr	r3, [pc, #204]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4930      	ldr	r1, [pc, #192]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e62:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	492b      	ldr	r1, [pc, #172]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 8003e76:	e01a      	b.n	8003eae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e78:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e84:	f7fd fd44 	bl	8001910 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e8c:	f7fd fd40 	bl	8001910 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e31a      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x1dc>
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d073      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_OscConfig+0x21c>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b0c      	cmp	r3, #12
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d063      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2f0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d15f      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e2f7      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d106      	bne.n	8003efc <HAL_RCC_OscConfig+0x24c>
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e025      	b.n	8003f48 <HAL_RCC_OscConfig+0x298>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f04:	d114      	bne.n	8003f30 <HAL_RCC_OscConfig+0x280>
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a02      	ldr	r2, [pc, #8]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e013      	b.n	8003f48 <HAL_RCC_OscConfig+0x298>
 8003f20:	40021000 	.word	0x40021000
 8003f24:	08006888 	.word	0x08006888
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	20000004 	.word	0x20000004
 8003f30:	4ba0      	ldr	r3, [pc, #640]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a9f      	ldr	r2, [pc, #636]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b9d      	ldr	r3, [pc, #628]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a9c      	ldr	r2, [pc, #624]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fd fcde 	bl	8001910 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fd fcda 	bl	8001910 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e2b4      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6a:	4b92      	ldr	r3, [pc, #584]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x2a8>
 8003f76:	e014      	b.n	8003fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fcca 	bl	8001910 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fd fcc6 	bl	8001910 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e2a0      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f92:	4b88      	ldr	r3, [pc, #544]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x2d0>
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d060      	beq.n	8004070 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x310>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d119      	bne.n	8003fee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d116      	bne.n	8003fee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fc0:	4b7c      	ldr	r3, [pc, #496]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x328>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e27d      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd8:	4b76      	ldr	r3, [pc, #472]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	4973      	ldr	r1, [pc, #460]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fec:	e040      	b.n	8004070 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d023      	beq.n	800403e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff6:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6e      	ldr	r2, [pc, #440]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fd fc85 	bl	8001910 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400a:	f7fd fc81 	bl	8001910 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e25b      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401c:	4b65      	ldr	r3, [pc, #404]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004028:	4b62      	ldr	r3, [pc, #392]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	495f      	ldr	r1, [pc, #380]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004038:	4313      	orrs	r3, r2
 800403a:	604b      	str	r3, [r1, #4]
 800403c:	e018      	b.n	8004070 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403e:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a5c      	ldr	r2, [pc, #368]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404a:	f7fd fc61 	bl	8001910 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004052:	f7fd fc5d 	bl	8001910 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e237      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004064:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f0      	bne.n	8004052 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d03c      	beq.n	80040f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01c      	beq.n	80040be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004084:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408a:	4a4a      	ldr	r2, [pc, #296]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd fc3c 	bl	8001910 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409c:	f7fd fc38 	bl	8001910 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e212      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ae:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80040b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ef      	beq.n	800409c <HAL_RCC_OscConfig+0x3ec>
 80040bc:	e01b      	b.n	80040f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040be:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80040c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c4:	4a3b      	ldr	r2, [pc, #236]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fd fc1f 	bl	8001910 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d6:	f7fd fc1b 	bl	8001910 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e1f5      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e8:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ef      	bne.n	80040d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80a6 	beq.w	8004250 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004108:	4b2a      	ldr	r3, [pc, #168]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004114:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	6593      	str	r3, [r2, #88]	; 0x58
 8004120:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412c:	2301      	movs	r3, #1
 800412e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004130:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <HAL_RCC_OscConfig+0x508>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d118      	bne.n	800416e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800413c:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <HAL_RCC_OscConfig+0x508>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_RCC_OscConfig+0x508>)
 8004142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004148:	f7fd fbe2 	bl	8001910 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004150:	f7fd fbde 	bl	8001910 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e1b8      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_RCC_OscConfig+0x508>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d108      	bne.n	8004188 <HAL_RCC_OscConfig+0x4d8>
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004186:	e029      	b.n	80041dc <HAL_RCC_OscConfig+0x52c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b05      	cmp	r3, #5
 800418e:	d115      	bne.n	80041bc <HAL_RCC_OscConfig+0x50c>
 8004190:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004198:	f043 0304 	orr.w	r3, r3, #4
 800419c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	4a03      	ldr	r2, [pc, #12]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b0:	e014      	b.n	80041dc <HAL_RCC_OscConfig+0x52c>
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
 80041bc:	4b9d      	ldr	r3, [pc, #628]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	4a9c      	ldr	r2, [pc, #624]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041cc:	4b99      	ldr	r3, [pc, #612]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	4a98      	ldr	r2, [pc, #608]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d016      	beq.n	8004212 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd fb94 	bl	8001910 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fd fb90 	bl	8001910 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e168      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004202:	4b8c      	ldr	r3, [pc, #560]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ed      	beq.n	80041ec <HAL_RCC_OscConfig+0x53c>
 8004210:	e015      	b.n	800423e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004212:	f7fd fb7d 	bl	8001910 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004218:	e00a      	b.n	8004230 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421a:	f7fd fb79 	bl	8001910 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f241 3288 	movw	r2, #5000	; 0x1388
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e151      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004230:	4b80      	ldr	r3, [pc, #512]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1ed      	bne.n	800421a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800423e:	7ffb      	ldrb	r3, [r7, #31]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4b7b      	ldr	r3, [pc, #492]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	4a7a      	ldr	r2, [pc, #488]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d03c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01c      	beq.n	800429e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004264:	4b73      	ldr	r3, [pc, #460]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800426a:	4a72      	ldr	r2, [pc, #456]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fd fb4c 	bl	8001910 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800427c:	f7fd fb48 	bl	8001910 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e122      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800428e:	4b69      	ldr	r3, [pc, #420]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ef      	beq.n	800427c <HAL_RCC_OscConfig+0x5cc>
 800429c:	e01b      	b.n	80042d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800429e:	4b65      	ldr	r3, [pc, #404]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80042a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a4:	4a63      	ldr	r2, [pc, #396]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fd fb2f 	bl	8001910 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b6:	f7fd fb2b 	bl	8001910 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e105      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c8:	4b5a      	ldr	r3, [pc, #360]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80042ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ef      	bne.n	80042b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80f9 	beq.w	80044d2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f040 80cf 	bne.w	8004488 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042ea:	4b52      	ldr	r3, [pc, #328]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 0203 	and.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d12c      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	3b01      	subs	r3, #1
 800430a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d123      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d11b      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d113      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	3b01      	subs	r3, #1
 800433e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d109      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	3b01      	subs	r3, #1
 8004352:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d071      	beq.n	800443c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d068      	beq.n	8004430 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800435e:	4b35      	ldr	r3, [pc, #212]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800436a:	4b32      	ldr	r3, [pc, #200]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0ac      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004384:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004386:	f7fd fac3 	bl	8001910 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438e:	f7fd fabf 	bl	8001910 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e099      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ac:	4b21      	ldr	r3, [pc, #132]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	4b21      	ldr	r3, [pc, #132]	; (8004438 <HAL_RCC_OscConfig+0x788>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043bc:	3a01      	subs	r2, #1
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	4311      	orrs	r1, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043c6:	0212      	lsls	r2, r2, #8
 80043c8:	4311      	orrs	r1, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043ce:	0852      	lsrs	r2, r2, #1
 80043d0:	3a01      	subs	r2, #1
 80043d2:	0552      	lsls	r2, r2, #21
 80043d4:	4311      	orrs	r1, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043da:	0852      	lsrs	r2, r2, #1
 80043dc:	3a01      	subs	r2, #1
 80043de:	0652      	lsls	r2, r2, #25
 80043e0:	4311      	orrs	r1, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043e6:	06d2      	lsls	r2, r2, #27
 80043e8:	430a      	orrs	r2, r1
 80043ea:	4912      	ldr	r1, [pc, #72]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043f0:	4b10      	ldr	r3, [pc, #64]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0f      	ldr	r2, [pc, #60]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004406:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004408:	f7fd fa82 	bl	8001910 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd fa7e 	bl	8001910 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e058      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	4b04      	ldr	r3, [pc, #16]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800442e:	e050      	b.n	80044d2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e04f      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
 8004434:	40021000 	.word	0x40021000
 8004438:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443c:	4b27      	ldr	r3, [pc, #156]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d144      	bne.n	80044d2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004448:	4b24      	ldr	r3, [pc, #144]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a23      	ldr	r2, [pc, #140]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 800444e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004452:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004454:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4a20      	ldr	r2, [pc, #128]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 800445a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800445e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004460:	f7fd fa56 	bl	8001910 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd fa52 	bl	8001910 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e02c      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x7b8>
 8004486:	e024      	b.n	80044d2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b0c      	cmp	r3, #12
 800448c:	d01f      	beq.n	80044ce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448e:	4b13      	ldr	r3, [pc, #76]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a12      	ldr	r2, [pc, #72]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 8004494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fd fa39 	bl	8001910 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fd fa35 	bl	8001910 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e00f      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	4905      	ldr	r1, [pc, #20]	; (80044dc <HAL_RCC_OscConfig+0x82c>)
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_RCC_OscConfig+0x830>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60cb      	str	r3, [r1, #12]
 80044cc:	e001      	b.n	80044d2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000
 80044e0:	feeefffc 	.word	0xfeeefffc

080044e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e11d      	b.n	8004738 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b90      	ldr	r3, [pc, #576]	; (8004740 <HAL_RCC_ClockConfig+0x25c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d910      	bls.n	800452c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b8d      	ldr	r3, [pc, #564]	; (8004740 <HAL_RCC_ClockConfig+0x25c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 020f 	bic.w	r2, r3, #15
 8004512:	498b      	ldr	r1, [pc, #556]	; (8004740 <HAL_RCC_ClockConfig+0x25c>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b89      	ldr	r3, [pc, #548]	; (8004740 <HAL_RCC_ClockConfig+0x25c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e105      	b.n	8004738 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d010      	beq.n	800455a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	4b81      	ldr	r3, [pc, #516]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004544:	429a      	cmp	r2, r3
 8004546:	d908      	bls.n	800455a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004548:	4b7e      	ldr	r3, [pc, #504]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	497b      	ldr	r1, [pc, #492]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d079      	beq.n	800465a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d11e      	bne.n	80045ac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456e:	4b75      	ldr	r3, [pc, #468]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e0dc      	b.n	8004738 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800457e:	f000 fa09 	bl	8004994 <RCC_GetSysClockFreqFromPLLSource>
 8004582:	4603      	mov	r3, r0
 8004584:	4a70      	ldr	r2, [pc, #448]	; (8004748 <HAL_RCC_ClockConfig+0x264>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d946      	bls.n	8004618 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800458a:	4b6e      	ldr	r3, [pc, #440]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d140      	bne.n	8004618 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004596:	4b6b      	ldr	r3, [pc, #428]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800459e:	4a69      	ldr	r2, [pc, #420]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 80045a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e035      	b.n	8004618 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d107      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b4:	4b63      	ldr	r3, [pc, #396]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d115      	bne.n	80045ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0b9      	b.n	8004738 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045cc:	4b5d      	ldr	r3, [pc, #372]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0ad      	b.n	8004738 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045dc:	4b59      	ldr	r3, [pc, #356]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0a5      	b.n	8004738 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80045ec:	f000 f8b4 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4a55      	ldr	r2, [pc, #340]	; (8004748 <HAL_RCC_ClockConfig+0x264>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d90f      	bls.n	8004618 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80045f8:	4b52      	ldr	r3, [pc, #328]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004604:	4b4f      	ldr	r3, [pc, #316]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460c:	4a4d      	ldr	r2, [pc, #308]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 800460e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004612:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004618:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f023 0203 	bic.w	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4947      	ldr	r1, [pc, #284]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800462a:	f7fd f971 	bl	8001910 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004630:	e00a      	b.n	8004648 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004632:	f7fd f96d 	bl	8001910 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e077      	b.n	8004738 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004648:	4b3e      	ldr	r3, [pc, #248]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 020c 	and.w	r2, r3, #12
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	429a      	cmp	r2, r3
 8004658:	d1eb      	bne.n	8004632 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b80      	cmp	r3, #128	; 0x80
 800465e:	d105      	bne.n	800466c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004660:	4b38      	ldr	r3, [pc, #224]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a37      	ldr	r2, [pc, #220]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 8004666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004684:	429a      	cmp	r2, r3
 8004686:	d208      	bcs.n	800469a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	492b      	ldr	r1, [pc, #172]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800469a:	4b29      	ldr	r3, [pc, #164]	; (8004740 <HAL_RCC_ClockConfig+0x25c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d210      	bcs.n	80046ca <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <HAL_RCC_ClockConfig+0x25c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 020f 	bic.w	r2, r3, #15
 80046b0:	4923      	ldr	r1, [pc, #140]	; (8004740 <HAL_RCC_ClockConfig+0x25c>)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b8:	4b21      	ldr	r3, [pc, #132]	; (8004740 <HAL_RCC_ClockConfig+0x25c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e036      	b.n	8004738 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4918      	ldr	r1, [pc, #96]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d009      	beq.n	8004708 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046f4:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4910      	ldr	r1, [pc, #64]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 8004704:	4313      	orrs	r3, r2
 8004706:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004708:	f000 f826 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <HAL_RCC_ClockConfig+0x260>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	490c      	ldr	r1, [pc, #48]	; (800474c <HAL_RCC_ClockConfig+0x268>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
 8004724:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <HAL_RCC_ClockConfig+0x26c>)
 8004726:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <HAL_RCC_ClockConfig+0x270>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fd f89f 	bl	8001870 <HAL_InitTick>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]

  return status;
 8004736:	7bfb      	ldrb	r3, [r7, #15]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40022000 	.word	0x40022000
 8004744:	40021000 	.word	0x40021000
 8004748:	04c4b400 	.word	0x04c4b400
 800474c:	08006888 	.word	0x08006888
 8004750:	20000000 	.word	0x20000000
 8004754:	20000004 	.word	0x20000004

08004758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004758:	b480      	push	{r7}
 800475a:	b089      	sub	sp, #36	; 0x24
 800475c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	2300      	movs	r3, #0
 8004764:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004766:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <HAL_RCC_GetSysClockFreq+0x108>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004770:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <HAL_RCC_GetSysClockFreq+0x108>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x34>
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d121      	bne.n	80047ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d11e      	bne.n	80047ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800478c:	4b34      	ldr	r3, [pc, #208]	; (8004860 <HAL_RCC_GetSysClockFreq+0x108>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004798:	4b31      	ldr	r3, [pc, #196]	; (8004860 <HAL_RCC_GetSysClockFreq+0x108>)
 800479a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	e005      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047a8:	4b2d      	ldr	r3, [pc, #180]	; (8004860 <HAL_RCC_GetSysClockFreq+0x108>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047b4:	4a2b      	ldr	r2, [pc, #172]	; (8004864 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10d      	bne.n	80047e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c8:	e00a      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d102      	bne.n	80047d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_RCC_GetSysClockFreq+0x110>)
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	e004      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047dc:	4b23      	ldr	r3, [pc, #140]	; (800486c <HAL_RCC_GetSysClockFreq+0x114>)
 80047de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	d134      	bne.n	8004850 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047e6:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d003      	beq.n	80047fe <HAL_RCC_GetSysClockFreq+0xa6>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d003      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0xac>
 80047fc:	e005      	b.n	800480a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047fe:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <HAL_RCC_GetSysClockFreq+0x110>)
 8004800:	617b      	str	r3, [r7, #20]
      break;
 8004802:	e005      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004804:	4b19      	ldr	r3, [pc, #100]	; (800486c <HAL_RCC_GetSysClockFreq+0x114>)
 8004806:	617b      	str	r3, [r7, #20]
      break;
 8004808:	e002      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	617b      	str	r3, [r7, #20]
      break;
 800480e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004810:	4b13      	ldr	r3, [pc, #76]	; (8004860 <HAL_RCC_GetSysClockFreq+0x108>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	3301      	adds	r3, #1
 800481c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <HAL_RCC_GetSysClockFreq+0x108>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	fb03 f202 	mul.w	r2, r3, r2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	fbb2 f3f3 	udiv	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_RCC_GetSysClockFreq+0x108>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	0e5b      	lsrs	r3, r3, #25
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	3301      	adds	r3, #1
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004850:	69bb      	ldr	r3, [r7, #24]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3724      	adds	r7, #36	; 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000
 8004864:	080068a0 	.word	0x080068a0
 8004868:	00f42400 	.word	0x00f42400
 800486c:	007a1200 	.word	0x007a1200

08004870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <HAL_RCC_GetHCLKFreq+0x14>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000000 	.word	0x20000000

08004888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800488c:	f7ff fff0 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0a1b      	lsrs	r3, r3, #8
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4904      	ldr	r1, [pc, #16]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	08006898 	.word	0x08006898

080048b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048b8:	f7ff ffda 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 80048bc:	4602      	mov	r2, r0
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	0adb      	lsrs	r3, r3, #11
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	4904      	ldr	r1, [pc, #16]	; (80048dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ca:	5ccb      	ldrb	r3, [r1, r3]
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40021000 	.word	0x40021000
 80048dc:	08006898 	.word	0x08006898

080048e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048e8:	2300      	movs	r3, #0
 80048ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048ec:	4b27      	ldr	r3, [pc, #156]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048f8:	f7ff f916 	bl	8003b28 <HAL_PWREx_GetVoltageRange>
 80048fc:	6178      	str	r0, [r7, #20]
 80048fe:	e014      	b.n	800492a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004900:	4b22      	ldr	r3, [pc, #136]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	4a21      	ldr	r2, [pc, #132]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490a:	6593      	str	r3, [r2, #88]	; 0x58
 800490c:	4b1f      	ldr	r3, [pc, #124]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004918:	f7ff f906 	bl	8003b28 <HAL_PWREx_GetVoltageRange>
 800491c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800491e:	4b1b      	ldr	r3, [pc, #108]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	4a1a      	ldr	r2, [pc, #104]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004928:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004930:	d10b      	bne.n	800494a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b80      	cmp	r3, #128	; 0x80
 8004936:	d913      	bls.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2ba0      	cmp	r3, #160	; 0xa0
 800493c:	d902      	bls.n	8004944 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800493e:	2302      	movs	r3, #2
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	e00d      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004944:	2301      	movs	r3, #1
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	e00a      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b7f      	cmp	r3, #127	; 0x7f
 800494e:	d902      	bls.n	8004956 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004950:	2302      	movs	r3, #2
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	e004      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b70      	cmp	r3, #112	; 0x70
 800495a:	d101      	bne.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800495c:	2301      	movs	r3, #1
 800495e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 020f 	bic.w	r2, r3, #15
 8004968:	4909      	ldr	r1, [pc, #36]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d001      	beq.n	8004982 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40021000 	.word	0x40021000
 8004990:	40022000 	.word	0x40022000

08004994 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800499a:	4b2d      	ldr	r3, [pc, #180]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d00b      	beq.n	80049c2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d825      	bhi.n	80049fc <RCC_GetSysClockFreqFromPLLSource+0x68>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d008      	beq.n	80049c8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d11f      	bne.n	80049fc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80049bc:	4b25      	ldr	r3, [pc, #148]	; (8004a54 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049be:	613b      	str	r3, [r7, #16]
    break;
 80049c0:	e01f      	b.n	8004a02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80049c2:	4b25      	ldr	r3, [pc, #148]	; (8004a58 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80049c4:	613b      	str	r3, [r7, #16]
    break;
 80049c6:	e01c      	b.n	8004a02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049c8:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049d4:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	e005      	b.n	80049f0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049e4:	4b1a      	ldr	r3, [pc, #104]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80049f0:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f8:	613b      	str	r3, [r7, #16]
    break;
 80049fa:	e002      	b.n	8004a02 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]
    break;
 8004a00:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	fb03 f202 	mul.w	r2, r3, r2
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	0e5b      	lsrs	r3, r3, #25
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	3301      	adds	r3, #1
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004a42:	683b      	ldr	r3, [r7, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40021000 	.word	0x40021000
 8004a54:	00f42400 	.word	0x00f42400
 8004a58:	007a1200 	.word	0x007a1200
 8004a5c:	080068a0 	.word	0x080068a0

08004a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a68:	2300      	movs	r3, #0
 8004a6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d040      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d02a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d825      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a88:	2b60      	cmp	r3, #96	; 0x60
 8004a8a:	d026      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a8c:	2b60      	cmp	r3, #96	; 0x60
 8004a8e:	d821      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d006      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d81d      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d009      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d010      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004aa0:	e018      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aa2:	4b89      	ldr	r3, [pc, #548]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	4a88      	ldr	r2, [pc, #544]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aae:	e015      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fb12 	bl	80050e0 <RCCEx_PLLSAI1_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ac0:	e00c      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3320      	adds	r3, #32
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fbfd 	bl	80052c8 <RCCEx_PLLSAI2_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ad2:	e003      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	74fb      	strb	r3, [r7, #19]
      break;
 8004ad8:	e000      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10b      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ae2:	4b79      	ldr	r3, [pc, #484]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ae8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af0:	4975      	ldr	r1, [pc, #468]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004af8:	e001      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d047      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b12:	d030      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d82a      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1e:	d02a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b24:	d824      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b30:	d81e      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d010      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b3c:	e018      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b3e:	4b62      	ldr	r3, [pc, #392]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	4a61      	ldr	r2, [pc, #388]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b48:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b4a:	e015      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fac4 	bl	80050e0 <RCCEx_PLLSAI1_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b5c:	e00c      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3320      	adds	r3, #32
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fbaf 	bl	80052c8 <RCCEx_PLLSAI2_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b6e:	e003      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	74fb      	strb	r3, [r7, #19]
      break;
 8004b74:	e000      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10b      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b7e:	4b52      	ldr	r3, [pc, #328]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	494e      	ldr	r1, [pc, #312]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b94:	e001      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 809f 	beq.w	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bac:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc2:	4b41      	ldr	r3, [pc, #260]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	4a40      	ldr	r2, [pc, #256]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bce:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bde:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a3a      	ldr	r2, [pc, #232]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bea:	f7fc fe91 	bl	8001910 <HAL_GetTick>
 8004bee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bf0:	e009      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf2:	f7fc fe8d 	bl	8001910 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d902      	bls.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	74fb      	strb	r3, [r7, #19]
        break;
 8004c04:	e005      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c06:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ef      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004c12:	7cfb      	ldrb	r3, [r7, #19]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d15b      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c18:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01f      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d019      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c36:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c42:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	4a1b      	ldr	r2, [pc, #108]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c62:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d016      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fc fe4c 	bl	8001910 <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fc fe48 	bl	8001910 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d902      	bls.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	74fb      	strb	r3, [r7, #19]
            break;
 8004c92:	e006      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0ec      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ca2:	7cfb      	ldrb	r3, [r7, #19]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10c      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca8:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	4903      	ldr	r1, [pc, #12]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	74bb      	strb	r3, [r7, #18]
 8004cc6:	e005      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	7cfb      	ldrb	r3, [r7, #19]
 8004cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cd4:	7c7b      	ldrb	r3, [r7, #17]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d105      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cda:	4ba0      	ldr	r3, [pc, #640]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	4a9f      	ldr	r2, [pc, #636]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cf2:	4b9a      	ldr	r3, [pc, #616]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f023 0203 	bic.w	r2, r3, #3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	4996      	ldr	r1, [pc, #600]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d14:	4b91      	ldr	r3, [pc, #580]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f023 020c 	bic.w	r2, r3, #12
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	498e      	ldr	r1, [pc, #568]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d36:	4b89      	ldr	r3, [pc, #548]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d44:	4985      	ldr	r1, [pc, #532]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d58:	4b80      	ldr	r3, [pc, #512]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d66:	497d      	ldr	r1, [pc, #500]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d7a:	4b78      	ldr	r3, [pc, #480]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d88:	4974      	ldr	r1, [pc, #464]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d9c:	4b6f      	ldr	r3, [pc, #444]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	496c      	ldr	r1, [pc, #432]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dbe:	4b67      	ldr	r3, [pc, #412]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dcc:	4963      	ldr	r1, [pc, #396]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004de0:	4b5e      	ldr	r3, [pc, #376]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dee:	495b      	ldr	r1, [pc, #364]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e02:	4b56      	ldr	r3, [pc, #344]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e10:	4952      	ldr	r1, [pc, #328]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e24:	4b4d      	ldr	r3, [pc, #308]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	494a      	ldr	r1, [pc, #296]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e46:	4b45      	ldr	r3, [pc, #276]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	4941      	ldr	r1, [pc, #260]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e68:	4b3c      	ldr	r3, [pc, #240]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e76:	4939      	ldr	r1, [pc, #228]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d028      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e8a:	4b34      	ldr	r3, [pc, #208]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	4930      	ldr	r1, [pc, #192]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea8:	d106      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	4a2b      	ldr	r2, [pc, #172]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb4:	60d3      	str	r3, [r2, #12]
 8004eb6:	e011      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f909 	bl	80050e0 <RCCEx_PLLSAI1_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d04d      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef0:	d108      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ef8:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004efe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f02:	e012      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004f04:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f0a:	4a14      	ldr	r2, [pc, #80]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f10:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f22:	490e      	ldr	r1, [pc, #56]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f32:	d106      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3e:	60d3      	str	r3, [r2, #12]
 8004f40:	e020      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4a02      	ldr	r2, [pc, #8]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f56:	60d3      	str	r3, [r2, #12]
 8004f58:	e014      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	2101      	movs	r1, #1
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f8b5 	bl	80050e0 <RCCEx_PLLSAI1_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f7a:	7cfb      	ldrb	r3, [r7, #19]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d028      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f90:	4b4a      	ldr	r3, [pc, #296]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9e:	4947      	ldr	r1, [pc, #284]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fae:	d106      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb0:	4b42      	ldr	r3, [pc, #264]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a41      	ldr	r2, [pc, #260]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fba:	60d3      	str	r3, [r2, #12]
 8004fbc:	e011      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	2101      	movs	r1, #1
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f886 	bl	80050e0 <RCCEx_PLLSAI1_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01e      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fee:	4b33      	ldr	r3, [pc, #204]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffe:	492f      	ldr	r1, [pc, #188]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005010:	d10c      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3304      	adds	r3, #4
 8005016:	2102      	movs	r1, #2
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f861 	bl	80050e0 <RCCEx_PLLSAI1_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005038:	4b20      	ldr	r3, [pc, #128]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800503e:	f023 0204 	bic.w	r2, r3, #4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005048:	491c      	ldr	r1, [pc, #112]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800505c:	4b17      	ldr	r3, [pc, #92]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800505e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005062:	f023 0218 	bic.w	r2, r3, #24
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	4913      	ldr	r1, [pc, #76]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d017      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005080:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005086:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005090:	490a      	ldr	r1, [pc, #40]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800509e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050a2:	d105      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4a04      	ldr	r2, [pc, #16]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000

080050c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a04      	ldr	r2, [pc, #16]	; (80050dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80050ca:	f043 0304 	orr.w	r3, r3, #4
 80050ce:	6013      	str	r3, [r2, #0]
}
 80050d0:	bf00      	nop
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000

080050e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050ee:	4b72      	ldr	r3, [pc, #456]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00e      	beq.n	8005118 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050fa:	4b6f      	ldr	r3, [pc, #444]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0203 	and.w	r2, r3, #3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d103      	bne.n	8005112 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
       ||
 800510e:	2b00      	cmp	r3, #0
 8005110:	d142      	bne.n	8005198 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
 8005116:	e03f      	b.n	8005198 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b03      	cmp	r3, #3
 800511e:	d018      	beq.n	8005152 <RCCEx_PLLSAI1_Config+0x72>
 8005120:	2b03      	cmp	r3, #3
 8005122:	d825      	bhi.n	8005170 <RCCEx_PLLSAI1_Config+0x90>
 8005124:	2b01      	cmp	r3, #1
 8005126:	d002      	beq.n	800512e <RCCEx_PLLSAI1_Config+0x4e>
 8005128:	2b02      	cmp	r3, #2
 800512a:	d009      	beq.n	8005140 <RCCEx_PLLSAI1_Config+0x60>
 800512c:	e020      	b.n	8005170 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800512e:	4b62      	ldr	r3, [pc, #392]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d11d      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800513e:	e01a      	b.n	8005176 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005140:	4b5d      	ldr	r3, [pc, #372]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005148:	2b00      	cmp	r3, #0
 800514a:	d116      	bne.n	800517a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005150:	e013      	b.n	800517a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005152:	4b59      	ldr	r3, [pc, #356]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10f      	bne.n	800517e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800515e:	4b56      	ldr	r3, [pc, #344]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800516e:	e006      	b.n	800517e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
      break;
 8005174:	e004      	b.n	8005180 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800517e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d108      	bne.n	8005198 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005186:	4b4c      	ldr	r3, [pc, #304]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f023 0203 	bic.w	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4949      	ldr	r1, [pc, #292]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005194:	4313      	orrs	r3, r2
 8005196:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b00      	cmp	r3, #0
 800519c:	f040 8086 	bne.w	80052ac <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051a0:	4b45      	ldr	r3, [pc, #276]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a44      	ldr	r2, [pc, #272]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ac:	f7fc fbb0 	bl	8001910 <HAL_GetTick>
 80051b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051b2:	e009      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b4:	f7fc fbac 	bl	8001910 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d902      	bls.n	80051c8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	73fb      	strb	r3, [r7, #15]
        break;
 80051c6:	e005      	b.n	80051d4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051c8:	4b3b      	ldr	r3, [pc, #236]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ef      	bne.n	80051b4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d168      	bne.n	80052ac <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d113      	bne.n	8005208 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051e0:	4b35      	ldr	r3, [pc, #212]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	4b35      	ldr	r3, [pc, #212]	; (80052bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6892      	ldr	r2, [r2, #8]
 80051ec:	0211      	lsls	r1, r2, #8
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	68d2      	ldr	r2, [r2, #12]
 80051f2:	06d2      	lsls	r2, r2, #27
 80051f4:	4311      	orrs	r1, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6852      	ldr	r2, [r2, #4]
 80051fa:	3a01      	subs	r2, #1
 80051fc:	0112      	lsls	r2, r2, #4
 80051fe:	430a      	orrs	r2, r1
 8005200:	492d      	ldr	r1, [pc, #180]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005202:	4313      	orrs	r3, r2
 8005204:	610b      	str	r3, [r1, #16]
 8005206:	e02d      	b.n	8005264 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d115      	bne.n	800523a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6892      	ldr	r2, [r2, #8]
 800521a:	0211      	lsls	r1, r2, #8
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6912      	ldr	r2, [r2, #16]
 8005220:	0852      	lsrs	r2, r2, #1
 8005222:	3a01      	subs	r2, #1
 8005224:	0552      	lsls	r2, r2, #21
 8005226:	4311      	orrs	r1, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6852      	ldr	r2, [r2, #4]
 800522c:	3a01      	subs	r2, #1
 800522e:	0112      	lsls	r2, r2, #4
 8005230:	430a      	orrs	r2, r1
 8005232:	4921      	ldr	r1, [pc, #132]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005234:	4313      	orrs	r3, r2
 8005236:	610b      	str	r3, [r1, #16]
 8005238:	e014      	b.n	8005264 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800523a:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	4b21      	ldr	r3, [pc, #132]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005240:	4013      	ands	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6892      	ldr	r2, [r2, #8]
 8005246:	0211      	lsls	r1, r2, #8
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6952      	ldr	r2, [r2, #20]
 800524c:	0852      	lsrs	r2, r2, #1
 800524e:	3a01      	subs	r2, #1
 8005250:	0652      	lsls	r2, r2, #25
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6852      	ldr	r2, [r2, #4]
 8005258:	3a01      	subs	r2, #1
 800525a:	0112      	lsls	r2, r2, #4
 800525c:	430a      	orrs	r2, r1
 800525e:	4916      	ldr	r1, [pc, #88]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005260:	4313      	orrs	r3, r2
 8005262:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800526a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800526e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fc fb4e 	bl	8001910 <HAL_GetTick>
 8005274:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005276:	e009      	b.n	800528c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005278:	f7fc fb4a 	bl	8001910 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d902      	bls.n	800528c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	73fb      	strb	r3, [r7, #15]
          break;
 800528a:	e005      	b.n	8005298 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ef      	beq.n	8005278 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800529e:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	4904      	ldr	r1, [pc, #16]	; (80052b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000
 80052bc:	07ff800f 	.word	0x07ff800f
 80052c0:	ff9f800f 	.word	0xff9f800f
 80052c4:	f9ff800f 	.word	0xf9ff800f

080052c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052d6:	4b72      	ldr	r3, [pc, #456]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00e      	beq.n	8005300 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052e2:	4b6f      	ldr	r3, [pc, #444]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0203 	and.w	r2, r3, #3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d103      	bne.n	80052fa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
       ||
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d142      	bne.n	8005380 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
 80052fe:	e03f      	b.n	8005380 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b03      	cmp	r3, #3
 8005306:	d018      	beq.n	800533a <RCCEx_PLLSAI2_Config+0x72>
 8005308:	2b03      	cmp	r3, #3
 800530a:	d825      	bhi.n	8005358 <RCCEx_PLLSAI2_Config+0x90>
 800530c:	2b01      	cmp	r3, #1
 800530e:	d002      	beq.n	8005316 <RCCEx_PLLSAI2_Config+0x4e>
 8005310:	2b02      	cmp	r3, #2
 8005312:	d009      	beq.n	8005328 <RCCEx_PLLSAI2_Config+0x60>
 8005314:	e020      	b.n	8005358 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005316:	4b62      	ldr	r3, [pc, #392]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11d      	bne.n	800535e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005326:	e01a      	b.n	800535e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005328:	4b5d      	ldr	r3, [pc, #372]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	2b00      	cmp	r3, #0
 8005332:	d116      	bne.n	8005362 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005338:	e013      	b.n	8005362 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800533a:	4b59      	ldr	r3, [pc, #356]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10f      	bne.n	8005366 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005346:	4b56      	ldr	r3, [pc, #344]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005356:	e006      	b.n	8005366 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
      break;
 800535c:	e004      	b.n	8005368 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800535e:	bf00      	nop
 8005360:	e002      	b.n	8005368 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005366:	bf00      	nop
    }

    if(status == HAL_OK)
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d108      	bne.n	8005380 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800536e:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f023 0203 	bic.w	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4949      	ldr	r1, [pc, #292]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800537c:	4313      	orrs	r3, r2
 800537e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 8086 	bne.w	8005494 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005388:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a44      	ldr	r2, [pc, #272]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800538e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005394:	f7fc fabc 	bl	8001910 <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800539a:	e009      	b.n	80053b0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800539c:	f7fc fab8 	bl	8001910 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d902      	bls.n	80053b0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	73fb      	strb	r3, [r7, #15]
        break;
 80053ae:	e005      	b.n	80053bc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053b0:	4b3b      	ldr	r3, [pc, #236]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ef      	bne.n	800539c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d168      	bne.n	8005494 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d113      	bne.n	80053f0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053c8:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	4b35      	ldr	r3, [pc, #212]	; (80054a4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6892      	ldr	r2, [r2, #8]
 80053d4:	0211      	lsls	r1, r2, #8
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68d2      	ldr	r2, [r2, #12]
 80053da:	06d2      	lsls	r2, r2, #27
 80053dc:	4311      	orrs	r1, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6852      	ldr	r2, [r2, #4]
 80053e2:	3a01      	subs	r2, #1
 80053e4:	0112      	lsls	r2, r2, #4
 80053e6:	430a      	orrs	r2, r1
 80053e8:	492d      	ldr	r1, [pc, #180]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	614b      	str	r3, [r1, #20]
 80053ee:	e02d      	b.n	800544c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d115      	bne.n	8005422 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053f6:	4b2a      	ldr	r3, [pc, #168]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	4b2b      	ldr	r3, [pc, #172]	; (80054a8 <RCCEx_PLLSAI2_Config+0x1e0>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6892      	ldr	r2, [r2, #8]
 8005402:	0211      	lsls	r1, r2, #8
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6912      	ldr	r2, [r2, #16]
 8005408:	0852      	lsrs	r2, r2, #1
 800540a:	3a01      	subs	r2, #1
 800540c:	0552      	lsls	r2, r2, #21
 800540e:	4311      	orrs	r1, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6852      	ldr	r2, [r2, #4]
 8005414:	3a01      	subs	r2, #1
 8005416:	0112      	lsls	r2, r2, #4
 8005418:	430a      	orrs	r2, r1
 800541a:	4921      	ldr	r1, [pc, #132]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	614b      	str	r3, [r1, #20]
 8005420:	e014      	b.n	800544c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005422:	4b1f      	ldr	r3, [pc, #124]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	4b21      	ldr	r3, [pc, #132]	; (80054ac <RCCEx_PLLSAI2_Config+0x1e4>)
 8005428:	4013      	ands	r3, r2
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6892      	ldr	r2, [r2, #8]
 800542e:	0211      	lsls	r1, r2, #8
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6952      	ldr	r2, [r2, #20]
 8005434:	0852      	lsrs	r2, r2, #1
 8005436:	3a01      	subs	r2, #1
 8005438:	0652      	lsls	r2, r2, #25
 800543a:	4311      	orrs	r1, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6852      	ldr	r2, [r2, #4]
 8005440:	3a01      	subs	r2, #1
 8005442:	0112      	lsls	r2, r2, #4
 8005444:	430a      	orrs	r2, r1
 8005446:	4916      	ldr	r1, [pc, #88]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005448:	4313      	orrs	r3, r2
 800544a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800544c:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005456:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fc fa5a 	bl	8001910 <HAL_GetTick>
 800545c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800545e:	e009      	b.n	8005474 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005460:	f7fc fa56 	bl	8001910 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d902      	bls.n	8005474 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	73fb      	strb	r3, [r7, #15]
          break;
 8005472:	e005      	b.n	8005480 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005474:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0ef      	beq.n	8005460 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	4904      	ldr	r1, [pc, #16]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005490:	4313      	orrs	r3, r2
 8005492:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	07ff800f 	.word	0x07ff800f
 80054a8:	ff9f800f 	.word	0xff9f800f
 80054ac:	f9ff800f 	.word	0xf9ff800f

080054b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e095      	b.n	80055ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d108      	bne.n	80054dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d2:	d009      	beq.n	80054e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	61da      	str	r2, [r3, #28]
 80054da:	e005      	b.n	80054e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fb ff38 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005528:	d902      	bls.n	8005530 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e002      	b.n	8005536 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005534:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800553e:	d007      	beq.n	8005550 <HAL_SPI_Init+0xa0>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005548:	d002      	beq.n	8005550 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005592:	ea42 0103 	orr.w	r1, r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	0c1b      	lsrs	r3, r3, #16
 80055ac:	f003 0204 	and.w	r2, r3, #4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055cc:	ea42 0103 	orr.w	r1, r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e049      	b.n	800569c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d106      	bne.n	8005622 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7fb ff21 	bl	8001464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f000 f9cf 	bl	80059d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d001      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e04f      	b.n	800575c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a23      	ldr	r2, [pc, #140]	; (8005768 <HAL_TIM_Base_Start_IT+0xc4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01d      	beq.n	800571a <HAL_TIM_Base_Start_IT+0x76>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e6:	d018      	beq.n	800571a <HAL_TIM_Base_Start_IT+0x76>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1f      	ldr	r2, [pc, #124]	; (800576c <HAL_TIM_Base_Start_IT+0xc8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <HAL_TIM_Base_Start_IT+0x76>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1e      	ldr	r2, [pc, #120]	; (8005770 <HAL_TIM_Base_Start_IT+0xcc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_TIM_Base_Start_IT+0x76>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1c      	ldr	r2, [pc, #112]	; (8005774 <HAL_TIM_Base_Start_IT+0xd0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_TIM_Base_Start_IT+0x76>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <HAL_TIM_Base_Start_IT+0xd4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_TIM_Base_Start_IT+0x76>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a19      	ldr	r2, [pc, #100]	; (800577c <HAL_TIM_Base_Start_IT+0xd8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d115      	bne.n	8005746 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	4b17      	ldr	r3, [pc, #92]	; (8005780 <HAL_TIM_Base_Start_IT+0xdc>)
 8005722:	4013      	ands	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b06      	cmp	r3, #6
 800572a:	d015      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0xb4>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005732:	d011      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005744:	e008      	b.n	8005758 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	e000      	b.n	800575a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005758:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40013400 	.word	0x40013400
 800577c:	40014000 	.word	0x40014000
 8005780:	00010007 	.word	0x00010007

08005784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d020      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01b      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0202 	mvn.w	r2, #2
 80057b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f8e4 	bl	800599c <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8d6 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8e7 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d020      	beq.n	8005834 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01b      	beq.n	8005834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0204 	mvn.w	r2, #4
 8005804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8be 	bl	800599c <HAL_TIM_IC_CaptureCallback>
 8005820:	e005      	b.n	800582e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f8b0 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f8c1 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d020      	beq.n	8005880 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01b      	beq.n	8005880 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0208 	mvn.w	r2, #8
 8005850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2204      	movs	r2, #4
 8005856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f898 	bl	800599c <HAL_TIM_IC_CaptureCallback>
 800586c:	e005      	b.n	800587a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f88a 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f89b 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b00      	cmp	r3, #0
 8005888:	d020      	beq.n	80058cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01b      	beq.n	80058cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0210 	mvn.w	r2, #16
 800589c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2208      	movs	r2, #8
 80058a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f872 	bl	800599c <HAL_TIM_IC_CaptureCallback>
 80058b8:	e005      	b.n	80058c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f864 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f875 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00c      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d007      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0201 	mvn.w	r2, #1
 80058e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fb fb52 	bl	8000f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00c      	beq.n	8005914 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800590c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f906 	bl	8005b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00c      	beq.n	8005938 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8fe 	bl	8005b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00c      	beq.n	800595c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f834 	bl	80059c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d007      	beq.n	8005980 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0220 	mvn.w	r2, #32
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f8c6 	bl	8005b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a40      	ldr	r2, [pc, #256]	; (8005aec <TIM_Base_SetConfig+0x114>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d013      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f6:	d00f      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3d      	ldr	r2, [pc, #244]	; (8005af0 <TIM_Base_SetConfig+0x118>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00b      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a3c      	ldr	r2, [pc, #240]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d007      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a3b      	ldr	r2, [pc, #236]	; (8005af8 <TIM_Base_SetConfig+0x120>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3a      	ldr	r2, [pc, #232]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d108      	bne.n	8005a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <TIM_Base_SetConfig+0x114>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01f      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a38:	d01b      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2c      	ldr	r2, [pc, #176]	; (8005af0 <TIM_Base_SetConfig+0x118>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d017      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2b      	ldr	r2, [pc, #172]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <TIM_Base_SetConfig+0x120>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00f      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a29      	ldr	r2, [pc, #164]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <TIM_Base_SetConfig+0x128>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <TIM_Base_SetConfig+0x12c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <TIM_Base_SetConfig+0x130>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a10      	ldr	r2, [pc, #64]	; (8005aec <TIM_Base_SetConfig+0x114>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a12      	ldr	r2, [pc, #72]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a11      	ldr	r2, [pc, #68]	; (8005b00 <TIM_Base_SetConfig+0x128>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a10      	ldr	r2, [pc, #64]	; (8005b04 <TIM_Base_SetConfig+0x12c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a0f      	ldr	r2, [pc, #60]	; (8005b08 <TIM_Base_SetConfig+0x130>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d103      	bne.n	8005ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	615a      	str	r2, [r3, #20]
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40013400 	.word	0x40013400
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40014400 	.word	0x40014400
 8005b08:	40014800 	.word	0x40014800

08005b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e042      	b.n	8005be0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7fb fc9f 	bl	80014b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2224      	movs	r2, #36	; 0x24
 8005b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0201 	bic.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fb24 	bl	80061e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f825 	bl	8005be8 <UART_SetConfig>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e01b      	b.n	8005be0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fba3 	bl	8006324 <UART_CheckIdleState>
 8005bde:	4603      	mov	r3, r0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bec:	b08c      	sub	sp, #48	; 0x30
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	431a      	orrs	r2, r3
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4baa      	ldr	r3, [pc, #680]	; (8005ec0 <UART_SetConfig+0x2d8>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c20:	430b      	orrs	r3, r1
 8005c22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a9f      	ldr	r2, [pc, #636]	; (8005ec4 <UART_SetConfig+0x2dc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c50:	4313      	orrs	r3, r2
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	f023 010f 	bic.w	r1, r3, #15
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a90      	ldr	r2, [pc, #576]	; (8005ec8 <UART_SetConfig+0x2e0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d125      	bne.n	8005cd8 <UART_SetConfig+0xf0>
 8005c8c:	4b8f      	ldr	r3, [pc, #572]	; (8005ecc <UART_SetConfig+0x2e4>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d81a      	bhi.n	8005cd0 <UART_SetConfig+0xe8>
 8005c9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0xb8>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cb1 	.word	0x08005cb1
 8005ca4:	08005cc1 	.word	0x08005cc1
 8005ca8:	08005cb9 	.word	0x08005cb9
 8005cac:	08005cc9 	.word	0x08005cc9
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb6:	e116      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cbe:	e112      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cc6:	e10e      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005cc8:	2308      	movs	r3, #8
 8005cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cce:	e10a      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cd6:	e106      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a7c      	ldr	r2, [pc, #496]	; (8005ed0 <UART_SetConfig+0x2e8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d138      	bne.n	8005d54 <UART_SetConfig+0x16c>
 8005ce2:	4b7a      	ldr	r3, [pc, #488]	; (8005ecc <UART_SetConfig+0x2e4>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	f003 030c 	and.w	r3, r3, #12
 8005cec:	2b0c      	cmp	r3, #12
 8005cee:	d82d      	bhi.n	8005d4c <UART_SetConfig+0x164>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0x110>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005d4d 	.word	0x08005d4d
 8005d00:	08005d4d 	.word	0x08005d4d
 8005d04:	08005d4d 	.word	0x08005d4d
 8005d08:	08005d3d 	.word	0x08005d3d
 8005d0c:	08005d4d 	.word	0x08005d4d
 8005d10:	08005d4d 	.word	0x08005d4d
 8005d14:	08005d4d 	.word	0x08005d4d
 8005d18:	08005d35 	.word	0x08005d35
 8005d1c:	08005d4d 	.word	0x08005d4d
 8005d20:	08005d4d 	.word	0x08005d4d
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d45 	.word	0x08005d45
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d32:	e0d8      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005d34:	2302      	movs	r3, #2
 8005d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d3a:	e0d4      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d42:	e0d0      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005d44:	2308      	movs	r3, #8
 8005d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4a:	e0cc      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d52:	e0c8      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a5e      	ldr	r2, [pc, #376]	; (8005ed4 <UART_SetConfig+0x2ec>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d125      	bne.n	8005daa <UART_SetConfig+0x1c2>
 8005d5e:	4b5b      	ldr	r3, [pc, #364]	; (8005ecc <UART_SetConfig+0x2e4>)
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d68:	2b30      	cmp	r3, #48	; 0x30
 8005d6a:	d016      	beq.n	8005d9a <UART_SetConfig+0x1b2>
 8005d6c:	2b30      	cmp	r3, #48	; 0x30
 8005d6e:	d818      	bhi.n	8005da2 <UART_SetConfig+0x1ba>
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d00a      	beq.n	8005d8a <UART_SetConfig+0x1a2>
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d814      	bhi.n	8005da2 <UART_SetConfig+0x1ba>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <UART_SetConfig+0x19a>
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d008      	beq.n	8005d92 <UART_SetConfig+0x1aa>
 8005d80:	e00f      	b.n	8005da2 <UART_SetConfig+0x1ba>
 8005d82:	2300      	movs	r3, #0
 8005d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d88:	e0ad      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d90:	e0a9      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005d92:	2304      	movs	r3, #4
 8005d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d98:	e0a5      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005d9a:	2308      	movs	r3, #8
 8005d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da0:	e0a1      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005da2:	2310      	movs	r3, #16
 8005da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da8:	e09d      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a4a      	ldr	r2, [pc, #296]	; (8005ed8 <UART_SetConfig+0x2f0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d125      	bne.n	8005e00 <UART_SetConfig+0x218>
 8005db4:	4b45      	ldr	r3, [pc, #276]	; (8005ecc <UART_SetConfig+0x2e4>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8005dc0:	d016      	beq.n	8005df0 <UART_SetConfig+0x208>
 8005dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8005dc4:	d818      	bhi.n	8005df8 <UART_SetConfig+0x210>
 8005dc6:	2b80      	cmp	r3, #128	; 0x80
 8005dc8:	d00a      	beq.n	8005de0 <UART_SetConfig+0x1f8>
 8005dca:	2b80      	cmp	r3, #128	; 0x80
 8005dcc:	d814      	bhi.n	8005df8 <UART_SetConfig+0x210>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <UART_SetConfig+0x1f0>
 8005dd2:	2b40      	cmp	r3, #64	; 0x40
 8005dd4:	d008      	beq.n	8005de8 <UART_SetConfig+0x200>
 8005dd6:	e00f      	b.n	8005df8 <UART_SetConfig+0x210>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dde:	e082      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005de0:	2302      	movs	r3, #2
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de6:	e07e      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005de8:	2304      	movs	r3, #4
 8005dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dee:	e07a      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005df0:	2308      	movs	r3, #8
 8005df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df6:	e076      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dfe:	e072      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a35      	ldr	r2, [pc, #212]	; (8005edc <UART_SetConfig+0x2f4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d12a      	bne.n	8005e60 <UART_SetConfig+0x278>
 8005e0a:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <UART_SetConfig+0x2e4>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e18:	d01a      	beq.n	8005e50 <UART_SetConfig+0x268>
 8005e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e1e:	d81b      	bhi.n	8005e58 <UART_SetConfig+0x270>
 8005e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e24:	d00c      	beq.n	8005e40 <UART_SetConfig+0x258>
 8005e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2a:	d815      	bhi.n	8005e58 <UART_SetConfig+0x270>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <UART_SetConfig+0x250>
 8005e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e34:	d008      	beq.n	8005e48 <UART_SetConfig+0x260>
 8005e36:	e00f      	b.n	8005e58 <UART_SetConfig+0x270>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3e:	e052      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005e40:	2302      	movs	r3, #2
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e46:	e04e      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4e:	e04a      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005e50:	2308      	movs	r3, #8
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e56:	e046      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e5e:	e042      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a17      	ldr	r2, [pc, #92]	; (8005ec4 <UART_SetConfig+0x2dc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d13a      	bne.n	8005ee0 <UART_SetConfig+0x2f8>
 8005e6a:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <UART_SetConfig+0x2e4>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e78:	d01a      	beq.n	8005eb0 <UART_SetConfig+0x2c8>
 8005e7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e7e:	d81b      	bhi.n	8005eb8 <UART_SetConfig+0x2d0>
 8005e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e84:	d00c      	beq.n	8005ea0 <UART_SetConfig+0x2b8>
 8005e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8a:	d815      	bhi.n	8005eb8 <UART_SetConfig+0x2d0>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <UART_SetConfig+0x2b0>
 8005e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e94:	d008      	beq.n	8005ea8 <UART_SetConfig+0x2c0>
 8005e96:	e00f      	b.n	8005eb8 <UART_SetConfig+0x2d0>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9e:	e022      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea6:	e01e      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eae:	e01a      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb6:	e016      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ebe:	e012      	b.n	8005ee6 <UART_SetConfig+0x2fe>
 8005ec0:	cfff69f3 	.word	0xcfff69f3
 8005ec4:	40008000 	.word	0x40008000
 8005ec8:	40013800 	.word	0x40013800
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	40004400 	.word	0x40004400
 8005ed4:	40004800 	.word	0x40004800
 8005ed8:	40004c00 	.word	0x40004c00
 8005edc:	40005000 	.word	0x40005000
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4aae      	ldr	r2, [pc, #696]	; (80061a4 <UART_SetConfig+0x5bc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	f040 8097 	bne.w	8006020 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d823      	bhi.n	8005f42 <UART_SetConfig+0x35a>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <UART_SetConfig+0x318>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f25 	.word	0x08005f25
 8005f04:	08005f43 	.word	0x08005f43
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f43 	.word	0x08005f43
 8005f10:	08005f33 	.word	0x08005f33
 8005f14:	08005f43 	.word	0x08005f43
 8005f18:	08005f43 	.word	0x08005f43
 8005f1c:	08005f43 	.word	0x08005f43
 8005f20:	08005f3b 	.word	0x08005f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f24:	f7fe fcb0 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8005f28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f2a:	e010      	b.n	8005f4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f2c:	4b9e      	ldr	r3, [pc, #632]	; (80061a8 <UART_SetConfig+0x5c0>)
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f30:	e00d      	b.n	8005f4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f32:	f7fe fc11 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 8005f36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f38:	e009      	b.n	8005f4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f40:	e005      	b.n	8005f4e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 8130 	beq.w	80061b6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	4a94      	ldr	r2, [pc, #592]	; (80061ac <UART_SetConfig+0x5c4>)
 8005f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d305      	bcc.n	8005f86 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d903      	bls.n	8005f8e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f8c:	e113      	b.n	80061b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	2200      	movs	r2, #0
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	60fa      	str	r2, [r7, #12]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	4a84      	ldr	r2, [pc, #528]	; (80061ac <UART_SetConfig+0x5c4>)
 8005f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fb0:	f7fa f924 	bl	80001fc <__aeabi_uldivmod>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	020b      	lsls	r3, r1, #8
 8005fc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fca:	0202      	lsls	r2, r0, #8
 8005fcc:	6979      	ldr	r1, [r7, #20]
 8005fce:	6849      	ldr	r1, [r1, #4]
 8005fd0:	0849      	lsrs	r1, r1, #1
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	eb12 0804 	adds.w	r8, r2, r4
 8005fdc:	eb43 0905 	adc.w	r9, r3, r5
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	469a      	mov	sl, r3
 8005fe8:	4693      	mov	fp, r2
 8005fea:	4652      	mov	r2, sl
 8005fec:	465b      	mov	r3, fp
 8005fee:	4640      	mov	r0, r8
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	f7fa f903 	bl	80001fc <__aeabi_uldivmod>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006004:	d308      	bcc.n	8006018 <UART_SetConfig+0x430>
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600c:	d204      	bcs.n	8006018 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6a3a      	ldr	r2, [r7, #32]
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	e0ce      	b.n	80061b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800601e:	e0ca      	b.n	80061b6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006028:	d166      	bne.n	80060f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800602a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800602e:	2b08      	cmp	r3, #8
 8006030:	d827      	bhi.n	8006082 <UART_SetConfig+0x49a>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <UART_SetConfig+0x450>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	0800605d 	.word	0x0800605d
 800603c:	08006065 	.word	0x08006065
 8006040:	0800606d 	.word	0x0800606d
 8006044:	08006083 	.word	0x08006083
 8006048:	08006073 	.word	0x08006073
 800604c:	08006083 	.word	0x08006083
 8006050:	08006083 	.word	0x08006083
 8006054:	08006083 	.word	0x08006083
 8006058:	0800607b 	.word	0x0800607b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800605c:	f7fe fc14 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006060:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006062:	e014      	b.n	800608e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006064:	f7fe fc26 	bl	80048b4 <HAL_RCC_GetPCLK2Freq>
 8006068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800606a:	e010      	b.n	800608e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800606c:	4b4e      	ldr	r3, [pc, #312]	; (80061a8 <UART_SetConfig+0x5c0>)
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006070:	e00d      	b.n	800608e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006072:	f7fe fb71 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 8006076:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006078:	e009      	b.n	800608e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006080:	e005      	b.n	800608e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800608c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8090 	beq.w	80061b6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	4a44      	ldr	r2, [pc, #272]	; (80061ac <UART_SetConfig+0x5c4>)
 800609c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a0:	461a      	mov	r2, r3
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a8:	005a      	lsls	r2, r3, #1
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	441a      	add	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	d916      	bls.n	80060f0 <UART_SetConfig+0x508>
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c8:	d212      	bcs.n	80060f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f023 030f 	bic.w	r3, r3, #15
 80060d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	b29a      	uxth	r2, r3
 80060e0:	8bfb      	ldrh	r3, [r7, #30]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	8bfa      	ldrh	r2, [r7, #30]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	e062      	b.n	80061b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060f6:	e05e      	b.n	80061b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d828      	bhi.n	8006152 <UART_SetConfig+0x56a>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <UART_SetConfig+0x520>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	0800612d 	.word	0x0800612d
 800610c:	08006135 	.word	0x08006135
 8006110:	0800613d 	.word	0x0800613d
 8006114:	08006153 	.word	0x08006153
 8006118:	08006143 	.word	0x08006143
 800611c:	08006153 	.word	0x08006153
 8006120:	08006153 	.word	0x08006153
 8006124:	08006153 	.word	0x08006153
 8006128:	0800614b 	.word	0x0800614b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800612c:	f7fe fbac 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006130:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006132:	e014      	b.n	800615e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006134:	f7fe fbbe 	bl	80048b4 <HAL_RCC_GetPCLK2Freq>
 8006138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800613a:	e010      	b.n	800615e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800613c:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <UART_SetConfig+0x5c0>)
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006140:	e00d      	b.n	800615e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006142:	f7fe fb09 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 8006146:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006148:	e009      	b.n	800615e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800614a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006150:	e005      	b.n	800615e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800615c:	bf00      	nop
    }

    if (pclk != 0U)
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d028      	beq.n	80061b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	4a10      	ldr	r2, [pc, #64]	; (80061ac <UART_SetConfig+0x5c4>)
 800616a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800616e:	461a      	mov	r2, r3
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	fbb3 f2f2 	udiv	r2, r3, r2
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	441a      	add	r2, r3
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	2b0f      	cmp	r3, #15
 800618c:	d910      	bls.n	80061b0 <UART_SetConfig+0x5c8>
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006194:	d20c      	bcs.n	80061b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	b29a      	uxth	r2, r3
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60da      	str	r2, [r3, #12]
 80061a0:	e009      	b.n	80061b6 <UART_SetConfig+0x5ce>
 80061a2:	bf00      	nop
 80061a4:	40008000 	.word	0x40008000
 80061a8:	00f42400 	.word	0x00f42400
 80061ac:	080068d0 	.word	0x080068d0
      }
      else
      {
        ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2200      	movs	r2, #0
 80061ca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2200      	movs	r2, #0
 80061d0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80061d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3730      	adds	r7, #48	; 0x30
 80061da:	46bd      	mov	sp, r7
 80061dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080061e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01a      	beq.n	80062f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062de:	d10a      	bne.n	80062f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
  }
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b098      	sub	sp, #96	; 0x60
 8006328:	af02      	add	r7, sp, #8
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006334:	f7fb faec 	bl	8001910 <HAL_GetTick>
 8006338:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b08      	cmp	r3, #8
 8006346:	d12f      	bne.n	80063a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006350:	2200      	movs	r2, #0
 8006352:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f88e 	bl	8006478 <UART_WaitOnFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d022      	beq.n	80063a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006376:	653b      	str	r3, [r7, #80]	; 0x50
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006380:	647b      	str	r3, [r7, #68]	; 0x44
 8006382:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800638e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e6      	bne.n	8006362 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e063      	b.n	8006470 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d149      	bne.n	800644a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063be:	2200      	movs	r2, #0
 80063c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f857 	bl	8006478 <UART_WaitOnFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d03c      	beq.n	800644a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	623b      	str	r3, [r7, #32]
   return(result);
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ee:	633b      	str	r3, [r7, #48]	; 0x30
 80063f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e6      	bne.n	80063d0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3308      	adds	r3, #8
 8006408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	60fb      	str	r3, [r7, #12]
   return(result);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f023 0301 	bic.w	r3, r3, #1
 8006418:	64bb      	str	r3, [r7, #72]	; 0x48
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3308      	adds	r3, #8
 8006420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006422:	61fa      	str	r2, [r7, #28]
 8006424:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	69b9      	ldr	r1, [r7, #24]
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	617b      	str	r3, [r7, #20]
   return(result);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e5      	bne.n	8006402 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e012      	b.n	8006470 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3758      	adds	r7, #88	; 0x58
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	4613      	mov	r3, r2
 8006486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006488:	e049      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d045      	beq.n	800651e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006492:	f7fb fa3d 	bl	8001910 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d302      	bcc.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e048      	b.n	800653e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d031      	beq.n	800651e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d110      	bne.n	80064ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2208      	movs	r2, #8
 80064ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f838 	bl	8006546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2208      	movs	r2, #8
 80064da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e029      	b.n	800653e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f8:	d111      	bne.n	800651e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f81e 	bl	8006546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e00f      	b.n	800653e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4013      	ands	r3, r2
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	429a      	cmp	r2, r3
 800652c:	bf0c      	ite	eq
 800652e:	2301      	moveq	r3, #1
 8006530:	2300      	movne	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	429a      	cmp	r2, r3
 800653a:	d0a6      	beq.n	800648a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006546:	b480      	push	{r7}
 8006548:	b095      	sub	sp, #84	; 0x54
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656c:	643b      	str	r3, [r7, #64]	; 0x40
 800656e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006572:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e6      	bne.n	800654e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3308      	adds	r3, #8
 8006586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006596:	f023 0301 	bic.w	r3, r3, #1
 800659a:	64bb      	str	r3, [r7, #72]	; 0x48
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3308      	adds	r3, #8
 80065a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e3      	bne.n	8006580 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d118      	bne.n	80065f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f023 0310 	bic.w	r3, r3, #16
 80065d4:	647b      	str	r3, [r7, #68]	; 0x44
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065de:	61bb      	str	r3, [r7, #24]
 80065e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6979      	ldr	r1, [r7, #20]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	613b      	str	r3, [r7, #16]
   return(result);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e6      	bne.n	80065c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006606:	bf00      	nop
 8006608:	3754      	adds	r7, #84	; 0x54
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_UARTEx_DisableFifoMode+0x16>
 8006624:	2302      	movs	r3, #2
 8006626:	e027      	b.n	8006678 <HAL_UARTEx_DisableFifoMode+0x66>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2224      	movs	r2, #36	; 0x24
 8006634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006656:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006698:	2302      	movs	r3, #2
 800669a:	e02d      	b.n	80066f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2224      	movs	r2, #36	; 0x24
 80066a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f84f 	bl	800677c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006714:	2302      	movs	r3, #2
 8006716:	e02d      	b.n	8006774 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2224      	movs	r2, #36	; 0x24
 8006724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f811 	bl	800677c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006788:	2b00      	cmp	r3, #0
 800678a:	d108      	bne.n	800679e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800679c:	e031      	b.n	8006802 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800679e:	2308      	movs	r3, #8
 80067a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067a2:	2308      	movs	r3, #8
 80067a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	0e5b      	lsrs	r3, r3, #25
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	0f5b      	lsrs	r3, r3, #29
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	7b3a      	ldrb	r2, [r7, #12]
 80067ca:	4911      	ldr	r1, [pc, #68]	; (8006810 <UARTEx_SetNbDataToProcess+0x94>)
 80067cc:	5c8a      	ldrb	r2, [r1, r2]
 80067ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067d2:	7b3a      	ldrb	r2, [r7, #12]
 80067d4:	490f      	ldr	r1, [pc, #60]	; (8006814 <UARTEx_SetNbDataToProcess+0x98>)
 80067d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80067dc:	b29a      	uxth	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	7b7a      	ldrb	r2, [r7, #13]
 80067e8:	4909      	ldr	r1, [pc, #36]	; (8006810 <UARTEx_SetNbDataToProcess+0x94>)
 80067ea:	5c8a      	ldrb	r2, [r1, r2]
 80067ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067f0:	7b7a      	ldrb	r2, [r7, #13]
 80067f2:	4908      	ldr	r1, [pc, #32]	; (8006814 <UARTEx_SetNbDataToProcess+0x98>)
 80067f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	080068e8 	.word	0x080068e8
 8006814:	080068f0 	.word	0x080068f0

08006818 <memset>:
 8006818:	4402      	add	r2, r0
 800681a:	4603      	mov	r3, r0
 800681c:	4293      	cmp	r3, r2
 800681e:	d100      	bne.n	8006822 <memset+0xa>
 8006820:	4770      	bx	lr
 8006822:	f803 1b01 	strb.w	r1, [r3], #1
 8006826:	e7f9      	b.n	800681c <memset+0x4>

08006828 <__libc_init_array>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4d0d      	ldr	r5, [pc, #52]	; (8006860 <__libc_init_array+0x38>)
 800682c:	4c0d      	ldr	r4, [pc, #52]	; (8006864 <__libc_init_array+0x3c>)
 800682e:	1b64      	subs	r4, r4, r5
 8006830:	10a4      	asrs	r4, r4, #2
 8006832:	2600      	movs	r6, #0
 8006834:	42a6      	cmp	r6, r4
 8006836:	d109      	bne.n	800684c <__libc_init_array+0x24>
 8006838:	4d0b      	ldr	r5, [pc, #44]	; (8006868 <__libc_init_array+0x40>)
 800683a:	4c0c      	ldr	r4, [pc, #48]	; (800686c <__libc_init_array+0x44>)
 800683c:	f000 f818 	bl	8006870 <_init>
 8006840:	1b64      	subs	r4, r4, r5
 8006842:	10a4      	asrs	r4, r4, #2
 8006844:	2600      	movs	r6, #0
 8006846:	42a6      	cmp	r6, r4
 8006848:	d105      	bne.n	8006856 <__libc_init_array+0x2e>
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006850:	4798      	blx	r3
 8006852:	3601      	adds	r6, #1
 8006854:	e7ee      	b.n	8006834 <__libc_init_array+0xc>
 8006856:	f855 3b04 	ldr.w	r3, [r5], #4
 800685a:	4798      	blx	r3
 800685c:	3601      	adds	r6, #1
 800685e:	e7f2      	b.n	8006846 <__libc_init_array+0x1e>
 8006860:	08006900 	.word	0x08006900
 8006864:	08006900 	.word	0x08006900
 8006868:	08006900 	.word	0x08006900
 800686c:	08006904 	.word	0x08006904

08006870 <_init>:
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	bf00      	nop
 8006874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006876:	bc08      	pop	{r3}
 8006878:	469e      	mov	lr, r3
 800687a:	4770      	bx	lr

0800687c <_fini>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	bf00      	nop
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr
