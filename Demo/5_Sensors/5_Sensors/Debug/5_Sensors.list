
5_Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e68  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008028  08008028  00018028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e4  080080e4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080ec  080080ec  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080080f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  200000fc  080081f0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  080081f0  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba3f  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000336f  00000000  00000000  0003bbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001790  00000000  00000000  0003ef20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001246  00000000  00000000  000406b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e5de  00000000  00000000  000418f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c23b  00000000  00000000  0006fed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f691  00000000  00000000  0008c10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000695c  00000000  00000000  001ab7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001b20fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000fc 	.word	0x200000fc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008010 	.word	0x08008010

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000100 	.word	0x20000100
 80001fc:	08008010 	.word	0x08008010

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f001 fc99 	bl	8001ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f85b 	bl	8000660 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005aa:	f000 f8bb 	bl	8000724 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fc11 	bl	8000dd4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b2:	f000 f8e7 	bl	8000784 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005b6:	f000 f949 	bl	800084c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f97f 	bl	80008bc <MX_I2C1_Init>
  MX_I2C2_Init();
 80005be:	f000 f9bd 	bl	800093c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80005c2:	f000 f9fb 	bl	80009bc <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80005c6:	f000 fa4f 	bl	8000a68 <MX_SPI1_Init>
  MX_SPI3_Init();
 80005ca:	f000 fa8b 	bl	8000ae4 <MX_SPI3_Init>
  MX_UART4_Init();
 80005ce:	f000 fac7 	bl	8000b60 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005d2:	f000 fb11 	bl	8000bf8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 fb5b 	bl	8000c90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005da:	f000 fba7 	bl	8000d2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005de:	f000 fbf1 	bl	8000dc4 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, title, sizeof(title), 1000);
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	226a      	movs	r2, #106	; 0x6a
 80005e8:	4918      	ldr	r1, [pc, #96]	; (800064c <main+0xb0>)
 80005ea:	4819      	ldr	r0, [pc, #100]	; (8000650 <main+0xb4>)
 80005ec:	f006 f9b1 	bl	8006952 <HAL_UART_Transmit>
  BSP_GYRO_Init();
 80005f0:	f001 fb04 	bl	8001bfc <BSP_GYRO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* Read Gyro Angular data */
	  BSP_GYRO_GetXYZ(buffer);
 80005f4:	4817      	ldr	r0, [pc, #92]	; (8000654 <main+0xb8>)
 80005f6:	f001 fb43 	bl	8001c80 <BSP_GYRO_GetXYZ>
	  snprintf(str_buffer, 100, " X: %d  Y: %d  Z: %d\n\r", (int)buffer[0], (int)buffer[1], (int)buffer[2]);
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <main+0xb8>)
 80005fc:	edd3 7a00 	vldr	s15, [r3]
 8000600:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <main+0xb8>)
 8000606:	edd3 7a01 	vldr	s15, [r3, #4]
 800060a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800060e:	ee17 2a90 	vmov	r2, s15
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <main+0xb8>)
 8000614:	edd3 7a02 	vldr	s15, [r3, #8]
 8000618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800061c:	ee17 3a90 	vmov	r3, s15
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	9200      	str	r2, [sp, #0]
 8000624:	ee17 3a10 	vmov	r3, s14
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <main+0xbc>)
 800062a:	2164      	movs	r1, #100	; 0x64
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <main+0xc0>)
 800062e:	f007 f837 	bl	80076a0 <sniprintf>
	  HAL_UART_Transmit(&huart1,( uint8_t *)str_buffer, sizeof(str_buffer), 1000);
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	2264      	movs	r2, #100	; 0x64
 8000638:	4908      	ldr	r1, [pc, #32]	; (800065c <main+0xc0>)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <main+0xb4>)
 800063c:	f006 f989 	bl	8006952 <HAL_UART_Transmit>
	  HAL_Delay(1000); /* wait 1000 ms */
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f001 fcbc 	bl	8001fc0 <HAL_Delay>
	  BSP_GYRO_GetXYZ(buffer);
 8000648:	e7d4      	b.n	80005f4 <main+0x58>
 800064a:	bf00      	nop
 800064c:	20000000 	.word	0x20000000
 8000650:	2000040c 	.word	0x2000040c
 8000654:	200005c8 	.word	0x200005c8
 8000658:	08008028 	.word	0x08008028
 800065c:	200005d4 	.word	0x200005d4

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	; 0x58
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f007 f84a 	bl	8007708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000682:	2000      	movs	r0, #0
 8000684:	f004 fbce 	bl	8004e24 <HAL_PWREx_ControlVoltageScaling>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800068e:	f000 fce3 	bl	8001058 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000692:	f004 fb97 	bl	8004dc4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xc0>)
 8000698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <SystemClock_Config+0xc0>)
 800069e:	f023 0318 	bic.w	r3, r3, #24
 80006a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a6:	2314      	movs	r3, #20
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ae:	2301      	movs	r3, #1
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b6:	2360      	movs	r3, #96	; 0x60
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006be:	2301      	movs	r3, #1
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006c6:	233c      	movs	r3, #60	; 0x3c
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fc46 	bl	8004f6c <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006e6:	f000 fcb7 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f005 f84c 	bl	80057a0 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800070e:	f000 fca3 	bl	8001058 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000712:	f005 fe33 	bl	800637c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	; 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0a6      	sub	sp, #152	; 0x98
 8000728:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2294      	movs	r2, #148	; 0x94
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f006 ffe9 	bl	8007708 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000736:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800073a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800073c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000744:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000748:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800074a:	2301      	movs	r3, #1
 800074c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000752:	2318      	movs	r3, #24
 8000754:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000762:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000766:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f005 fad6 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000776:	f000 fc6f 	bl	8001058 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3798      	adds	r7, #152	; 0x98
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_ADC1_Init+0xbc>)
 800079c:	4a29      	ldr	r2, [pc, #164]	; (8000844 <MX_ADC1_Init+0xc0>)
 800079e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fa:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007fc:	f001 fda4 	bl	8002348 <HAL_ADC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000806:	f000 fc27 	bl	8001058 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC1_Init+0xc4>)
 800080c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080e:	2306      	movs	r3, #6
 8000810:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000816:	237f      	movs	r3, #127	; 0x7f
 8000818:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800081a:	2304      	movs	r3, #4
 800081c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_ADC1_Init+0xbc>)
 8000828:	f001 fed4 	bl	80025d4 <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000832:	f000 fc11 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000118 	.word	0x20000118
 8000844:	50040000 	.word	0x50040000
 8000848:	04300002 	.word	0x04300002

0800084c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000852:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <MX_DFSDM1_Init+0x6c>)
 8000854:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000858:	2201      	movs	r2, #1
 800085a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000864:	2202      	movs	r2, #2
 8000866:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000882:	2204      	movs	r2, #4
 8000884:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 800088e:	2201      	movs	r2, #1
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000894:	2200      	movs	r2, #0
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 80008a0:	f002 fba6 	bl	8002ff0 <HAL_DFSDM_ChannelInit>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008aa:	f000 fbd5 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000180 	.word	0x20000180
 80008b8:	40016040 	.word	0x40016040

080008bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_I2C1_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_I2C1_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_I2C1_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <MX_I2C1_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_I2C1_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_I2C1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <MX_I2C1_Init+0x74>)
 80008f8:	f002 ff45 	bl	8003786 <HAL_I2C_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000902:	f000 fba9 	bl	8001058 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <MX_I2C1_Init+0x74>)
 800090a:	f003 fced 	bl	80042e8 <HAL_I2CEx_ConfigAnalogFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000914:	f000 fba0 	bl	8001058 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_I2C1_Init+0x74>)
 800091c:	f003 fd2f 	bl	800437e <HAL_I2CEx_ConfigDigitalFilter>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 fb97 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200001b8 	.word	0x200001b8
 8000934:	40005400 	.word	0x40005400
 8000938:	307075b1 	.word	0x307075b1

0800093c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_I2C2_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_I2C2_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_I2C2_Init+0x74>)
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <MX_I2C2_Init+0x7c>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_I2C2_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_I2C2_Init+0x74>)
 8000954:	2201      	movs	r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_I2C2_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_I2C2_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_I2C2_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_I2C2_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_I2C2_Init+0x74>)
 8000978:	f002 ff05 	bl	8003786 <HAL_I2C_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000982:	f000 fb69 	bl	8001058 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <MX_I2C2_Init+0x74>)
 800098a:	f003 fcad 	bl	80042e8 <HAL_I2CEx_ConfigAnalogFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 fb60 	bl	8001058 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_I2C2_Init+0x74>)
 800099c:	f003 fcef 	bl	800437e <HAL_I2CEx_ConfigDigitalFilter>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 fb57 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000020c 	.word	0x2000020c
 80009b4:	40005800 	.word	0x40005800
 80009b8:	307075b1 	.word	0x307075b1

080009bc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <MX_OCTOSPI1_Init+0xa8>)
 80009d4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 80009d8:	2201      	movs	r2, #1
 80009da:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 80009e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009e8:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 80009ec:	2220      	movs	r2, #32
 80009ee:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 8000a22:	f003 fcf9 	bl	8004418 <HAL_OSPI_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000a2c:	f000 fb14 	bl	8001058 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a38:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000a3c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_OCTOSPI1_Init+0xa4>)
 8000a48:	f003 fda0 	bl	800458c <HAL_OSPIM_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000a52:	f000 fb01 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000260 	.word	0x20000260
 8000a64:	a0001000 	.word	0xa0001000

08000a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_SPI1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a82:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ac8:	f005 fe50 	bl	800676c <HAL_SPI_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 fac1 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200002b0 	.word	0x200002b0
 8000ae0:	40013000 	.word	0x40013000

08000ae4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <MX_SPI3_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000afe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b02:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b16:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b32:	2207      	movs	r2, #7
 8000b34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_SPI3_Init+0x74>)
 8000b44:	f005 fe12 	bl	800676c <HAL_SPI_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 fa83 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000314 	.word	0x20000314
 8000b5c:	40003c00 	.word	0x40003c00

08000b60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <MX_UART4_Init+0x94>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000baa:	f005 fe82 	bl	80068b2 <HAL_UART_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000bb4:	f000 fa50 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000bbc:	f006 fca6 	bl	800750c <HAL_UARTEx_SetTxFifoThreshold>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000bc6:	f000 fa47 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000bce:	f006 fcdb 	bl	8007588 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bd8:	f000 fa3e 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000bde:	f006 fc5c 	bl	800749a <HAL_UARTEx_DisableFifoMode>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000be8:	f000 fa36 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000378 	.word	0x20000378
 8000bf4:	40004c00 	.word	0x40004c00

08000bf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000bfe:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <MX_USART1_UART_Init+0x94>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c40:	4811      	ldr	r0, [pc, #68]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c42:	f005 fe36 	bl	80068b2 <HAL_UART_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c4c:	f000 fa04 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c54:	f006 fc5a 	bl	800750c <HAL_UARTEx_SetTxFifoThreshold>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c5e:	f000 f9fb 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c66:	f006 fc8f 	bl	8007588 <HAL_UARTEx_SetRxFifoThreshold>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c70:	f000 f9f2 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c76:	f006 fc10 	bl	800749a <HAL_UARTEx_DisableFifoMode>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c80:	f000 f9ea 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000040c 	.word	0x2000040c
 8000c8c:	40013800 	.word	0x40013800

08000c90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000c96:	4a24      	ldr	r2, [pc, #144]	; (8000d28 <MX_USART2_UART_Init+0x98>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000cbc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cc0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000cdc:	f005 fde9 	bl	80068b2 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000ce6:	f000 f9b7 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cea:	2100      	movs	r1, #0
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000cee:	f006 fc0d 	bl	800750c <HAL_UARTEx_SetTxFifoThreshold>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000cf8:	f000 f9ae 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000d00:	f006 fc42 	bl	8007588 <HAL_UARTEx_SetRxFifoThreshold>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000d0a:	f000 f9a5 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000d10:	f006 fbc3 	bl	800749a <HAL_UARTEx_DisableFifoMode>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000d1a:	f000 f99d 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200004a0 	.word	0x200004a0
 8000d28:	40004400 	.word	0x40004400

08000d2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d32:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <MX_USART3_UART_Init+0x94>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d76:	f005 fd9c 	bl	80068b2 <HAL_UART_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d80:	f000 f96a 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d84:	2100      	movs	r1, #0
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d88:	f006 fbc0 	bl	800750c <HAL_UARTEx_SetTxFifoThreshold>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d92:	f000 f961 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4808      	ldr	r0, [pc, #32]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d9a:	f006 fbf5 	bl	8007588 <HAL_UARTEx_SetRxFifoThreshold>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000da4:	f000 f958 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000daa:	f006 fb76 	bl	800749a <HAL_UARTEx_DisableFifoMode>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000db4:	f000 f950 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000534 	.word	0x20000534
 8000dc0:	40004800 	.word	0x40004800

08000dc4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dea:	4b96      	ldr	r3, [pc, #600]	; (8001044 <MX_GPIO_Init+0x270>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a95      	ldr	r2, [pc, #596]	; (8001044 <MX_GPIO_Init+0x270>)
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b93      	ldr	r3, [pc, #588]	; (8001044 <MX_GPIO_Init+0x270>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	61bb      	str	r3, [r7, #24]
 8000e00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b90      	ldr	r3, [pc, #576]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a8f      	ldr	r2, [pc, #572]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b8d      	ldr	r3, [pc, #564]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1a:	4b8a      	ldr	r3, [pc, #552]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a89      	ldr	r2, [pc, #548]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b87      	ldr	r3, [pc, #540]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b84      	ldr	r3, [pc, #528]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a83      	ldr	r2, [pc, #524]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b81      	ldr	r3, [pc, #516]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b7e      	ldr	r3, [pc, #504]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a7d      	ldr	r2, [pc, #500]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b7b      	ldr	r3, [pc, #492]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	4b78      	ldr	r3, [pc, #480]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a77      	ldr	r2, [pc, #476]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b75      	ldr	r3, [pc, #468]	; (8001044 <MX_GPIO_Init+0x270>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f240 1105 	movw	r1, #261	; 0x105
 8000e80:	4871      	ldr	r0, [pc, #452]	; (8001048 <MX_GPIO_Init+0x274>)
 8000e82:	f002 fc45 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e86:	2200      	movs	r2, #0
 8000e88:	f248 111c 	movw	r1, #33052	; 0x811c
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f002 fc3e 	bl	8003710 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e94:	2200      	movs	r2, #0
 8000e96:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000e9a:	486c      	ldr	r0, [pc, #432]	; (800104c <MX_GPIO_Init+0x278>)
 8000e9c:	f002 fc38 	bl	8003710 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f242 0183 	movw	r1, #8323	; 0x2083
 8000ea6:	486a      	ldr	r0, [pc, #424]	; (8001050 <MX_GPIO_Init+0x27c>)
 8000ea8:	f002 fc32 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000eb2:	4868      	ldr	r0, [pc, #416]	; (8001054 <MX_GPIO_Init+0x280>)
 8000eb4:	f002 fc2c 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000eb8:	f240 1305 	movw	r3, #261	; 0x105
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	485d      	ldr	r0, [pc, #372]	; (8001048 <MX_GPIO_Init+0x274>)
 8000ed2:	f002 f999 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000ed6:	237a      	movs	r3, #122	; 0x7a
 8000ed8:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4857      	ldr	r0, [pc, #348]	; (8001048 <MX_GPIO_Init+0x274>)
 8000eec:	f002 f98c 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ef0:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	4853      	ldr	r0, [pc, #332]	; (8001054 <MX_GPIO_Init+0x280>)
 8000f08:	f002 f97e 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000f0c:	f248 131c 	movw	r3, #33052	; 0x811c
 8000f10:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f002 f96e 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4842      	ldr	r0, [pc, #264]	; (800104c <MX_GPIO_Init+0x278>)
 8000f42:	f002 f961 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f56:	2302      	movs	r3, #2
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	483a      	ldr	r0, [pc, #232]	; (800104c <MX_GPIO_Init+0x278>)
 8000f62:	f002 f951 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f66:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000f6a:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4833      	ldr	r0, [pc, #204]	; (800104c <MX_GPIO_Init+0x278>)
 8000f80:	f002 f942 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f84:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000f88:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	482d      	ldr	r0, [pc, #180]	; (8001050 <MX_GPIO_Init+0x27c>)
 8000f9c:	f002 f934 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000fa0:	f242 0383 	movw	r3, #8323	; 0x2083
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4825      	ldr	r0, [pc, #148]	; (8001050 <MX_GPIO_Init+0x27c>)
 8000fba:	f002 f925 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fbe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481f      	ldr	r0, [pc, #124]	; (8001054 <MX_GPIO_Init+0x280>)
 8000fd8:	f002 f916 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f002 f908 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000ff8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800100a:	230a      	movs	r3, #10
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f002 f8f6 	bl	8003208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2017      	movs	r0, #23
 8001022:	f001 ffae 	bl	8002f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001026:	2017      	movs	r0, #23
 8001028:	f001 ffc7 	bl	8002fba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2028      	movs	r0, #40	; 0x28
 8001032:	f001 ffa6 	bl	8002f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001036:	2028      	movs	r0, #40	; 0x28
 8001038:	f001 ffbf 	bl	8002fba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800103c:	bf00      	nop
 800103e:	3730      	adds	r7, #48	; 0x30
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	48001000 	.word	0x48001000
 800104c:	48000400 	.word	0x48000400
 8001050:	48000c00 	.word	0x48000c00
 8001054:	48000800 	.word	0x48000800

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	e7fe      	b.n	8001060 <Error_Handler+0x8>
	...

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_MspInit+0x44>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_MspInit+0x44>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6613      	str	r3, [r2, #96]	; 0x60
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_MspInit+0x44>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x44>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x44>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6593      	str	r3, [r2, #88]	; 0x58
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x44>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a15      	ldr	r2, [pc, #84]	; (8001120 <HAL_ADC_MspInit+0x74>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d123      	bne.n	8001116 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_ADC_MspInit+0x78>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_ADC_MspInit+0x78>)
 80010d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_ADC_MspInit+0x78>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_ADC_MspInit+0x78>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_ADC_MspInit+0x78>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_ADC_MspInit+0x78>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80010fe:	233f      	movs	r3, #63	; 0x3f
 8001100:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001102:	230b      	movs	r3, #11
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_ADC_MspInit+0x7c>)
 8001112:	f002 f879 	bl	8003208 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	50040000 	.word	0x50040000
 8001124:	40021000 	.word	0x40021000
 8001128:	48000800 	.word	0x48000800

0800112c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0ae      	sub	sp, #184	; 0xb8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	2294      	movs	r2, #148	; 0x94
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f006 fadb 	bl	8007708 <memset>
  if(DFSDM1_Init == 0)
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d142      	bne.n	80011e0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800115a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fdd6 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001176:	f7ff ff6f 	bl	8001058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001184:	6613      	str	r3, [r2, #96]	; 0x60
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80011aa:	f44f 7320 	mov.w	r3, #640	; 0x280
 80011ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80011c4:	2306      	movs	r3, #6
 80011c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80011d2:	f002 f819 	bl	8003208 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	4a02      	ldr	r2, [pc, #8]	; (80011e8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011de:	6013      	str	r3, [r2, #0]
  }

}
 80011e0:	bf00      	nop
 80011e2:	37b8      	adds	r7, #184	; 0xb8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000638 	.word	0x20000638
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48001000 	.word	0x48001000

080011f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0b0      	sub	sp, #192	; 0xc0
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	2294      	movs	r2, #148	; 0x94
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f006 fa77 	bl	8007708 <memset>
  if(hi2c->Instance==I2C1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a42      	ldr	r2, [pc, #264]	; (8001328 <HAL_I2C_MspInit+0x134>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d13c      	bne.n	800129e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001224:	2340      	movs	r3, #64	; 0x40
 8001226:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001228:	2300      	movs	r3, #0
 800122a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	4618      	mov	r0, r3
 8001232:	f004 fd73 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800123c:	f7ff ff0c 	bl	8001058 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	4b3a      	ldr	r3, [pc, #232]	; (800132c <HAL_I2C_MspInit+0x138>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4a39      	ldr	r2, [pc, #228]	; (800132c <HAL_I2C_MspInit+0x138>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124c:	4b37      	ldr	r3, [pc, #220]	; (800132c <HAL_I2C_MspInit+0x138>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800125c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001260:	2312      	movs	r3, #18
 8001262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001266:	2301      	movs	r3, #1
 8001268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001272:	2304      	movs	r3, #4
 8001274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800127c:	4619      	mov	r1, r3
 800127e:	482c      	ldr	r0, [pc, #176]	; (8001330 <HAL_I2C_MspInit+0x13c>)
 8001280:	f001 ffc2 	bl	8003208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001284:	4b29      	ldr	r3, [pc, #164]	; (800132c <HAL_I2C_MspInit+0x138>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	4a28      	ldr	r2, [pc, #160]	; (800132c <HAL_I2C_MspInit+0x138>)
 800128a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128e:	6593      	str	r3, [r2, #88]	; 0x58
 8001290:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_I2C_MspInit+0x138>)
 8001292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800129c:	e040      	b.n	8001320 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a24      	ldr	r2, [pc, #144]	; (8001334 <HAL_I2C_MspInit+0x140>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d13b      	bne.n	8001320 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fd31 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80012c0:	f7ff feca 	bl	8001058 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_I2C_MspInit+0x138>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	4a18      	ldr	r2, [pc, #96]	; (800132c <HAL_I2C_MspInit+0x138>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_I2C_MspInit+0x138>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80012dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e4:	2312      	movs	r3, #18
 80012e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012f6:	2304      	movs	r3, #4
 80012f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001300:	4619      	mov	r1, r3
 8001302:	480b      	ldr	r0, [pc, #44]	; (8001330 <HAL_I2C_MspInit+0x13c>)
 8001304:	f001 ff80 	bl	8003208 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_I2C_MspInit+0x138>)
 800130a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_I2C_MspInit+0x138>)
 800130e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001312:	6593      	str	r3, [r2, #88]	; 0x58
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_I2C_MspInit+0x138>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
}
 8001320:	bf00      	nop
 8001322:	37c0      	adds	r7, #192	; 0xc0
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40005400 	.word	0x40005400
 800132c:	40021000 	.word	0x40021000
 8001330:	48000400 	.word	0x48000400
 8001334:	40005800 	.word	0x40005800

08001338 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <HAL_I2C_MspDeInit+0x68>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d110      	bne.n	800136c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_I2C_MspDeInit+0x6c>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <HAL_I2C_MspDeInit+0x6c>)
 8001350:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001354:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 8001356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135a:	4813      	ldr	r0, [pc, #76]	; (80013a8 <HAL_I2C_MspDeInit+0x70>)
 800135c:	f002 f8e6 	bl	800352c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8001360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001364:	4810      	ldr	r0, [pc, #64]	; (80013a8 <HAL_I2C_MspDeInit+0x70>)
 8001366:	f002 f8e1 	bl	800352c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800136a:	e014      	b.n	8001396 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_I2C_MspDeInit+0x74>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10f      	bne.n	8001396 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_I2C_MspDeInit+0x6c>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_I2C_MspDeInit+0x6c>)
 800137c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001380:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <HAL_I2C_MspDeInit+0x70>)
 8001388:	f002 f8d0 	bl	800352c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 800138c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_I2C_MspDeInit+0x70>)
 8001392:	f002 f8cb 	bl	800352c <HAL_GPIO_DeInit>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40005400 	.word	0x40005400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000400 	.word	0x48000400
 80013ac:	40005800 	.word	0x40005800

080013b0 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0b0      	sub	sp, #192	; 0xc0
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	f107 0318 	add.w	r3, r7, #24
 80013cc:	2294      	movs	r2, #148	; 0x94
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f006 f999 	bl	8007708 <memset>
  if(hospi->Instance==OCTOSPI1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a28      	ldr	r2, [pc, #160]	; (800147c <HAL_OSPI_MspInit+0xcc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d149      	bne.n	8001474 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80013e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4618      	mov	r0, r3
 80013f2:	f004 fc93 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80013fc:	f7ff fe2c 	bl	8001058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_OSPI_MspInit+0xd0>)
 8001402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001404:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_OSPI_MspInit+0xd0>)
 8001406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800140a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_OSPI_MspInit+0xd0>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_OSPI_MspInit+0xd0>)
 800141a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_OSPI_MspInit+0xd0>)
 800141e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001422:	6513      	str	r3, [r2, #80]	; 0x50
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_OSPI_MspInit+0xd0>)
 8001426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_OSPI_MspInit+0xd0>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	4a12      	ldr	r2, [pc, #72]	; (8001480 <HAL_OSPI_MspInit+0xd0>)
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_OSPI_MspInit+0xd0>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001448:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800144c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001462:	230a      	movs	r3, #10
 8001464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001468:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_OSPI_MspInit+0xd4>)
 8001470:	f001 feca 	bl	8003208 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	37c0      	adds	r7, #192	; 0xc0
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	a0001000 	.word	0xa0001000
 8001480:	40021000 	.word	0x40021000
 8001484:	48001000 	.word	0x48001000

08001488 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <HAL_SPI_MspInit+0xdc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d129      	bne.n	80014fe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ae:	4a2e      	ldr	r2, [pc, #184]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 80014b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b4:	6613      	str	r3, [r2, #96]	; 0x60
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80014da:	23e0      	movs	r3, #224	; 0xe0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ea:	2305      	movs	r3, #5
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f001 fe86 	bl	8003208 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014fc:	e02d      	b.n	800155a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1a      	ldr	r2, [pc, #104]	; (800156c <HAL_SPI_MspInit+0xe4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d128      	bne.n	800155a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 800150e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001512:	6593      	str	r3, [r2, #88]	; 0x58
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_SPI_MspInit+0xe0>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001538:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800154a:	2306      	movs	r3, #6
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4806      	ldr	r0, [pc, #24]	; (8001570 <HAL_SPI_MspInit+0xe8>)
 8001556:	f001 fe57 	bl	8003208 <HAL_GPIO_Init>
}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40013000 	.word	0x40013000
 8001568:	40021000 	.word	0x40021000
 800156c:	40003c00 	.word	0x40003c00
 8001570:	48000800 	.word	0x48000800

08001574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0b4      	sub	sp, #208	; 0xd0
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001590:	2294      	movs	r2, #148	; 0x94
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f006 f8b7 	bl	8007708 <memset>
  if(huart->Instance==UART4)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a83      	ldr	r2, [pc, #524]	; (80017ac <HAL_UART_MspInit+0x238>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d13c      	bne.n	800161e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015a4:	2308      	movs	r3, #8
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 fbb3 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015bc:	f7ff fd4c 	bl	8001058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015c0:	4b7b      	ldr	r3, [pc, #492]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	4a7a      	ldr	r2, [pc, #488]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80015c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015ca:	6593      	str	r3, [r2, #88]	; 0x58
 80015cc:	4b78      	ldr	r3, [pc, #480]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b75      	ldr	r3, [pc, #468]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	4a74      	ldr	r2, [pc, #464]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e4:	4b72      	ldr	r3, [pc, #456]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	623b      	str	r3, [r7, #32]
 80015ee:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001608:	2308      	movs	r3, #8
 800160a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f001 fdf6 	bl	8003208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800161c:	e0c2      	b.n	80017a4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a64      	ldr	r2, [pc, #400]	; (80017b4 <HAL_UART_MspInit+0x240>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d13b      	bne.n	80016a0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001628:	2301      	movs	r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800162c:	2300      	movs	r3, #0
 800162e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001634:	4618      	mov	r0, r3
 8001636:	f004 fb71 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001640:	f7ff fd0a 	bl	8001058 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001644:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 8001646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001648:	4a59      	ldr	r2, [pc, #356]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 800164a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164e:	6613      	str	r3, [r2, #96]	; 0x60
 8001650:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	4a53      	ldr	r2, [pc, #332]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001668:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001674:	23c0      	movs	r3, #192	; 0xc0
 8001676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800168c:	2307      	movs	r3, #7
 800168e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001696:	4619      	mov	r1, r3
 8001698:	4847      	ldr	r0, [pc, #284]	; (80017b8 <HAL_UART_MspInit+0x244>)
 800169a:	f001 fdb5 	bl	8003208 <HAL_GPIO_Init>
}
 800169e:	e081      	b.n	80017a4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a45      	ldr	r2, [pc, #276]	; (80017bc <HAL_UART_MspInit+0x248>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d13b      	bne.n	8001722 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 fb30 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_UART_MspInit+0x152>
      Error_Handler();
 80016c2:	f7ff fcc9 	bl	8001058 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c6:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	4a39      	ldr	r2, [pc, #228]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	6593      	str	r3, [r2, #88]	; 0x58
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016de:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a33      	ldr	r2, [pc, #204]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80016f6:	2378      	movs	r3, #120	; 0x78
 80016f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170e:	2307      	movs	r3, #7
 8001710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001714:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001718:	4619      	mov	r1, r3
 800171a:	4829      	ldr	r0, [pc, #164]	; (80017c0 <HAL_UART_MspInit+0x24c>)
 800171c:	f001 fd74 	bl	8003208 <HAL_GPIO_Init>
}
 8001720:	e040      	b.n	80017a4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a27      	ldr	r2, [pc, #156]	; (80017c4 <HAL_UART_MspInit+0x250>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d13b      	bne.n	80017a4 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800172c:	2304      	movs	r3, #4
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001730:	2300      	movs	r3, #0
 8001732:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001738:	4618      	mov	r0, r3
 800173a:	f004 faef 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001744:	f7ff fc88 	bl	8001058 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 800174e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_UART_MspInit+0x23c>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001778:	f44f 7340 	mov.w	r3, #768	; 0x300
 800177c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001792:	2307      	movs	r3, #7
 8001794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001798:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800179c:	4619      	mov	r1, r3
 800179e:	4808      	ldr	r0, [pc, #32]	; (80017c0 <HAL_UART_MspInit+0x24c>)
 80017a0:	f001 fd32 	bl	8003208 <HAL_GPIO_Init>
}
 80017a4:	bf00      	nop
 80017a6:	37d0      	adds	r7, #208	; 0xd0
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40004c00 	.word	0x40004c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40013800 	.word	0x40013800
 80017b8:	48000400 	.word	0x48000400
 80017bc:	40004400 	.word	0x40004400
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	40004800 	.word	0x40004800

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f000 fbb4 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001820:	2020      	movs	r0, #32
 8001822:	f001 ff8d 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001826:	2040      	movs	r0, #64	; 0x40
 8001828:	f001 ff8a 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800182c:	2080      	movs	r0, #128	; 0x80
 800182e:	f001 ff87 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001832:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001836:	f001 ff83 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}

0800183e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001842:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001846:	f001 ff7b 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800184a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800184e:	f001 ff77 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001852:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001856:	f001 ff73 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800185a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800185e:	f001 ff6f 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001862:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001866:	f001 ff6b 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800186a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800186e:	f001 ff67 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f005 ff36 	bl	8007718 <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200a0000 	.word	0x200a0000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	2000063c 	.word	0x2000063c
 80018e0:	20000808 	.word	0x20000808

080018e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001940 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800190c:	f7ff ffea 	bl	80018e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <LoopForever+0x6>)
  ldr r1, =_edata
 8001912:	490d      	ldr	r1, [pc, #52]	; (8001948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <LoopForever+0xe>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001928:	4c0a      	ldr	r4, [pc, #40]	; (8001954 <LoopForever+0x16>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001936:	f005 fef5 	bl	8007724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800193a:	f7fe fe2f 	bl	800059c <main>

0800193e <LoopForever>:

LoopForever:
    b LoopForever
 800193e:	e7fe      	b.n	800193e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001940:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800194c:	080080f4 	.word	0x080080f4
  ldr r2, =_sbss
 8001950:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001954:	20000808 	.word	0x20000808

08001958 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC1_IRQHandler>
	...

0800195c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <I2Cx_MspInit+0xa8>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001968:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <I2Cx_MspInit+0xa8>)
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001970:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <I2Cx_MspInit+0xa8>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800197c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001980:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001982:	2312      	movs	r3, #18
 8001984:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001986:	2301      	movs	r3, #1
 8001988:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800198e:	2304      	movs	r3, #4
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	481b      	ldr	r0, [pc, #108]	; (8001a08 <I2Cx_MspInit+0xac>)
 800199a:	f001 fc35 	bl	8003208 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <I2Cx_MspInit+0xac>)
 80019a6:	f001 fc2f 	bl	8003208 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <I2Cx_MspInit+0xa8>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <I2Cx_MspInit+0xa8>)
 80019b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019b4:	6593      	str	r3, [r2, #88]	; 0x58
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <I2Cx_MspInit+0xa8>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <I2Cx_MspInit+0xa8>)
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <I2Cx_MspInit+0xa8>)
 80019c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019cc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <I2Cx_MspInit+0xa8>)
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <I2Cx_MspInit+0xa8>)
 80019d4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019d8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	210f      	movs	r1, #15
 80019de:	2021      	movs	r0, #33	; 0x21
 80019e0:	f001 facf 	bl	8002f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80019e4:	2021      	movs	r0, #33	; 0x21
 80019e6:	f001 fae8 	bl	8002fba <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	210f      	movs	r1, #15
 80019ee:	2022      	movs	r0, #34	; 0x22
 80019f0:	f001 fac7 	bl	8002f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80019f4:	2022      	movs	r0, #34	; 0x22
 80019f6:	f001 fae0 	bl	8002fba <HAL_NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	; 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	48000400 	.word	0x48000400

08001a0c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <I2Cx_Init+0x54>)
 8001a18:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <I2Cx_Init+0x58>)
 8001a1e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff89 	bl	800195c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f001 fe9b 	bl	8003786 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001a50:	2100      	movs	r1, #0
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f002 fc48 	bl	80042e8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40005800 	.word	0x40005800
 8001a64:	00702681 	.word	0x00702681

08001a68 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af04      	add	r7, sp, #16
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	72fb      	strb	r3, [r7, #11]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	b299      	uxth	r1, r3
 8001a8a:	88f8      	ldrh	r0, [r7, #6]
 8001a8c:	893a      	ldrh	r2, [r7, #8]
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f002 f850 	bl	8003b44 <HAL_I2C_Mem_Read>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f832 	bl	8001b1c <I2Cx_Error>
  }
  return status;
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b08a      	sub	sp, #40	; 0x28
 8001ac6:	af04      	add	r7, sp, #16
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	4608      	mov	r0, r1
 8001acc:	4611      	mov	r1, r2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	72fb      	strb	r3, [r7, #11]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	813b      	strh	r3, [r7, #8]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	b299      	uxth	r1, r3
 8001ae4:	88f8      	ldrh	r0, [r7, #6]
 8001ae6:	893a      	ldrh	r2, [r7, #8]
 8001ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4603      	mov	r3, r0
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f001 ff0f 	bl	800391c <HAL_I2C_Mem_Write>
 8001afe:	4603      	mov	r3, r0
 8001b00:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f805 	bl	8001b1c <I2Cx_Error>
  }
  return status;
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f001 fec7 	bl	80038bc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff6c 	bl	8001a0c <I2Cx_Init>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <SENSOR_IO_Init+0x10>)
 8001b42:	f7ff ff63 	bl	8001a0c <I2Cx_Init>
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000640 	.word	0x20000640

08001b50 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	71bb      	strb	r3, [r7, #6]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001b62:	79bb      	ldrb	r3, [r7, #6]
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	79f9      	ldrb	r1, [r7, #7]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	1d7b      	adds	r3, r7, #5
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2301      	movs	r3, #1
 8001b72:	4803      	ldr	r0, [pc, #12]	; (8001b80 <SENSOR_IO_Write+0x30>)
 8001b74:	f7ff ffa5 	bl	8001ac2 <I2Cx_WriteMultiple>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000640 	.word	0x20000640

08001b84 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001b98:	79bb      	ldrb	r3, [r7, #6]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	79f9      	ldrb	r1, [r7, #7]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	f107 030f 	add.w	r3, r7, #15
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	4804      	ldr	r0, [pc, #16]	; (8001bbc <SENSOR_IO_Read+0x38>)
 8001bac:	f7ff ff5c 	bl	8001a68 <I2Cx_ReadMultiple>

  return read_value;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000640 	.word	0x20000640

08001bc0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	603a      	str	r2, [r7, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	71bb      	strb	r3, [r7, #6]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001bd6:	79bb      	ldrb	r3, [r7, #6]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	79f9      	ldrb	r1, [r7, #7]
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2301      	movs	r3, #1
 8001be6:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <SENSOR_IO_ReadMultiple+0x38>)
 8001be8:	f7ff ff3e 	bl	8001a68 <I2Cx_ReadMultiple>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b29b      	uxth	r3, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000640 	.word	0x20000640

08001bfc <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001c06:	2300      	movs	r3, #0
 8001c08:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <BSP_GYRO_Init+0x7c>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4798      	blx	r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b6a      	cmp	r3, #106	; 0x6a
 8001c14:	d002      	beq.n	8001c1c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e028      	b.n	8001c6e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <BSP_GYRO_Init+0x80>)
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <BSP_GYRO_Init+0x7c>)
 8001c20:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8001c26:	2330      	movs	r3, #48	; 0x30
 8001c28:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001c32:	2340      	movs	r3, #64	; 0x40
 8001c34:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8001c3e:	7aba      	ldrb	r2, [r7, #10]
 8001c40:	797b      	ldrb	r3, [r7, #5]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001c48:	7a3b      	ldrb	r3, [r7, #8]
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <BSP_GYRO_Init+0x80>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	89ba      	ldrh	r2, [r7, #12]
 8001c66:	4610      	mov	r0, r2
 8001c68:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000070 	.word	0x20000070
 8001c7c:	20000694 	.word	0x20000694

08001c80 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <BSP_GYRO_GetXYZ+0x2c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <BSP_GYRO_GetXYZ+0x2c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <BSP_GYRO_GetXYZ+0x2c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	4798      	blx	r3
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000694 	.word	0x20000694

08001cb0 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001cbe:	2111      	movs	r1, #17
 8001cc0:	20d4      	movs	r0, #212	; 0xd4
 8001cc2:	f7ff ff5f 	bl	8001b84 <SENSOR_IO_Read>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001cce:	7bbb      	ldrb	r3, [r7, #14]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001cd6:	7bba      	ldrb	r2, [r7, #14]
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001cde:	7bbb      	ldrb	r3, [r7, #14]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2111      	movs	r1, #17
 8001ce4:	20d4      	movs	r0, #212	; 0xd4
 8001ce6:	f7ff ff33 	bl	8001b50 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001cea:	2112      	movs	r1, #18
 8001cec:	20d4      	movs	r0, #212	; 0xd4
 8001cee:	f7ff ff49 	bl	8001b84 <SENSOR_IO_Read>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001cfe:	7bbb      	ldrb	r3, [r7, #14]
 8001d00:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001d04:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001d06:	7bba      	ldrb	r2, [r7, #14]
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	461a      	mov	r2, r3
 8001d12:	2112      	movs	r1, #18
 8001d14:	20d4      	movs	r0, #212	; 0xd4
 8001d16:	f7ff ff1b 	bl	8001b50 <SENSOR_IO_Write>
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001d2c:	2111      	movs	r1, #17
 8001d2e:	20d4      	movs	r0, #212	; 0xd4
 8001d30:	f7ff ff28 	bl	8001b84 <SENSOR_IO_Read>
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	461a      	mov	r2, r3
 8001d44:	2111      	movs	r1, #17
 8001d46:	20d4      	movs	r0, #212	; 0xd4
 8001d48:	f7ff ff02 	bl	8001b50 <SENSOR_IO_Write>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001d58:	f7ff fef0 	bl	8001b3c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001d5c:	210f      	movs	r1, #15
 8001d5e:	20d4      	movs	r0, #212	; 0xd4
 8001d60:	f7ff ff10 	bl	8001b84 <SENSOR_IO_Read>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001d78:	2116      	movs	r1, #22
 8001d7a:	20d4      	movs	r0, #212	; 0xd4
 8001d7c:	f7ff ff02 	bl	8001b84 <SENSOR_IO_Read>
 8001d80:	4603      	mov	r3, r0
 8001d82:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d8a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d98:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2116      	movs	r1, #22
 8001da0:	20d4      	movs	r0, #212	; 0xd4
 8001da2:	f7ff fed5 	bl	8001b50 <SENSOR_IO_Write>
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001dc6:	2111      	movs	r1, #17
 8001dc8:	20d4      	movs	r0, #212	; 0xd4
 8001dca:	f7ff fedb 	bl	8001b84 <SENSOR_IO_Read>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001dd2:	f107 0208 	add.w	r2, r7, #8
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	2122      	movs	r1, #34	; 0x22
 8001dda:	20d4      	movs	r0, #212	; 0xd4
 8001ddc:	f7ff fef0 	bl	8001bc0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	77fb      	strb	r3, [r7, #31]
 8001de4:	e01c      	b.n	8001e20 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001de6:	7ffb      	ldrb	r3, [r7, #31]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	3301      	adds	r3, #1
 8001dec:	3320      	adds	r3, #32
 8001dee:	443b      	add	r3, r7
 8001df0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	7ffb      	ldrb	r3, [r7, #31]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	3320      	adds	r3, #32
 8001e00:	443b      	add	r3, r7
 8001e02:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
 8001e0e:	b212      	sxth	r2, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	3320      	adds	r3, #32
 8001e14:	443b      	add	r3, r7
 8001e16:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	77fb      	strb	r3, [r7, #31]
 8001e20:	7ffb      	ldrb	r3, [r7, #31]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d9df      	bls.n	8001de6 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d829      	bhi.n	8001e84 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8001e30:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e6d 	.word	0x08001e6d
 8001e3c:	08001e85 	.word	0x08001e85
 8001e40:	08001e85 	.word	0x08001e85
 8001e44:	08001e85 	.word	0x08001e85
 8001e48:	08001e73 	.word	0x08001e73
 8001e4c:	08001e85 	.word	0x08001e85
 8001e50:	08001e85 	.word	0x08001e85
 8001e54:	08001e85 	.word	0x08001e85
 8001e58:	08001e79 	.word	0x08001e79
 8001e5c:	08001e85 	.word	0x08001e85
 8001e60:	08001e85 	.word	0x08001e85
 8001e64:	08001e85 	.word	0x08001e85
 8001e68:	08001e7f 	.word	0x08001e7f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8001e6e:	61bb      	str	r3, [r7, #24]
    break;
 8001e70:	e008      	b.n	8001e84 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001e74:	61bb      	str	r3, [r7, #24]
    break;
 8001e76:	e005      	b.n	8001e84 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001e7a:	61bb      	str	r3, [r7, #24]
    break;
 8001e7c:	e002      	b.n	8001e84 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001e80:	61bb      	str	r3, [r7, #24]
    break;    
 8001e82:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	77fb      	strb	r3, [r7, #31]
 8001e88:	e016      	b.n	8001eb8 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001e8a:	7ffb      	ldrb	r3, [r7, #31]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	3320      	adds	r3, #32
 8001e90:	443b      	add	r3, r7
 8001e92:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	77fb      	strb	r3, [r7, #31]
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d9e5      	bls.n	8001e8a <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	410c0000 	.word	0x410c0000
 8001ecc:	418c0000 	.word	0x418c0000
 8001ed0:	420c0000 	.word	0x420c0000
 8001ed4:	428c0000 	.word	0x428c0000

08001ed8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	f001 f842 	bl	8002f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f000 f80d 	bl	8001f08 <HAL_InitTick>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	e001      	b.n	8001efe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001efa:	f7ff f8b3 	bl	8001064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001efe:	79fb      	ldrb	r3, [r7, #7]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_InitTick+0x6c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d023      	beq.n	8001f64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_InitTick+0x70>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_InitTick+0x6c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f001 f84f 	bl	8002fd6 <HAL_SYSTICK_Config>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10f      	bne.n	8001f5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d809      	bhi.n	8001f58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f001 f819 	bl	8002f82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_InitTick+0x74>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e007      	b.n	8001f68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e004      	b.n	8001f68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	e001      	b.n	8001f68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200000a8 	.word	0x200000a8
 8001f78:	2000006c 	.word	0x2000006c
 8001f7c:	200000a4 	.word	0x200000a4

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	200000a8 	.word	0x200000a8
 8001fa4:	20000698 	.word	0x20000698

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000698 	.word	0x20000698

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200000a8 	.word	0x200000a8

08002008 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	609a      	str	r2, [r3, #8]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	609a      	str	r2, [r3, #8]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3360      	adds	r3, #96	; 0x60
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <LL_ADC_SetOffset+0x44>)
 8002092:	4013      	ands	r3, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	4313      	orrs	r3, r2
 80020a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020a8:	bf00      	nop
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	03fff000 	.word	0x03fff000

080020b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3360      	adds	r3, #96	; 0x60
 80020c6:	461a      	mov	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3360      	adds	r3, #96	; 0x60
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	431a      	orrs	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800210e:	bf00      	nop
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	615a      	str	r2, [r3, #20]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3330      	adds	r3, #48	; 0x30
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	211f      	movs	r1, #31
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	401a      	ands	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0e9b      	lsrs	r3, r3, #26
 8002178:	f003 011f 	and.w	r1, r3, #31
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	431a      	orrs	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800218c:	bf00      	nop
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3314      	adds	r3, #20
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	0e5b      	lsrs	r3, r3, #25
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	4413      	add	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	0d1b      	lsrs	r3, r3, #20
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	2107      	movs	r1, #7
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	401a      	ands	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	0d1b      	lsrs	r3, r3, #20
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0318 	and.w	r3, r3, #24
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002214:	40d9      	lsrs	r1, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	400b      	ands	r3, r1
 800221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221e:	431a      	orrs	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	0007ffff 	.word	0x0007ffff

08002238 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6093      	str	r3, [r2, #8]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800226c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002270:	d101      	bne.n	8002276 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002294:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002298:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <LL_ADC_IsEnabled+0x18>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <LL_ADC_IsEnabled+0x1a>
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b04      	cmp	r3, #4
 800230c:	d101      	bne.n	8002312 <LL_ADC_REG_IsConversionOngoing+0x18>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b08      	cmp	r3, #8
 8002332:	d101      	bne.n	8002338 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e129      	b.n	80025b6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7fe fe9b 	bl	80010ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff67 	bl	800225c <LL_ADC_IsDeepPowerDownEnabled>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff4d 	bl	8002238 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff82 	bl	80022ac <LL_ADC_IsInternalRegulatorEnabled>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff66 	bl	8002284 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b8:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <HAL_ADC_Init+0x278>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	4a81      	ldr	r2, [pc, #516]	; (80025c4 <HAL_ADC_Init+0x27c>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff64 	bl	80022ac <LL_ADC_IsInternalRegulatorEnabled>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	f043 0210 	orr.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	f043 0201 	orr.w	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff75 	bl	80022fa <LL_ADC_REG_IsConversionOngoing>
 8002410:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 80c2 	bne.w	80025a4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 80be 	bne.w	80025a4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002430:	f043 0202 	orr.w	r2, r3, #2
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff49 	bl	80022d4 <LL_ADC_IsEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002448:	485f      	ldr	r0, [pc, #380]	; (80025c8 <HAL_ADC_Init+0x280>)
 800244a:	f7ff ff43 	bl	80022d4 <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4619      	mov	r1, r3
 800245a:	485c      	ldr	r0, [pc, #368]	; (80025cc <HAL_ADC_Init+0x284>)
 800245c:	f7ff fdd4 	bl	8002008 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7e5b      	ldrb	r3, [r3, #25]
 8002464:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800246a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002470:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002476:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d106      	bne.n	800249c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	3b01      	subs	r3, #1
 8002494:	045b      	lsls	r3, r3, #17
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	4b44      	ldr	r3, [pc, #272]	; (80025d0 <HAL_ADC_Init+0x288>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	69b9      	ldr	r1, [r7, #24]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff25 	bl	8002320 <LL_ADC_INJ_IsConversionOngoing>
 80024d6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d140      	bne.n	8002560 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d13d      	bne.n	8002560 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7e1b      	ldrb	r3, [r3, #24]
 80024ec:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ee:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002506:	f023 0306 	bic.w	r3, r3, #6
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	69b9      	ldr	r1, [r7, #24]
 8002510:	430b      	orrs	r3, r1
 8002512:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800251a:	2b01      	cmp	r3, #1
 800251c:	d118      	bne.n	8002550 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002534:	4311      	orrs	r1, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800253a:	4311      	orrs	r1, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002540:	430a      	orrs	r2, r1
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	611a      	str	r2, [r3, #16]
 800254e:	e007      	b.n	8002560 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d10c      	bne.n	8002582 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f023 010f 	bic.w	r1, r3, #15
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	1e5a      	subs	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
 8002580:	e007      	b.n	8002592 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 020f 	bic.w	r2, r2, #15
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f023 0303 	bic.w	r3, r3, #3
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	659a      	str	r2, [r3, #88]	; 0x58
 80025a2:	e007      	b.n	80025b4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	f043 0210 	orr.w	r2, r3, #16
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000006c 	.word	0x2000006c
 80025c4:	053e2d63 	.word	0x053e2d63
 80025c8:	50040000 	.word	0x50040000
 80025cc:	50040300 	.word	0x50040300
 80025d0:	fff0c007 	.word	0xfff0c007

080025d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b0b6      	sub	sp, #216	; 0xd8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x22>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e3d5      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x7ce>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fe79 	bl	80022fa <LL_ADC_REG_IsConversionOngoing>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 83ba 	bne.w	8002d84 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d824      	bhi.n	800266a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	3b02      	subs	r3, #2
 8002626:	2b03      	cmp	r3, #3
 8002628:	d81b      	bhi.n	8002662 <HAL_ADC_ConfigChannel+0x8e>
 800262a:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <HAL_ADC_ConfigChannel+0x5c>)
 800262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002630:	08002641 	.word	0x08002641
 8002634:	08002649 	.word	0x08002649
 8002638:	08002651 	.word	0x08002651
 800263c:	08002659 	.word	0x08002659
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002640:	230c      	movs	r3, #12
 8002642:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002646:	e010      	b.n	800266a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002648:	2312      	movs	r3, #18
 800264a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800264e:	e00c      	b.n	800266a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002650:	2318      	movs	r3, #24
 8002652:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002656:	e008      	b.n	800266a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800265c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002660:	e003      	b.n	800266a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002662:	2306      	movs	r3, #6
 8002664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002668:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002678:	f7ff fd62 	bl	8002140 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fe3a 	bl	80022fa <LL_ADC_REG_IsConversionOngoing>
 8002686:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fe46 	bl	8002320 <LL_ADC_INJ_IsConversionOngoing>
 8002694:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002698:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800269c:	2b00      	cmp	r3, #0
 800269e:	f040 81bf 	bne.w	8002a20 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 81ba 	bne.w	8002a20 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026b4:	d10f      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7ff fd69 	bl	8002198 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fd23 	bl	800211a <LL_ADC_SetSamplingTimeCommonConfig>
 80026d4:	e00e      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6819      	ldr	r1, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	461a      	mov	r2, r3
 80026e4:	f7ff fd58 	bl	8002198 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fd13 	bl	800211a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	08db      	lsrs	r3, r3, #3
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d00a      	beq.n	800272c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002726:	f7ff fca3 	bl	8002070 <LL_ADC_SetOffset>
 800272a:	e179      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fcc0 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x184>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fcb5 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	0e9b      	lsrs	r3, r3, #26
 8002752:	f003 021f 	and.w	r2, r3, #31
 8002756:	e01e      	b.n	8002796 <HAL_ADC_ConfigChannel+0x1c2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fcaa 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002776:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800277a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800277e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002786:	2320      	movs	r3, #32
 8002788:	e004      	b.n	8002794 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800278a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d105      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x1da>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	0e9b      	lsrs	r3, r3, #26
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	e018      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x20c>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80027c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80027ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80027d2:	2320      	movs	r3, #32
 80027d4:	e004      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80027d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d106      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2200      	movs	r2, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fc79 	bl	80020e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2101      	movs	r1, #1
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fc5d 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 80027fe:	4603      	mov	r3, r0
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <HAL_ADC_ConfigChannel+0x24a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fc52 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	0e9b      	lsrs	r3, r3, #26
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	e01e      	b.n	800285c <HAL_ADC_ConfigChannel+0x288>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2101      	movs	r1, #1
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fc47 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800283c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002844:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800284c:	2320      	movs	r3, #32
 800284e:	e004      	b.n	800285a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002850:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x2a0>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	e018      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x2d2>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800288c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002890:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002898:	2320      	movs	r3, #32
 800289a:	e004      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800289c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d106      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2200      	movs	r2, #0
 80028b0:	2101      	movs	r1, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fc16 	bl	80020e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2102      	movs	r1, #2
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fbfa 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10a      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x310>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2102      	movs	r1, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fbef 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	0e9b      	lsrs	r3, r3, #26
 80028de:	f003 021f 	and.w	r2, r3, #31
 80028e2:	e01e      	b.n	8002922 <HAL_ADC_ConfigChannel+0x34e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2102      	movs	r1, #2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fbe4 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800290a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002912:	2320      	movs	r3, #32
 8002914:	e004      	b.n	8002920 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292a:	2b00      	cmp	r3, #0
 800292c:	d105      	bne.n	800293a <HAL_ADC_ConfigChannel+0x366>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0e9b      	lsrs	r3, r3, #26
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	e014      	b.n	8002964 <HAL_ADC_ConfigChannel+0x390>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800294a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800294e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e004      	b.n	8002964 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800295a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002964:	429a      	cmp	r2, r3
 8002966:	d106      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	2102      	movs	r1, #2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fbb7 	bl	80020e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2103      	movs	r1, #3
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fb9b 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x3ce>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2103      	movs	r1, #3
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fb90 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 8002998:	4603      	mov	r3, r0
 800299a:	0e9b      	lsrs	r3, r3, #26
 800299c:	f003 021f 	and.w	r2, r3, #31
 80029a0:	e017      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x3fe>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2103      	movs	r1, #3
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fb85 	bl	80020b8 <LL_ADC_GetOffsetChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029bc:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80029be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80029c4:	2320      	movs	r3, #32
 80029c6:	e003      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80029c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x416>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	e011      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x43a>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80029f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029fa:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80029fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002a02:	2320      	movs	r3, #32
 8002a04:	e003      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002a06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d106      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	2103      	movs	r1, #3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fb62 	bl	80020e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc55 	bl	80022d4 <LL_ADC_IsEnabled>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 813f 	bne.w	8002cb0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f7ff fbd6 	bl	80021f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a8e      	ldr	r2, [pc, #568]	; (8002c84 <HAL_ADC_ConfigChannel+0x6b0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	f040 8130 	bne.w	8002cb0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10b      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x4a4>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	bf94      	ite	ls
 8002a70:	2301      	movls	r3, #1
 8002a72:	2300      	movhi	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e019      	b.n	8002aac <HAL_ADC_ConfigChannel+0x4d8>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002a90:	2320      	movs	r3, #32
 8002a92:	e003      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	bf94      	ite	ls
 8002aa6:	2301      	movls	r3, #1
 8002aa8:	2300      	movhi	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d079      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x4f8>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	069b      	lsls	r3, r3, #26
 8002ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aca:	e015      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x524>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002adc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e003      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	069b      	lsls	r3, r3, #26
 8002af4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x544>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	e017      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x574>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b28:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e003      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	ea42 0103 	orr.w	r1, r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x59a>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	051b      	lsls	r3, r3, #20
 8002b6c:	e018      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x5cc>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002b86:	2320      	movs	r3, #32
 8002b88:	e003      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	e080      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x5ec>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	069b      	lsls	r3, r3, #26
 8002bba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bbe:	e015      	b.n	8002bec <HAL_ADC_ConfigChannel+0x618>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	e003      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	069b      	lsls	r3, r3, #26
 8002be8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x638>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0e9b      	lsrs	r3, r3, #26
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	e017      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x668>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	61bb      	str	r3, [r7, #24]
  return result;
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e003      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	ea42 0103 	orr.w	r1, r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10d      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x694>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b1e      	subs	r3, #30
 8002c60:	051b      	lsls	r3, r3, #20
 8002c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c66:	e01d      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x6d0>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	60fb      	str	r3, [r7, #12]
  return result;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002c80:	2320      	movs	r3, #32
 8002c82:	e005      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x6bc>
 8002c84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 021f 	and.w	r2, r3, #31
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3b1e      	subs	r3, #30
 8002c9e:	051b      	lsls	r3, r3, #20
 8002ca0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002caa:	4619      	mov	r1, r3
 8002cac:	f7ff fa74 	bl	8002198 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <HAL_ADC_ConfigChannel+0x7d8>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d06c      	beq.n	8002d96 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cbc:	483c      	ldr	r0, [pc, #240]	; (8002db0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cbe:	f7ff f9c9 	bl	8002054 <LL_ADC_GetCommonPathInternalCh>
 8002cc2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3a      	ldr	r2, [pc, #232]	; (8002db4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d127      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d121      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a35      	ldr	r2, [pc, #212]	; (8002db8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d157      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cee:	4619      	mov	r1, r3
 8002cf0:	482f      	ldr	r0, [pc, #188]	; (8002db0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cf2:	f7ff f99c 	bl	800202e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf6:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_ADC_ConfigChannel+0x7e8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	4a30      	ldr	r2, [pc, #192]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d10:	e002      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f9      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d1e:	e03a      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d113      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d12a      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4819      	ldr	r0, [pc, #100]	; (8002db0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d4c:	f7ff f96f 	bl	800202e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d50:	e021      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d11c      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d116      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d111      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	480c      	ldr	r0, [pc, #48]	; (8002db0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d7e:	f7ff f956 	bl	800202e <LL_ADC_SetCommonPathInternalCh>
 8002d82:	e008      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	37d8      	adds	r7, #216	; 0xd8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	80080000 	.word	0x80080000
 8002db0:	50040300 	.word	0x50040300
 8002db4:	c7520000 	.word	0xc7520000
 8002db8:	50040000 	.word	0x50040000
 8002dbc:	2000006c 	.word	0x2000006c
 8002dc0:	053e2d63 	.word	0x053e2d63
 8002dc4:	cb840000 	.word	0xcb840000
 8002dc8:	80000001 	.word	0x80000001

08002dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60d3      	str	r3, [r2, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0b      	blt.n	8002e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4907      	ldr	r1, [pc, #28]	; (8002e68 <__NVIC_EnableIRQ+0x38>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	; (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	; (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
         );
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f38:	d301      	bcc.n	8002f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00f      	b.n	8002f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <SysTick_Config+0x40>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f46:	210f      	movs	r1, #15
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	f7ff ff8e 	bl	8002e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <SysTick_Config+0x40>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <SysTick_Config+0x40>)
 8002f58:	2207      	movs	r2, #7
 8002f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000e010 	.word	0xe000e010

08002f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff29 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f94:	f7ff ff3e 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	6978      	ldr	r0, [r7, #20]
 8002fa0:	f7ff ff8e 	bl	8002ec0 <NVIC_EncodePriority>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff5d 	bl	8002e6c <__NVIC_SetPriority>
}
 8002fb2:	bf00      	nop
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff31 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ffa2 	bl	8002f28 <SysTick_Config>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0ac      	b.n	800315c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f8b2 	bl	8003170 <DFSDM_GetChannelFromInstance>
 800300c:	4603      	mov	r3, r0
 800300e:	4a55      	ldr	r2, [pc, #340]	; (8003164 <HAL_DFSDM_ChannelInit+0x174>)
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e09f      	b.n	800315c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fe f885 	bl	800112c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003022:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_DFSDM_ChannelInit+0x178>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	4a4f      	ldr	r2, [pc, #316]	; (8003168 <HAL_DFSDM_ChannelInit+0x178>)
 800302a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800302c:	4b4e      	ldr	r3, [pc, #312]	; (8003168 <HAL_DFSDM_ChannelInit+0x178>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d125      	bne.n	8003080 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_DFSDM_ChannelInit+0x17c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a4c      	ldr	r2, [pc, #304]	; (800316c <HAL_DFSDM_ChannelInit+0x17c>)
 800303a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800303e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003040:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_DFSDM_ChannelInit+0x17c>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4948      	ldr	r1, [pc, #288]	; (800316c <HAL_DFSDM_ChannelInit+0x17c>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_DFSDM_ChannelInit+0x17c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a46      	ldr	r2, [pc, #280]	; (800316c <HAL_DFSDM_ChannelInit+0x17c>)
 8003054:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003058:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	791b      	ldrb	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d108      	bne.n	8003074 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003062:	4b42      	ldr	r3, [pc, #264]	; (800316c <HAL_DFSDM_ChannelInit+0x17c>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	3b01      	subs	r3, #1
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	493f      	ldr	r1, [pc, #252]	; (800316c <HAL_DFSDM_ChannelInit+0x17c>)
 8003070:	4313      	orrs	r3, r2
 8003072:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003074:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_DFSDM_ChannelInit+0x17c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a3c      	ldr	r2, [pc, #240]	; (800316c <HAL_DFSDM_ChannelInit+0x17c>)
 800307a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800307e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800308e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800309e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80030a4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 020f 	bic.w	r2, r2, #15
 80030bc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80030e4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 0207 	and.w	r2, r2, #7
 8003110:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800313c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f810 	bl	8003170 <DFSDM_GetChannelFromInstance>
 8003150:	4602      	mov	r2, r0
 8003152:	4904      	ldr	r1, [pc, #16]	; (8003164 <HAL_DFSDM_ChannelInit+0x174>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	200006a0 	.word	0x200006a0
 8003168:	2000069c 	.word	0x2000069c
 800316c:	40016000 	.word	0x40016000

08003170 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a1c      	ldr	r2, [pc, #112]	; (80031ec <DFSDM_GetChannelFromInstance+0x7c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d102      	bne.n	8003186 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e02b      	b.n	80031de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <DFSDM_GetChannelFromInstance+0x80>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d102      	bne.n	8003194 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800318e:	2301      	movs	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e024      	b.n	80031de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <DFSDM_GetChannelFromInstance+0x84>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d102      	bne.n	80031a2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800319c:	2302      	movs	r3, #2
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	e01d      	b.n	80031de <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <DFSDM_GetChannelFromInstance+0x88>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d102      	bne.n	80031b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80031aa:	2304      	movs	r3, #4
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	e016      	b.n	80031de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <DFSDM_GetChannelFromInstance+0x8c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d102      	bne.n	80031be <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80031b8:	2305      	movs	r3, #5
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e00f      	b.n	80031de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <DFSDM_GetChannelFromInstance+0x90>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d102      	bne.n	80031cc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80031c6:	2306      	movs	r3, #6
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	e008      	b.n	80031de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <DFSDM_GetChannelFromInstance+0x94>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d102      	bne.n	80031da <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80031d4:	2307      	movs	r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e001      	b.n	80031de <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80031da:	2303      	movs	r3, #3
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80031de:	68fb      	ldr	r3, [r7, #12]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40016000 	.word	0x40016000
 80031f0:	40016020 	.word	0x40016020
 80031f4:	40016040 	.word	0x40016040
 80031f8:	40016080 	.word	0x40016080
 80031fc:	400160a0 	.word	0x400160a0
 8003200:	400160c0 	.word	0x400160c0
 8003204:	400160e0 	.word	0x400160e0

08003208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003216:	e166      	b.n	80034e6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2101      	movs	r1, #1
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8158 	beq.w	80034e0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d005      	beq.n	8003248 <HAL_GPIO_Init+0x40>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d130      	bne.n	80032aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800327e:	2201      	movs	r2, #1
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	f003 0201 	and.w	r2, r3, #1
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d017      	beq.n	80032e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	2203      	movs	r2, #3
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d123      	bne.n	800333a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	08da      	lsrs	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	220f      	movs	r2, #15
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	08da      	lsrs	r2, r3, #3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3208      	adds	r2, #8
 8003334:	6939      	ldr	r1, [r7, #16]
 8003336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0203 	and.w	r2, r3, #3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80b2 	beq.w	80034e0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337c:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_GPIO_Init+0x2fc>)
 800337e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003380:	4a60      	ldr	r2, [pc, #384]	; (8003504 <HAL_GPIO_Init+0x2fc>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6613      	str	r3, [r2, #96]	; 0x60
 8003388:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <HAL_GPIO_Init+0x2fc>)
 800338a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003394:	4a5c      	ldr	r2, [pc, #368]	; (8003508 <HAL_GPIO_Init+0x300>)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	3302      	adds	r3, #2
 800339c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	220f      	movs	r2, #15
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033be:	d02b      	beq.n	8003418 <HAL_GPIO_Init+0x210>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a52      	ldr	r2, [pc, #328]	; (800350c <HAL_GPIO_Init+0x304>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d025      	beq.n	8003414 <HAL_GPIO_Init+0x20c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a51      	ldr	r2, [pc, #324]	; (8003510 <HAL_GPIO_Init+0x308>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d01f      	beq.n	8003410 <HAL_GPIO_Init+0x208>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a50      	ldr	r2, [pc, #320]	; (8003514 <HAL_GPIO_Init+0x30c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d019      	beq.n	800340c <HAL_GPIO_Init+0x204>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a4f      	ldr	r2, [pc, #316]	; (8003518 <HAL_GPIO_Init+0x310>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <HAL_GPIO_Init+0x200>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a4e      	ldr	r2, [pc, #312]	; (800351c <HAL_GPIO_Init+0x314>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00d      	beq.n	8003404 <HAL_GPIO_Init+0x1fc>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a4d      	ldr	r2, [pc, #308]	; (8003520 <HAL_GPIO_Init+0x318>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <HAL_GPIO_Init+0x1f8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a4c      	ldr	r2, [pc, #304]	; (8003524 <HAL_GPIO_Init+0x31c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_GPIO_Init+0x1f4>
 80033f8:	2307      	movs	r3, #7
 80033fa:	e00e      	b.n	800341a <HAL_GPIO_Init+0x212>
 80033fc:	2308      	movs	r3, #8
 80033fe:	e00c      	b.n	800341a <HAL_GPIO_Init+0x212>
 8003400:	2306      	movs	r3, #6
 8003402:	e00a      	b.n	800341a <HAL_GPIO_Init+0x212>
 8003404:	2305      	movs	r3, #5
 8003406:	e008      	b.n	800341a <HAL_GPIO_Init+0x212>
 8003408:	2304      	movs	r3, #4
 800340a:	e006      	b.n	800341a <HAL_GPIO_Init+0x212>
 800340c:	2303      	movs	r3, #3
 800340e:	e004      	b.n	800341a <HAL_GPIO_Init+0x212>
 8003410:	2302      	movs	r3, #2
 8003412:	e002      	b.n	800341a <HAL_GPIO_Init+0x212>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_GPIO_Init+0x212>
 8003418:	2300      	movs	r3, #0
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	f002 0203 	and.w	r2, r2, #3
 8003420:	0092      	lsls	r2, r2, #2
 8003422:	4093      	lsls	r3, r2
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800342a:	4937      	ldr	r1, [pc, #220]	; (8003508 <HAL_GPIO_Init+0x300>)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	3302      	adds	r3, #2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_GPIO_Init+0x320>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800345c:	4a32      	ldr	r2, [pc, #200]	; (8003528 <HAL_GPIO_Init+0x320>)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003462:	4b31      	ldr	r3, [pc, #196]	; (8003528 <HAL_GPIO_Init+0x320>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003486:	4a28      	ldr	r2, [pc, #160]	; (8003528 <HAL_GPIO_Init+0x320>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800348c:	4b26      	ldr	r3, [pc, #152]	; (8003528 <HAL_GPIO_Init+0x320>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_GPIO_Init+0x320>)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034b6:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <HAL_GPIO_Init+0x320>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <HAL_GPIO_Init+0x320>)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3301      	adds	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f47f ae91 	bne.w	8003218 <HAL_GPIO_Init+0x10>
  }
}
 80034f6:	bf00      	nop
 80034f8:	bf00      	nop
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	40021000 	.word	0x40021000
 8003508:	40010000 	.word	0x40010000
 800350c:	48000400 	.word	0x48000400
 8003510:	48000800 	.word	0x48000800
 8003514:	48000c00 	.word	0x48000c00
 8003518:	48001000 	.word	0x48001000
 800351c:	48001400 	.word	0x48001400
 8003520:	48001800 	.word	0x48001800
 8003524:	48001c00 	.word	0x48001c00
 8003528:	40010400 	.word	0x40010400

0800352c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800353a:	e0c9      	b.n	80036d0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800353c:	2201      	movs	r2, #1
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80bc 	beq.w	80036ca <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003552:	4a66      	ldr	r2, [pc, #408]	; (80036ec <HAL_GPIO_DeInit+0x1c0>)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	220f      	movs	r2, #15
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800357a:	d02b      	beq.n	80035d4 <HAL_GPIO_DeInit+0xa8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a5c      	ldr	r2, [pc, #368]	; (80036f0 <HAL_GPIO_DeInit+0x1c4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d025      	beq.n	80035d0 <HAL_GPIO_DeInit+0xa4>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a5b      	ldr	r2, [pc, #364]	; (80036f4 <HAL_GPIO_DeInit+0x1c8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d01f      	beq.n	80035cc <HAL_GPIO_DeInit+0xa0>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a5a      	ldr	r2, [pc, #360]	; (80036f8 <HAL_GPIO_DeInit+0x1cc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d019      	beq.n	80035c8 <HAL_GPIO_DeInit+0x9c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a59      	ldr	r2, [pc, #356]	; (80036fc <HAL_GPIO_DeInit+0x1d0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <HAL_GPIO_DeInit+0x98>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a58      	ldr	r2, [pc, #352]	; (8003700 <HAL_GPIO_DeInit+0x1d4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00d      	beq.n	80035c0 <HAL_GPIO_DeInit+0x94>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a57      	ldr	r2, [pc, #348]	; (8003704 <HAL_GPIO_DeInit+0x1d8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <HAL_GPIO_DeInit+0x90>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a56      	ldr	r2, [pc, #344]	; (8003708 <HAL_GPIO_DeInit+0x1dc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_GPIO_DeInit+0x8c>
 80035b4:	2307      	movs	r3, #7
 80035b6:	e00e      	b.n	80035d6 <HAL_GPIO_DeInit+0xaa>
 80035b8:	2308      	movs	r3, #8
 80035ba:	e00c      	b.n	80035d6 <HAL_GPIO_DeInit+0xaa>
 80035bc:	2306      	movs	r3, #6
 80035be:	e00a      	b.n	80035d6 <HAL_GPIO_DeInit+0xaa>
 80035c0:	2305      	movs	r3, #5
 80035c2:	e008      	b.n	80035d6 <HAL_GPIO_DeInit+0xaa>
 80035c4:	2304      	movs	r3, #4
 80035c6:	e006      	b.n	80035d6 <HAL_GPIO_DeInit+0xaa>
 80035c8:	2303      	movs	r3, #3
 80035ca:	e004      	b.n	80035d6 <HAL_GPIO_DeInit+0xaa>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e002      	b.n	80035d6 <HAL_GPIO_DeInit+0xaa>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_GPIO_DeInit+0xaa>
 80035d4:	2300      	movs	r3, #0
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	f002 0203 	and.w	r2, r2, #3
 80035dc:	0092      	lsls	r2, r2, #2
 80035de:	4093      	lsls	r3, r2
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d132      	bne.n	800364c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80035e6:	4b49      	ldr	r3, [pc, #292]	; (800370c <HAL_GPIO_DeInit+0x1e0>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	4947      	ldr	r1, [pc, #284]	; (800370c <HAL_GPIO_DeInit+0x1e0>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80035f4:	4b45      	ldr	r3, [pc, #276]	; (800370c <HAL_GPIO_DeInit+0x1e0>)
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	4943      	ldr	r1, [pc, #268]	; (800370c <HAL_GPIO_DeInit+0x1e0>)
 80035fe:	4013      	ands	r3, r2
 8003600:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003602:	4b42      	ldr	r3, [pc, #264]	; (800370c <HAL_GPIO_DeInit+0x1e0>)
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	4940      	ldr	r1, [pc, #256]	; (800370c <HAL_GPIO_DeInit+0x1e0>)
 800360c:	4013      	ands	r3, r2
 800360e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003610:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_GPIO_DeInit+0x1e0>)
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	493c      	ldr	r1, [pc, #240]	; (800370c <HAL_GPIO_DeInit+0x1e0>)
 800361a:	4013      	ands	r3, r2
 800361c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800362e:	4a2f      	ldr	r2, [pc, #188]	; (80036ec <HAL_GPIO_DeInit+0x1c0>)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	3302      	adds	r3, #2
 8003636:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	43da      	mvns	r2, r3
 800363e:	482b      	ldr	r0, [pc, #172]	; (80036ec <HAL_GPIO_DeInit+0x1c0>)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	400a      	ands	r2, r1
 8003646:	3302      	adds	r3, #2
 8003648:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2103      	movs	r1, #3
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	08da      	lsrs	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3208      	adds	r2, #8
 8003668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	08d2      	lsrs	r2, r2, #3
 8003680:	4019      	ands	r1, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	2103      	movs	r1, #3
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	401a      	ands	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	2101      	movs	r1, #1
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	401a      	ands	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2103      	movs	r1, #3
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	401a      	ands	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	3301      	adds	r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f af2f 	bne.w	800353c <HAL_GPIO_DeInit+0x10>
  }
}
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	40010000 	.word	0x40010000
 80036f0:	48000400 	.word	0x48000400
 80036f4:	48000800 	.word	0x48000800
 80036f8:	48000c00 	.word	0x48000c00
 80036fc:	48001000 	.word	0x48001000
 8003700:	48001400 	.word	0x48001400
 8003704:	48001800 	.word	0x48001800
 8003708:	48001c00 	.word	0x48001c00
 800370c:	40010400 	.word	0x40010400

08003710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
 800371c:	4613      	mov	r3, r2
 800371e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800372c:	e002      	b.n	8003734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d006      	beq.n	8003764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003756:	4a05      	ldr	r2, [pc, #20]	; (800376c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f806 	bl	8003770 <HAL_GPIO_EXTI_Callback>
  }
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40010400 	.word	0x40010400

08003770 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e08d      	b.n	80038b4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fd fd21 	bl	80011f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2224      	movs	r2, #36	; 0x24
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	e006      	b.n	800380e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800380c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d108      	bne.n	8003828 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	e007      	b.n	8003838 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003836:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800385a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69d9      	ldr	r1, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1a      	ldr	r2, [r3, #32]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e021      	b.n	8003912 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2224      	movs	r2, #36	; 0x24
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fd26 	bl	8001338 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	817b      	strh	r3, [r7, #10]
 800392e:	460b      	mov	r3, r1
 8003930:	813b      	strh	r3, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b20      	cmp	r3, #32
 8003940:	f040 80f9 	bne.w	8003b36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_I2C_Mem_Write+0x34>
 800394a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003956:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0ed      	b.n	8003b38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_I2C_Mem_Write+0x4e>
 8003966:	2302      	movs	r3, #2
 8003968:	e0e6      	b.n	8003b38 <HAL_I2C_Mem_Write+0x21c>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003972:	f7fe fb19 	bl	8001fa8 <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2319      	movs	r3, #25
 800397e:	2201      	movs	r2, #1
 8003980:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fac3 	bl	8003f10 <I2C_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0d1      	b.n	8003b38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2221      	movs	r2, #33	; 0x21
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2240      	movs	r2, #64	; 0x40
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039bc:	88f8      	ldrh	r0, [r7, #6]
 80039be:	893a      	ldrh	r2, [r7, #8]
 80039c0:	8979      	ldrh	r1, [r7, #10]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	4603      	mov	r3, r0
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f9d3 	bl	8003d78 <I2C_RequestMemoryWrite>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0a9      	b.n	8003b38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2bff      	cmp	r3, #255	; 0xff
 80039ec:	d90e      	bls.n	8003a0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	22ff      	movs	r2, #255	; 0xff
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	8979      	ldrh	r1, [r7, #10]
 80039fc:	2300      	movs	r3, #0
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fc3d 	bl	8004284 <I2C_TransferConfig>
 8003a0a:	e00f      	b.n	8003a2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	8979      	ldrh	r1, [r7, #10]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fc2c 	bl	8004284 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fabc 	bl	8003fae <I2C_WaitOnTXISFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e07b      	b.n	8003b38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d034      	beq.n	8003ae4 <HAL_I2C_Mem_Write+0x1c8>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d130      	bne.n	8003ae4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2180      	movs	r1, #128	; 0x80
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fa3f 	bl	8003f10 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e04d      	b.n	8003b38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2bff      	cmp	r3, #255	; 0xff
 8003aa4:	d90e      	bls.n	8003ac4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	22ff      	movs	r2, #255	; 0xff
 8003aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	8979      	ldrh	r1, [r7, #10]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fbe1 	bl	8004284 <I2C_TransferConfig>
 8003ac2:	e00f      	b.n	8003ae4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	8979      	ldrh	r1, [r7, #10]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fbd0 	bl	8004284 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d19e      	bne.n	8003a2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 faa2 	bl	800403c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e01a      	b.n	8003b38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2220      	movs	r2, #32
 8003b08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_I2C_Mem_Write+0x224>)
 8003b16:	400b      	ands	r3, r1
 8003b18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e000      	b.n	8003b38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b36:	2302      	movs	r3, #2
  }
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	fe00e800 	.word	0xfe00e800

08003b44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	461a      	mov	r2, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	817b      	strh	r3, [r7, #10]
 8003b56:	460b      	mov	r3, r1
 8003b58:	813b      	strh	r3, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	f040 80fd 	bne.w	8003d66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_I2C_Mem_Read+0x34>
 8003b72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0f1      	b.n	8003d68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_I2C_Mem_Read+0x4e>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0ea      	b.n	8003d68 <HAL_I2C_Mem_Read+0x224>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b9a:	f7fe fa05 	bl	8001fa8 <HAL_GetTick>
 8003b9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2319      	movs	r3, #25
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f9af 	bl	8003f10 <I2C_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0d5      	b.n	8003d68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2222      	movs	r2, #34	; 0x22
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2240      	movs	r2, #64	; 0x40
 8003bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003be4:	88f8      	ldrh	r0, [r7, #6]
 8003be6:	893a      	ldrh	r2, [r7, #8]
 8003be8:	8979      	ldrh	r1, [r7, #10]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f913 	bl	8003e20 <I2C_RequestMemoryRead>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0ad      	b.n	8003d68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2bff      	cmp	r3, #255	; 0xff
 8003c14:	d90e      	bls.n	8003c34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	22ff      	movs	r2, #255	; 0xff
 8003c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	8979      	ldrh	r1, [r7, #10]
 8003c24:	4b52      	ldr	r3, [pc, #328]	; (8003d70 <HAL_I2C_Mem_Read+0x22c>)
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fb29 	bl	8004284 <I2C_TransferConfig>
 8003c32:	e00f      	b.n	8003c54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	8979      	ldrh	r1, [r7, #10]
 8003c46:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_I2C_Mem_Read+0x22c>)
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fb18 	bl	8004284 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2104      	movs	r1, #4
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f956 	bl	8003f10 <I2C_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e07c      	b.n	8003d68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d034      	beq.n	8003d14 <HAL_I2C_Mem_Read+0x1d0>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d130      	bne.n	8003d14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2180      	movs	r1, #128	; 0x80
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f927 	bl	8003f10 <I2C_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e04d      	b.n	8003d68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2bff      	cmp	r3, #255	; 0xff
 8003cd4:	d90e      	bls.n	8003cf4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	22ff      	movs	r2, #255	; 0xff
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	8979      	ldrh	r1, [r7, #10]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fac9 	bl	8004284 <I2C_TransferConfig>
 8003cf2:	e00f      	b.n	8003d14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	8979      	ldrh	r1, [r7, #10]
 8003d06:	2300      	movs	r3, #0
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fab8 	bl	8004284 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d19a      	bne.n	8003c54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f98a 	bl	800403c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e01a      	b.n	8003d68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2220      	movs	r2, #32
 8003d38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_I2C_Mem_Read+0x230>)
 8003d46:	400b      	ands	r3, r1
 8003d48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
  }
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	80002400 	.word	0x80002400
 8003d74:	fe00e800 	.word	0xfe00e800

08003d78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	4603      	mov	r3, r0
 8003d88:	817b      	strh	r3, [r7, #10]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	813b      	strh	r3, [r7, #8]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	8979      	ldrh	r1, [r7, #10]
 8003d98:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <I2C_RequestMemoryWrite+0xa4>)
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fa6f 	bl	8004284 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f8ff 	bl	8003fae <I2C_WaitOnTXISFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e02c      	b.n	8003e14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d105      	bne.n	8003dcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc0:	893b      	ldrh	r3, [r7, #8]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28
 8003dca:	e015      	b.n	8003df8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dcc:	893b      	ldrh	r3, [r7, #8]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	69b9      	ldr	r1, [r7, #24]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f8e5 	bl	8003fae <I2C_WaitOnTXISFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e012      	b.n	8003e14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dee:	893b      	ldrh	r3, [r7, #8]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f884 	bl	8003f10 <I2C_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	80002000 	.word	0x80002000

08003e20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	817b      	strh	r3, [r7, #10]
 8003e32:	460b      	mov	r3, r1
 8003e34:	813b      	strh	r3, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	8979      	ldrh	r1, [r7, #10]
 8003e40:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <I2C_RequestMemoryRead+0xa4>)
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fa1c 	bl	8004284 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	69b9      	ldr	r1, [r7, #24]
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f8ac 	bl	8003fae <I2C_WaitOnTXISFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e02c      	b.n	8003eba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e66:	893b      	ldrh	r3, [r7, #8]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e70:	e015      	b.n	8003e9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e72:	893b      	ldrh	r3, [r7, #8]
 8003e74:	0a1b      	lsrs	r3, r3, #8
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	69b9      	ldr	r1, [r7, #24]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f892 	bl	8003fae <I2C_WaitOnTXISFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e012      	b.n	8003eba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e94:	893b      	ldrh	r3, [r7, #8]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2140      	movs	r1, #64	; 0x40
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f831 	bl	8003f10 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	80002000 	.word	0x80002000

08003ec8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d103      	bne.n	8003ee6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d007      	beq.n	8003f04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	619a      	str	r2, [r3, #24]
  }
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f20:	e031      	b.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d02d      	beq.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fe f83d 	bl	8001fa8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d122      	bne.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d113      	bne.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e00f      	b.n	8003fa6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699a      	ldr	r2, [r3, #24]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	bf0c      	ite	eq
 8003f96:	2301      	moveq	r3, #1
 8003f98:	2300      	movne	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d0be      	beq.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fba:	e033      	b.n	8004024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f87f 	bl	80040c4 <I2C_IsErrorOccurred>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e031      	b.n	8004034 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d025      	beq.n	8004024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd8:	f7fd ffe6 	bl	8001fa8 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d302      	bcc.n	8003fee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d11a      	bne.n	8004024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d013      	beq.n	8004024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e007      	b.n	8004034 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d1c4      	bne.n	8003fbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004048:	e02f      	b.n	80040aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f838 	bl	80040c4 <I2C_IsErrorOccurred>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e02d      	b.n	80040ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405e:	f7fd ffa3 	bl	8001fa8 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11a      	bne.n	80040aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b20      	cmp	r3, #32
 8004080:	d013      	beq.n	80040aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e007      	b.n	80040ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d1c8      	bne.n	800404a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	; 0x28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d068      	beq.n	80041c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2210      	movs	r2, #16
 80040f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040f8:	e049      	b.n	800418e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d045      	beq.n	800418e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7fd ff51 	bl	8001fa8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	d302      	bcc.n	8004118 <I2C_IsErrorOccurred+0x54>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d13a      	bne.n	800418e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004122:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800412a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800413a:	d121      	bne.n	8004180 <I2C_IsErrorOccurred+0xbc>
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004142:	d01d      	beq.n	8004180 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	2b20      	cmp	r3, #32
 8004148:	d01a      	beq.n	8004180 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004158:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800415a:	f7fd ff25 	bl	8001fa8 <HAL_GetTick>
 800415e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004160:	e00e      	b.n	8004180 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004162:	f7fd ff21 	bl	8001fa8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b19      	cmp	r3, #25
 800416e:	d907      	bls.n	8004180 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f043 0320 	orr.w	r3, r3, #32
 8004176:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800417e:	e006      	b.n	800418e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b20      	cmp	r3, #32
 800418c:	d1e9      	bne.n	8004162 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b20      	cmp	r3, #32
 800419a:	d003      	beq.n	80041a4 <I2C_IsErrorOccurred+0xe0>
 800419c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0aa      	beq.n	80040fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d103      	bne.n	80041b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2220      	movs	r2, #32
 80041b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	f043 0308 	orr.w	r3, r3, #8
 80041fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004206:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	f043 0302 	orr.w	r3, r3, #2
 800421e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004228:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01c      	beq.n	8004272 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff fe45 	bl	8003ec8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6859      	ldr	r1, [r3, #4]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <I2C_IsErrorOccurred+0x1bc>)
 800424a:	400b      	ands	r3, r1
 800424c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	431a      	orrs	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004276:	4618      	mov	r0, r3
 8004278:	3728      	adds	r7, #40	; 0x28
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	fe00e800 	.word	0xfe00e800

08004284 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	817b      	strh	r3, [r7, #10]
 8004292:	4613      	mov	r3, r2
 8004294:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004296:	897b      	ldrh	r3, [r7, #10]
 8004298:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800429c:	7a7b      	ldrb	r3, [r7, #9]
 800429e:	041b      	lsls	r3, r3, #16
 80042a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	0d5b      	lsrs	r3, r3, #21
 80042be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <I2C_TransferConfig+0x60>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	43db      	mvns	r3, r3
 80042c8:	ea02 0103 	and.w	r1, r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	03ff63ff 	.word	0x03ff63ff

080042e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d138      	bne.n	8004370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004308:	2302      	movs	r3, #2
 800430a:	e032      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2224      	movs	r2, #36	; 0x24
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800433a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b20      	cmp	r3, #32
 8004392:	d139      	bne.n	8004408 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800439e:	2302      	movs	r3, #2
 80043a0:	e033      	b.n	800440a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2224      	movs	r2, #36	; 0x24
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af02      	add	r7, sp, #8
 800441e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004424:	f7fd fdc0 	bl	8001fa8 <HAL_GetTick>
 8004428:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d102      	bne.n	8004436 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	e092      	b.n	800455c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	2b00      	cmp	r3, #0
 8004442:	f040 808b 	bne.w	800455c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc ffb2 	bl	80013b0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800444c:	f241 3188 	movw	r1, #5000	; 0x1388
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f88b 	bl	800456c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	4b42      	ldr	r3, [pc, #264]	; (8004568 <HAL_OSPI_Init+0x150>)
 800445e:	4013      	ands	r3, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68d1      	ldr	r1, [r2, #12]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6912      	ldr	r2, [r2, #16]
 8004468:	3a01      	subs	r2, #1
 800446a:	0412      	lsls	r2, r2, #16
 800446c:	4311      	orrs	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6952      	ldr	r2, [r2, #20]
 8004472:	3a01      	subs	r2, #1
 8004474:	0212      	lsls	r2, r2, #8
 8004476:	4311      	orrs	r1, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800447c:	4311      	orrs	r1, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	69d2      	ldr	r2, [r2, #28]
 8004482:	4311      	orrs	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	430b      	orrs	r3, r1
 800448a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0412      	lsls	r2, r2, #16
 8004496:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	021a      	lsls	r2, r3, #8
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2200      	movs	r2, #0
 80044bc:	2120      	movs	r1, #32
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fb98 	bl	8004bf4 <OSPI_WaitFlagStateUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d146      	bne.n	800455c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	1e5a      	subs	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004504:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d107      	bne.n	8004544 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0202 	orr.w	r2, r2, #2
 8004542:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800454c:	d103      	bne.n	8004556 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	645a      	str	r2, [r3, #68]	; 0x44
 8004554:	e002      	b.n	800455c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	f8e0f8f4 	.word	0xf8e0f8f4

0800456c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b092      	sub	sp, #72	; 0x48
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a08      	ldr	r2, [pc, #32]	; (80045cc <HAL_OSPIM_Config+0x40>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d105      	bne.n	80045ba <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80045b8:	e004      	b.n	80045c4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80045ba:	2301      	movs	r3, #1
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80045ca:	e01f      	b.n	800460c <HAL_OSPIM_Config+0x80>
 80045cc:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80045d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045d4:	3301      	adds	r3, #1
 80045d6:	b2d8      	uxtb	r0, r3
 80045d8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80045dc:	f107 0114 	add.w	r1, r7, #20
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	4619      	mov	r1, r3
 80045ec:	f000 fb3a 	bl	8004c64 <OSPIM_GetConfig>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2208      	movs	r2, #8
 8004600:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004602:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004606:	3301      	adds	r3, #1
 8004608:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800460c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004610:	2b01      	cmp	r3, #1
 8004612:	d9dd      	bls.n	80045d0 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004614:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 82de 	bne.w	8004bda <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800461e:	4bc6      	ldr	r3, [pc, #792]	; (8004938 <HAL_OSPIM_Config+0x3ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800462a:	4bc3      	ldr	r3, [pc, #780]	; (8004938 <HAL_OSPIM_Config+0x3ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4ac2      	ldr	r2, [pc, #776]	; (8004938 <HAL_OSPIM_Config+0x3ac>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004636:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004642:	4bbe      	ldr	r3, [pc, #760]	; (800493c <HAL_OSPIM_Config+0x3b0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800464e:	4bbb      	ldr	r3, [pc, #748]	; (800493c <HAL_OSPIM_Config+0x3b0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4aba      	ldr	r2, [pc, #744]	; (800493c <HAL_OSPIM_Config+0x3b0>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800465a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800465e:	f043 0302 	orr.w	r3, r3, #2
 8004662:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004666:	49b6      	ldr	r1, [pc, #728]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 8004668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	3348      	adds	r3, #72	; 0x48
 8004674:	443b      	add	r3, r7
 8004676:	3b2c      	subs	r3, #44	; 0x2c
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3b01      	subs	r3, #1
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	6859      	ldr	r1, [r3, #4]
 8004682:	48af      	ldr	r0, [pc, #700]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 8004684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	3348      	adds	r3, #72	; 0x48
 8004690:	443b      	add	r3, r7
 8004692:	3b2c      	subs	r3, #44	; 0x2c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3b01      	subs	r3, #1
 8004698:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4403      	add	r3, r0
 80046a0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80046a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	3348      	adds	r3, #72	; 0x48
 80046ae:	443b      	add	r3, r7
 80046b0:	3b34      	subs	r3, #52	; 0x34
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80a1 	beq.w	80047fc <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80046ba:	49a1      	ldr	r1, [pc, #644]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 80046bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	3348      	adds	r3, #72	; 0x48
 80046c8:	443b      	add	r3, r7
 80046ca:	3b34      	subs	r3, #52	; 0x34
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	489a      	ldr	r0, [pc, #616]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 80046d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	3348      	adds	r3, #72	; 0x48
 80046e4:	443b      	add	r3, r7
 80046e6:	3b34      	subs	r3, #52	; 0x34
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	f021 0201 	bic.w	r2, r1, #1
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4403      	add	r3, r0
 80046f4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80046f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	3348      	adds	r3, #72	; 0x48
 8004702:	443b      	add	r3, r7
 8004704:	3b30      	subs	r3, #48	; 0x30
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01d      	beq.n	8004748 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800470c:	498c      	ldr	r1, [pc, #560]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 800470e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	3348      	adds	r3, #72	; 0x48
 800471a:	443b      	add	r3, r7
 800471c:	3b30      	subs	r3, #48	; 0x30
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3b01      	subs	r3, #1
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	4885      	ldr	r0, [pc, #532]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 800472a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	3348      	adds	r3, #72	; 0x48
 8004736:	443b      	add	r3, r7
 8004738:	3b30      	subs	r3, #48	; 0x30
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3b01      	subs	r3, #1
 800473e:	f021 0210 	bic.w	r2, r1, #16
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4403      	add	r3, r0
 8004746:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	3348      	adds	r3, #72	; 0x48
 8004754:	443b      	add	r3, r7
 8004756:	3b28      	subs	r3, #40	; 0x28
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d021      	beq.n	80047a2 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800475e:	4978      	ldr	r1, [pc, #480]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 8004760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004762:	4613      	mov	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	3348      	adds	r3, #72	; 0x48
 800476c:	443b      	add	r3, r7
 800476e:	3b28      	subs	r3, #40	; 0x28
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3b01      	subs	r3, #1
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	6859      	ldr	r1, [r3, #4]
 800477e:	4870      	ldr	r0, [pc, #448]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 8004780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	3348      	adds	r3, #72	; 0x48
 800478c:	443b      	add	r3, r7
 800478e:	3b28      	subs	r3, #40	; 0x28
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3b01      	subs	r3, #1
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4403      	add	r3, r0
 80047a0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80047a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	3348      	adds	r3, #72	; 0x48
 80047ae:	443b      	add	r3, r7
 80047b0:	3b24      	subs	r3, #36	; 0x24
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d021      	beq.n	80047fc <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80047b8:	4961      	ldr	r1, [pc, #388]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 80047ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	3348      	adds	r3, #72	; 0x48
 80047c6:	443b      	add	r3, r7
 80047c8:	3b24      	subs	r3, #36	; 0x24
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	4859      	ldr	r0, [pc, #356]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 80047da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	3348      	adds	r3, #72	; 0x48
 80047e6:	443b      	add	r3, r7
 80047e8:	3b24      	subs	r3, #36	; 0x24
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4403      	add	r3, r0
 80047fa:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	3348      	adds	r3, #72	; 0x48
 800480e:	443b      	add	r3, r7
 8004810:	3b34      	subs	r3, #52	; 0x34
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4299      	cmp	r1, r3
 8004816:	d038      	beq.n	800488a <HAL_OSPIM_Config+0x2fe>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	3348      	adds	r3, #72	; 0x48
 800482a:	443b      	add	r3, r7
 800482c:	3b30      	subs	r3, #48	; 0x30
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4299      	cmp	r1, r3
 8004832:	d02a      	beq.n	800488a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	6899      	ldr	r1, [r3, #8]
 8004838:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	3348      	adds	r3, #72	; 0x48
 8004846:	443b      	add	r3, r7
 8004848:	3b2c      	subs	r3, #44	; 0x2c
 800484a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800484c:	4299      	cmp	r1, r3
 800484e:	d01c      	beq.n	800488a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	68d9      	ldr	r1, [r3, #12]
 8004854:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	3348      	adds	r3, #72	; 0x48
 8004862:	443b      	add	r3, r7
 8004864:	3b28      	subs	r3, #40	; 0x28
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4299      	cmp	r1, r3
 800486a:	d00e      	beq.n	800488a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6919      	ldr	r1, [r3, #16]
 8004870:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	3348      	adds	r3, #72	; 0x48
 800487e:	443b      	add	r3, r7
 8004880:	3b24      	subs	r3, #36	; 0x24
 8004882:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004884:	4299      	cmp	r1, r3
 8004886:	f040 80d3 	bne.w	8004a30 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800488a:	492d      	ldr	r1, [pc, #180]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 800488c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	3348      	adds	r3, #72	; 0x48
 800489a:	443b      	add	r3, r7
 800489c:	3b34      	subs	r3, #52	; 0x34
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	4825      	ldr	r0, [pc, #148]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 80048aa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	3348      	adds	r3, #72	; 0x48
 80048b8:	443b      	add	r3, r7
 80048ba:	3b34      	subs	r3, #52	; 0x34
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3b01      	subs	r3, #1
 80048c0:	f021 0201 	bic.w	r2, r1, #1
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4403      	add	r3, r0
 80048c8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80048ca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	3348      	adds	r3, #72	; 0x48
 80048d8:	443b      	add	r3, r7
 80048da:	3b30      	subs	r3, #48	; 0x30
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01f      	beq.n	8004922 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80048e2:	4917      	ldr	r1, [pc, #92]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 80048e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	3348      	adds	r3, #72	; 0x48
 80048f2:	443b      	add	r3, r7
 80048f4:	3b30      	subs	r3, #48	; 0x30
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	480f      	ldr	r0, [pc, #60]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 8004902:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	3348      	adds	r3, #72	; 0x48
 8004910:	443b      	add	r3, r7
 8004912:	3b30      	subs	r3, #48	; 0x30
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3b01      	subs	r3, #1
 8004918:	f021 0210 	bic.w	r2, r1, #16
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4403      	add	r3, r0
 8004920:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004922:	4907      	ldr	r1, [pc, #28]	; (8004940 <HAL_OSPIM_Config+0x3b4>)
 8004924:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	3348      	adds	r3, #72	; 0x48
 8004932:	443b      	add	r3, r7
 8004934:	3b2c      	subs	r3, #44	; 0x2c
 8004936:	e005      	b.n	8004944 <HAL_OSPIM_Config+0x3b8>
 8004938:	a0001000 	.word	0xa0001000
 800493c:	a0001400 	.word	0xa0001400
 8004940:	50061c00 	.word	0x50061c00
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3b01      	subs	r3, #1
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	48a6      	ldr	r0, [pc, #664]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004950:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3348      	adds	r3, #72	; 0x48
 800495e:	443b      	add	r3, r7
 8004960:	3b2c      	subs	r3, #44	; 0x2c
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3b01      	subs	r3, #1
 8004966:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4403      	add	r3, r0
 800496e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004970:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	3348      	adds	r3, #72	; 0x48
 800497e:	443b      	add	r3, r7
 8004980:	3b28      	subs	r3, #40	; 0x28
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d023      	beq.n	80049d0 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004988:	4997      	ldr	r1, [pc, #604]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 800498a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	3348      	adds	r3, #72	; 0x48
 8004998:	443b      	add	r3, r7
 800499a:	3b28      	subs	r3, #40	; 0x28
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	488f      	ldr	r0, [pc, #572]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 80049ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	3348      	adds	r3, #72	; 0x48
 80049ba:	443b      	add	r3, r7
 80049bc:	3b28      	subs	r3, #40	; 0x28
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4403      	add	r3, r0
 80049ce:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80049d0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	3348      	adds	r3, #72	; 0x48
 80049de:	443b      	add	r3, r7
 80049e0:	3b24      	subs	r3, #36	; 0x24
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d023      	beq.n	8004a30 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80049e8:	497f      	ldr	r1, [pc, #508]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 80049ea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	3348      	adds	r3, #72	; 0x48
 80049f8:	443b      	add	r3, r7
 80049fa:	3b24      	subs	r3, #36	; 0x24
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	6859      	ldr	r1, [r3, #4]
 8004a0a:	4877      	ldr	r0, [pc, #476]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004a0c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	3348      	adds	r3, #72	; 0x48
 8004a1a:	443b      	add	r3, r7
 8004a1c:	3b24      	subs	r3, #36	; 0x24
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4403      	add	r3, r0
 8004a2e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004a30:	4a6d      	ldr	r2, [pc, #436]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a44:	025b      	lsls	r3, r3, #9
 8004a46:	431a      	orrs	r2, r3
 8004a48:	4967      	ldr	r1, [pc, #412]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004a5a:	4a63      	ldr	r2, [pc, #396]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f023 0203 	bic.w	r2, r3, #3
 8004a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	431a      	orrs	r2, r3
 8004a72:	495d      	ldr	r1, [pc, #372]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d014      	beq.n	8004ab6 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004a8c:	4a56      	ldr	r2, [pc, #344]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa0:	015b      	lsls	r3, r3, #5
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	4950      	ldr	r1, [pc, #320]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	f042 0210 	orr.w	r2, r2, #16
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d019      	beq.n	8004af6 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ac2:	4a49      	ldr	r2, [pc, #292]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ada:	049b      	lsls	r3, r3, #18
 8004adc:	431a      	orrs	r2, r3
 8004ade:	4942      	ldr	r1, [pc, #264]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	605a      	str	r2, [r3, #4]
 8004af4:	e01c      	b.n	8004b30 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d018      	beq.n	8004b30 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004afe:	4a3a      	ldr	r2, [pc, #232]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b16:	069b      	lsls	r3, r3, #26
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	4933      	ldr	r1, [pc, #204]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d019      	beq.n	8004b70 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004b3c:	4a2a      	ldr	r2, [pc, #168]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b54:	049b      	lsls	r3, r3, #18
 8004b56:	431a      	orrs	r2, r3
 8004b58:	4923      	ldr	r1, [pc, #140]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	e01c      	b.n	8004baa <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d018      	beq.n	8004baa <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004b78:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b90:	069b      	lsls	r3, r3, #26
 8004b92:	431a      	orrs	r2, r3
 8004b94:	4914      	ldr	r1, [pc, #80]	; (8004be8 <HAL_OSPIM_Config+0x65c>)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004baa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <HAL_OSPIM_Config+0x660>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a0c      	ldr	r2, [pc, #48]	; (8004bec <HAL_OSPIM_Config+0x660>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004bc2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <HAL_OSPIM_Config+0x664>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a07      	ldr	r2, [pc, #28]	; (8004bf0 <HAL_OSPIM_Config+0x664>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004bda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3748      	adds	r7, #72	; 0x48
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	50061c00 	.word	0x50061c00
 8004bec:	a0001000 	.word	0xa0001000
 8004bf0:	a0001400 	.word	0xa0001400

08004bf4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004c04:	e01a      	b.n	8004c3c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d016      	beq.n	8004c3c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fd f9cb 	bl	8001fa8 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c30:	f043 0201 	orr.w	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e00e      	b.n	8004c5a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6a1a      	ldr	r2, [r3, #32]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bf14      	ite	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	2300      	moveq	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d1d6      	bne.n	8004c06 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	6039      	str	r1, [r7, #0]
 8004c6e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <OSPIM_GetConfig+0x26>
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d802      	bhi.n	8004c8a <OSPIM_GetConfig+0x26>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]
 8004c8e:	e08e      	b.n	8004dae <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d101      	bne.n	8004cb8 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004cb4:	4b41      	ldr	r3, [pc, #260]	; (8004dbc <OSPIM_GetConfig+0x158>)
 8004cb6:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e074      	b.n	8004da8 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004cbe:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <OSPIM_GetConfig+0x15c>)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4053      	eors	r3, r2
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4053      	eors	r3, r2
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4053      	eors	r3, r2
 8004d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d018      	beq.n	8004d66 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4053      	eors	r3, r2
 8004d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d111      	bne.n	8004d66 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	60da      	str	r2, [r3, #12]
 8004d58:	e005      	b.n	8004d66 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d018      	beq.n	8004da2 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4053      	eors	r3, r2
 8004d76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d111      	bne.n	8004da2 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	611a      	str	r2, [r3, #16]
 8004d94:	e005      	b.n	8004da2 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3301      	adds	r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d987      	bls.n	8004cbe <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	04040222 	.word	0x04040222
 8004dc0:	50061c00 	.word	0x50061c00

08004dc4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd2:	6013      	str	r3, [r2, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40007000 	.word	0x40007000

08004de4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df4:	d102      	bne.n	8004dfc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dfa:	e00b      	b.n	8004e14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004dfc:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0a:	d102      	bne.n	8004e12 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e10:	e000      	b.n	8004e14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004e12:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40007000 	.word	0x40007000

08004e24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d141      	bne.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e32:	4b4b      	ldr	r3, [pc, #300]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3e:	d131      	bne.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e40:	4b47      	ldr	r3, [pc, #284]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e46:	4a46      	ldr	r2, [pc, #280]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e50:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e58:	4a41      	ldr	r2, [pc, #260]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004e60:	4b40      	ldr	r3, [pc, #256]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2232      	movs	r2, #50	; 0x32
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	4a3f      	ldr	r2, [pc, #252]	; (8004f68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e70:	0c9b      	lsrs	r3, r3, #18
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e76:	e002      	b.n	8004e7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e7e:	4b38      	ldr	r3, [pc, #224]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8a:	d102      	bne.n	8004e92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f2      	bne.n	8004e78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e92:	4b33      	ldr	r3, [pc, #204]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d158      	bne.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e057      	b.n	8004f54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea4:	4b2e      	ldr	r3, [pc, #184]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eaa:	4a2d      	ldr	r2, [pc, #180]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004eb4:	e04d      	b.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ebc:	d141      	bne.n	8004f42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ebe:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eca:	d131      	bne.n	8004f30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ecc:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed2:	4a23      	ldr	r2, [pc, #140]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ee4:	4a1e      	ldr	r2, [pc, #120]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2232      	movs	r2, #50	; 0x32
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	0c9b      	lsrs	r3, r3, #18
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f02:	e002      	b.n	8004f0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f0a:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f16:	d102      	bne.n	8004f1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f2      	bne.n	8004f04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2a:	d112      	bne.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e011      	b.n	8004f54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f40:	e007      	b.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f42:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f4a:	4a05      	ldr	r2, [pc, #20]	; (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f50:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40007000 	.word	0x40007000
 8004f64:	2000006c 	.word	0x2000006c
 8004f68:	431bde83 	.word	0x431bde83

08004f6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f000 bc08 	b.w	8005790 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f80:	4b96      	ldr	r3, [pc, #600]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f8a:	4b94      	ldr	r3, [pc, #592]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80e4 	beq.w	800516a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x4c>
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	f040 808b 	bne.w	80050c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	f040 8087 	bne.w	80050c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fb8:	4b88      	ldr	r3, [pc, #544]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x64>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e3df      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1a      	ldr	r2, [r3, #32]
 8004fd4:	4b81      	ldr	r3, [pc, #516]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <HAL_RCC_OscConfig+0x7e>
 8004fe0:	4b7e      	ldr	r3, [pc, #504]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe8:	e005      	b.n	8004ff6 <HAL_RCC_OscConfig+0x8a>
 8004fea:	4b7c      	ldr	r3, [pc, #496]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8004fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d223      	bcs.n	8005042 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fdcc 	bl	8005b9c <RCC_SetFlashLatencyFromMSIRange>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e3c0      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800500e:	4b73      	ldr	r3, [pc, #460]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a72      	ldr	r2, [pc, #456]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005014:	f043 0308 	orr.w	r3, r3, #8
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	4b70      	ldr	r3, [pc, #448]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	496d      	ldr	r1, [pc, #436]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800502c:	4b6b      	ldr	r3, [pc, #428]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	4968      	ldr	r1, [pc, #416]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 800503c:	4313      	orrs	r3, r2
 800503e:	604b      	str	r3, [r1, #4]
 8005040:	e025      	b.n	800508e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005042:	4b66      	ldr	r3, [pc, #408]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a65      	ldr	r2, [pc, #404]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005048:	f043 0308 	orr.w	r3, r3, #8
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b63      	ldr	r3, [pc, #396]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	4960      	ldr	r1, [pc, #384]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 800505c:	4313      	orrs	r3, r2
 800505e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005060:	4b5e      	ldr	r3, [pc, #376]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	495b      	ldr	r1, [pc, #364]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fd8c 	bl	8005b9c <RCC_SetFlashLatencyFromMSIRange>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e380      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800508e:	f000 fcc1 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 8005092:	4602      	mov	r2, r0
 8005094:	4b51      	ldr	r3, [pc, #324]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	4950      	ldr	r1, [pc, #320]	; (80051e0 <HAL_RCC_OscConfig+0x274>)
 80050a0:	5ccb      	ldrb	r3, [r1, r3]
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	fa22 f303 	lsr.w	r3, r2, r3
 80050aa:	4a4e      	ldr	r2, [pc, #312]	; (80051e4 <HAL_RCC_OscConfig+0x278>)
 80050ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050ae:	4b4e      	ldr	r3, [pc, #312]	; (80051e8 <HAL_RCC_OscConfig+0x27c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fc ff28 	bl	8001f08 <HAL_InitTick>
 80050b8:	4603      	mov	r3, r0
 80050ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d052      	beq.n	8005168 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	e364      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d032      	beq.n	8005134 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050ce:	4b43      	ldr	r3, [pc, #268]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a42      	ldr	r2, [pc, #264]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050da:	f7fc ff65 	bl	8001fa8 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050e2:	f7fc ff61 	bl	8001fa8 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e34d      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050f4:	4b39      	ldr	r3, [pc, #228]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005100:	4b36      	ldr	r3, [pc, #216]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a35      	ldr	r2, [pc, #212]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005106:	f043 0308 	orr.w	r3, r3, #8
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	4b33      	ldr	r3, [pc, #204]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	4930      	ldr	r1, [pc, #192]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800511e:	4b2f      	ldr	r3, [pc, #188]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	492b      	ldr	r1, [pc, #172]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 800512e:	4313      	orrs	r3, r2
 8005130:	604b      	str	r3, [r1, #4]
 8005132:	e01a      	b.n	800516a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005134:	4b29      	ldr	r3, [pc, #164]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a28      	ldr	r2, [pc, #160]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005140:	f7fc ff32 	bl	8001fa8 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005148:	f7fc ff2e 	bl	8001fa8 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e31a      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800515a:	4b20      	ldr	r3, [pc, #128]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x1dc>
 8005166:	e000      	b.n	800516a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005168:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d073      	beq.n	800525e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d005      	beq.n	8005188 <HAL_RCC_OscConfig+0x21c>
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	2b0c      	cmp	r3, #12
 8005180:	d10e      	bne.n	80051a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d10b      	bne.n	80051a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005188:	4b14      	ldr	r3, [pc, #80]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d063      	beq.n	800525c <HAL_RCC_OscConfig+0x2f0>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d15f      	bne.n	800525c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e2f7      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a8:	d106      	bne.n	80051b8 <HAL_RCC_OscConfig+0x24c>
 80051aa:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a0b      	ldr	r2, [pc, #44]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 80051b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e025      	b.n	8005204 <HAL_RCC_OscConfig+0x298>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051c0:	d114      	bne.n	80051ec <HAL_RCC_OscConfig+0x280>
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a05      	ldr	r2, [pc, #20]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 80051c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	4b03      	ldr	r3, [pc, #12]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a02      	ldr	r2, [pc, #8]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e013      	b.n	8005204 <HAL_RCC_OscConfig+0x298>
 80051dc:	40021000 	.word	0x40021000
 80051e0:	08008040 	.word	0x08008040
 80051e4:	2000006c 	.word	0x2000006c
 80051e8:	200000a4 	.word	0x200000a4
 80051ec:	4ba0      	ldr	r3, [pc, #640]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a9f      	ldr	r2, [pc, #636]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	4b9d      	ldr	r3, [pc, #628]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a9c      	ldr	r2, [pc, #624]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80051fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fc fecc 	bl	8001fa8 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005214:	f7fc fec8 	bl	8001fa8 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e2b4      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005226:	4b92      	ldr	r3, [pc, #584]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x2a8>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7fc feb8 	bl	8001fa8 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800523c:	f7fc feb4 	bl	8001fa8 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	; 0x64
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e2a0      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800524e:	4b88      	ldr	r3, [pc, #544]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x2d0>
 800525a:	e000      	b.n	800525e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d060      	beq.n	800532c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b04      	cmp	r3, #4
 800526e:	d005      	beq.n	800527c <HAL_RCC_OscConfig+0x310>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b0c      	cmp	r3, #12
 8005274:	d119      	bne.n	80052aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d116      	bne.n	80052aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800527c:	4b7c      	ldr	r3, [pc, #496]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_OscConfig+0x328>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e27d      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005294:	4b76      	ldr	r3, [pc, #472]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	061b      	lsls	r3, r3, #24
 80052a2:	4973      	ldr	r1, [pc, #460]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052a8:	e040      	b.n	800532c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d023      	beq.n	80052fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052b2:	4b6f      	ldr	r3, [pc, #444]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a6e      	ldr	r2, [pc, #440]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fc fe73 	bl	8001fa8 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c6:	f7fc fe6f 	bl	8001fa8 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e25b      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d8:	4b65      	ldr	r3, [pc, #404]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e4:	4b62      	ldr	r3, [pc, #392]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	061b      	lsls	r3, r3, #24
 80052f2:	495f      	ldr	r1, [pc, #380]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	604b      	str	r3, [r1, #4]
 80052f8:	e018      	b.n	800532c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052fa:	4b5d      	ldr	r3, [pc, #372]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a5c      	ldr	r2, [pc, #368]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005306:	f7fc fe4f 	bl	8001fa8 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800530e:	f7fc fe4b 	bl	8001fa8 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e237      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005320:	4b53      	ldr	r3, [pc, #332]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f0      	bne.n	800530e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d03c      	beq.n	80053b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01c      	beq.n	800537a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005340:	4b4b      	ldr	r3, [pc, #300]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005346:	4a4a      	ldr	r2, [pc, #296]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005350:	f7fc fe2a 	bl	8001fa8 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005358:	f7fc fe26 	bl	8001fa8 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e212      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800536a:	4b41      	ldr	r3, [pc, #260]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 800536c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ef      	beq.n	8005358 <HAL_RCC_OscConfig+0x3ec>
 8005378:	e01b      	b.n	80053b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800537a:	4b3d      	ldr	r3, [pc, #244]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 800537c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005380:	4a3b      	ldr	r2, [pc, #236]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538a:	f7fc fe0d 	bl	8001fa8 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005392:	f7fc fe09 	bl	8001fa8 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e1f5      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053a4:	4b32      	ldr	r3, [pc, #200]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80053a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1ef      	bne.n	8005392 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80a6 	beq.w	800550c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053c0:	2300      	movs	r3, #0
 80053c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80053c4:	4b2a      	ldr	r3, [pc, #168]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80053c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10d      	bne.n	80053ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d0:	4b27      	ldr	r3, [pc, #156]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	4a26      	ldr	r2, [pc, #152]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80053d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053da:	6593      	str	r3, [r2, #88]	; 0x58
 80053dc:	4b24      	ldr	r3, [pc, #144]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e8:	2301      	movs	r3, #1
 80053ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ec:	4b21      	ldr	r3, [pc, #132]	; (8005474 <HAL_RCC_OscConfig+0x508>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d118      	bne.n	800542a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053f8:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <HAL_RCC_OscConfig+0x508>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <HAL_RCC_OscConfig+0x508>)
 80053fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005404:	f7fc fdd0 	bl	8001fa8 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800540c:	f7fc fdcc 	bl	8001fa8 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e1b8      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800541e:	4b15      	ldr	r3, [pc, #84]	; (8005474 <HAL_RCC_OscConfig+0x508>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d108      	bne.n	8005444 <HAL_RCC_OscConfig+0x4d8>
 8005432:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005438:	4a0d      	ldr	r2, [pc, #52]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005442:	e029      	b.n	8005498 <HAL_RCC_OscConfig+0x52c>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b05      	cmp	r3, #5
 800544a:	d115      	bne.n	8005478 <HAL_RCC_OscConfig+0x50c>
 800544c:	4b08      	ldr	r3, [pc, #32]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	4a07      	ldr	r2, [pc, #28]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005454:	f043 0304 	orr.w	r3, r3, #4
 8005458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800545c:	4b04      	ldr	r3, [pc, #16]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	4a03      	ldr	r2, [pc, #12]	; (8005470 <HAL_RCC_OscConfig+0x504>)
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800546c:	e014      	b.n	8005498 <HAL_RCC_OscConfig+0x52c>
 800546e:	bf00      	nop
 8005470:	40021000 	.word	0x40021000
 8005474:	40007000 	.word	0x40007000
 8005478:	4b9d      	ldr	r3, [pc, #628]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547e:	4a9c      	ldr	r2, [pc, #624]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005488:	4b99      	ldr	r3, [pc, #612]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548e:	4a98      	ldr	r2, [pc, #608]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 8005490:	f023 0304 	bic.w	r3, r3, #4
 8005494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d016      	beq.n	80054ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a0:	f7fc fd82 	bl	8001fa8 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a6:	e00a      	b.n	80054be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a8:	f7fc fd7e 	bl	8001fa8 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e168      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054be:	4b8c      	ldr	r3, [pc, #560]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0ed      	beq.n	80054a8 <HAL_RCC_OscConfig+0x53c>
 80054cc:	e015      	b.n	80054fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ce:	f7fc fd6b 	bl	8001fa8 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054d4:	e00a      	b.n	80054ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d6:	f7fc fd67 	bl	8001fa8 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e151      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054ec:	4b80      	ldr	r3, [pc, #512]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ed      	bne.n	80054d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054fa:	7ffb      	ldrb	r3, [r7, #31]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d105      	bne.n	800550c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005500:	4b7b      	ldr	r3, [pc, #492]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 8005502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005504:	4a7a      	ldr	r2, [pc, #488]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 8005506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800550a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d03c      	beq.n	8005592 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01c      	beq.n	800555a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005520:	4b73      	ldr	r3, [pc, #460]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 8005522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005526:	4a72      	ldr	r2, [pc, #456]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fc fd3a 	bl	8001fa8 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005538:	f7fc fd36 	bl	8001fa8 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e122      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800554a:	4b69      	ldr	r3, [pc, #420]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 800554c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ef      	beq.n	8005538 <HAL_RCC_OscConfig+0x5cc>
 8005558:	e01b      	b.n	8005592 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800555a:	4b65      	ldr	r3, [pc, #404]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 800555c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005560:	4a63      	ldr	r2, [pc, #396]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556a:	f7fc fd1d 	bl	8001fa8 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005572:	f7fc fd19 	bl	8001fa8 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e105      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005584:	4b5a      	ldr	r3, [pc, #360]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 8005586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1ef      	bne.n	8005572 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80f9 	beq.w	800578e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	f040 80cf 	bne.w	8005744 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80055a6:	4b52      	ldr	r3, [pc, #328]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f003 0203 	and.w	r2, r3, #3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d12c      	bne.n	8005614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	3b01      	subs	r3, #1
 80055c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d123      	bne.n	8005614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d11b      	bne.n	8005614 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d113      	bne.n	8005614 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	3b01      	subs	r3, #1
 80055fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d109      	bne.n	8005614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	3b01      	subs	r3, #1
 800560e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005610:	429a      	cmp	r2, r3
 8005612:	d071      	beq.n	80056f8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b0c      	cmp	r3, #12
 8005618:	d068      	beq.n	80056ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800561a:	4b35      	ldr	r3, [pc, #212]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d105      	bne.n	8005632 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005626:	4b32      	ldr	r3, [pc, #200]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e0ac      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005636:	4b2e      	ldr	r3, [pc, #184]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a2d      	ldr	r2, [pc, #180]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 800563c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005640:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005642:	f7fc fcb1 	bl	8001fa8 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564a:	f7fc fcad 	bl	8001fa8 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e099      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800565c:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005668:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <HAL_RCC_OscConfig+0x788>)
 800566e:	4013      	ands	r3, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005678:	3a01      	subs	r2, #1
 800567a:	0112      	lsls	r2, r2, #4
 800567c:	4311      	orrs	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005682:	0212      	lsls	r2, r2, #8
 8005684:	4311      	orrs	r1, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800568a:	0852      	lsrs	r2, r2, #1
 800568c:	3a01      	subs	r2, #1
 800568e:	0552      	lsls	r2, r2, #21
 8005690:	4311      	orrs	r1, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005696:	0852      	lsrs	r2, r2, #1
 8005698:	3a01      	subs	r2, #1
 800569a:	0652      	lsls	r2, r2, #25
 800569c:	4311      	orrs	r1, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056a2:	06d2      	lsls	r2, r2, #27
 80056a4:	430a      	orrs	r2, r1
 80056a6:	4912      	ldr	r1, [pc, #72]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80056ac:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0f      	ldr	r2, [pc, #60]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 80056b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056b8:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4a0c      	ldr	r2, [pc, #48]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 80056be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056c4:	f7fc fc70 	bl	8001fa8 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fc fc6c 	bl	8001fa8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e058      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <HAL_RCC_OscConfig+0x784>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056ea:	e050      	b.n	800578e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e04f      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
 80056f0:	40021000 	.word	0x40021000
 80056f4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056f8:	4b27      	ldr	r3, [pc, #156]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d144      	bne.n	800578e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005704:	4b24      	ldr	r3, [pc, #144]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a23      	ldr	r2, [pc, #140]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 800570a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800570e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005710:	4b21      	ldr	r3, [pc, #132]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a20      	ldr	r2, [pc, #128]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 8005716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800571a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800571c:	f7fc fc44 	bl	8001fa8 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005724:	f7fc fc40 	bl	8001fa8 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e02c      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x7b8>
 8005742:	e024      	b.n	800578e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2b0c      	cmp	r3, #12
 8005748:	d01f      	beq.n	800578a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574a:	4b13      	ldr	r3, [pc, #76]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a12      	ldr	r2, [pc, #72]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 8005750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7fc fc27 	bl	8001fa8 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575e:	f7fc fc23 	bl	8001fa8 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e00f      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f0      	bne.n	800575e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	4905      	ldr	r1, [pc, #20]	; (8005798 <HAL_RCC_OscConfig+0x82c>)
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <HAL_RCC_OscConfig+0x830>)
 8005784:	4013      	ands	r3, r2
 8005786:	60cb      	str	r3, [r1, #12]
 8005788:	e001      	b.n	800578e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40021000 	.word	0x40021000
 800579c:	feeefffc 	.word	0xfeeefffc

080057a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e11d      	b.n	80059f4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057b8:	4b90      	ldr	r3, [pc, #576]	; (80059fc <HAL_RCC_ClockConfig+0x25c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d910      	bls.n	80057e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c6:	4b8d      	ldr	r3, [pc, #564]	; (80059fc <HAL_RCC_ClockConfig+0x25c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f023 020f 	bic.w	r2, r3, #15
 80057ce:	498b      	ldr	r1, [pc, #556]	; (80059fc <HAL_RCC_ClockConfig+0x25c>)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d6:	4b89      	ldr	r3, [pc, #548]	; (80059fc <HAL_RCC_ClockConfig+0x25c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d001      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e105      	b.n	80059f4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d010      	beq.n	8005816 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	4b81      	ldr	r3, [pc, #516]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005800:	429a      	cmp	r2, r3
 8005802:	d908      	bls.n	8005816 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005804:	4b7e      	ldr	r3, [pc, #504]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	497b      	ldr	r1, [pc, #492]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 8005812:	4313      	orrs	r3, r2
 8005814:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d079      	beq.n	8005916 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b03      	cmp	r3, #3
 8005828:	d11e      	bne.n	8005868 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800582a:	4b75      	ldr	r3, [pc, #468]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e0dc      	b.n	80059f4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800583a:	f000 fa09 	bl	8005c50 <RCC_GetSysClockFreqFromPLLSource>
 800583e:	4603      	mov	r3, r0
 8005840:	4a70      	ldr	r2, [pc, #448]	; (8005a04 <HAL_RCC_ClockConfig+0x264>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d946      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005846:	4b6e      	ldr	r3, [pc, #440]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d140      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005852:	4b6b      	ldr	r3, [pc, #428]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800585a:	4a69      	ldr	r2, [pc, #420]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 800585c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005860:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e035      	b.n	80058d4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b02      	cmp	r3, #2
 800586e:	d107      	bne.n	8005880 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005870:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d115      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0b9      	b.n	80059f4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005888:	4b5d      	ldr	r3, [pc, #372]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0ad      	b.n	80059f4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005898:	4b59      	ldr	r3, [pc, #356]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0a5      	b.n	80059f4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80058a8:	f000 f8b4 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 80058ac:	4603      	mov	r3, r0
 80058ae:	4a55      	ldr	r2, [pc, #340]	; (8005a04 <HAL_RCC_ClockConfig+0x264>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d90f      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80058b4:	4b52      	ldr	r3, [pc, #328]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058c0:	4b4f      	ldr	r3, [pc, #316]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c8:	4a4d      	ldr	r2, [pc, #308]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058d4:	4b4a      	ldr	r3, [pc, #296]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f023 0203 	bic.w	r2, r3, #3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4947      	ldr	r1, [pc, #284]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e6:	f7fc fb5f 	bl	8001fa8 <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ec:	e00a      	b.n	8005904 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ee:	f7fc fb5b 	bl	8001fa8 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e077      	b.n	80059f4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005904:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 020c 	and.w	r2, r3, #12
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	429a      	cmp	r2, r3
 8005914:	d1eb      	bne.n	80058ee <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2b80      	cmp	r3, #128	; 0x80
 800591a:	d105      	bne.n	8005928 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800591c:	4b38      	ldr	r3, [pc, #224]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4a37      	ldr	r2, [pc, #220]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 8005922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005926:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d010      	beq.n	8005956 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	4b31      	ldr	r3, [pc, #196]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005940:	429a      	cmp	r2, r3
 8005942:	d208      	bcs.n	8005956 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005944:	4b2e      	ldr	r3, [pc, #184]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	492b      	ldr	r1, [pc, #172]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005956:	4b29      	ldr	r3, [pc, #164]	; (80059fc <HAL_RCC_ClockConfig+0x25c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d210      	bcs.n	8005986 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005964:	4b25      	ldr	r3, [pc, #148]	; (80059fc <HAL_RCC_ClockConfig+0x25c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f023 020f 	bic.w	r2, r3, #15
 800596c:	4923      	ldr	r1, [pc, #140]	; (80059fc <HAL_RCC_ClockConfig+0x25c>)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	4313      	orrs	r3, r2
 8005972:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005974:	4b21      	ldr	r3, [pc, #132]	; (80059fc <HAL_RCC_ClockConfig+0x25c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d001      	beq.n	8005986 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e036      	b.n	80059f4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005992:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4918      	ldr	r1, [pc, #96]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d009      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059b0:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4910      	ldr	r1, [pc, #64]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059c4:	f000 f826 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <HAL_RCC_ClockConfig+0x260>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	091b      	lsrs	r3, r3, #4
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	490c      	ldr	r1, [pc, #48]	; (8005a08 <HAL_RCC_ClockConfig+0x268>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
 80059e0:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <HAL_RCC_ClockConfig+0x26c>)
 80059e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <HAL_RCC_ClockConfig+0x270>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fc fa8d 	bl	8001f08 <HAL_InitTick>
 80059ee:	4603      	mov	r3, r0
 80059f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40022000 	.word	0x40022000
 8005a00:	40021000 	.word	0x40021000
 8005a04:	04c4b400 	.word	0x04c4b400
 8005a08:	08008040 	.word	0x08008040
 8005a0c:	2000006c 	.word	0x2000006c
 8005a10:	200000a4 	.word	0x200000a4

08005a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b089      	sub	sp, #36	; 0x24
 8005a18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a22:	4b3e      	ldr	r3, [pc, #248]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a2c:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_RCC_GetSysClockFreq+0x34>
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	d121      	bne.n	8005a86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d11e      	bne.n	8005a86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a48:	4b34      	ldr	r3, [pc, #208]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d107      	bne.n	8005a64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a54:	4b31      	ldr	r3, [pc, #196]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	e005      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a64:	4b2d      	ldr	r3, [pc, #180]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a70:	4a2b      	ldr	r2, [pc, #172]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10d      	bne.n	8005a9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a84:	e00a      	b.n	8005a9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d102      	bne.n	8005a92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a8c:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e004      	b.n	8005a9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a98:	4b23      	ldr	r3, [pc, #140]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	2b0c      	cmp	r3, #12
 8005aa0:	d134      	bne.n	8005b0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aa2:	4b1e      	ldr	r3, [pc, #120]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d003      	beq.n	8005aba <HAL_RCC_GetSysClockFreq+0xa6>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d003      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0xac>
 8005ab8:	e005      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005aba:	4b1a      	ldr	r3, [pc, #104]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x110>)
 8005abc:	617b      	str	r3, [r7, #20]
      break;
 8005abe:	e005      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ac0:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ac2:	617b      	str	r3, [r7, #20]
      break;
 8005ac4:	e002      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	617b      	str	r3, [r7, #20]
      break;
 8005aca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ada:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	fb03 f202 	mul.w	r2, r3, r2
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005af2:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	0e5b      	lsrs	r3, r3, #25
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	3301      	adds	r3, #1
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3724      	adds	r7, #36	; 0x24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	08008058 	.word	0x08008058
 8005b24:	00f42400 	.word	0x00f42400
 8005b28:	007a1200 	.word	0x007a1200

08005b2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b32:	681b      	ldr	r3, [r3, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	2000006c 	.word	0x2000006c

08005b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b48:	f7ff fff0 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4904      	ldr	r1, [pc, #16]	; (8005b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b5a:	5ccb      	ldrb	r3, [r1, r3]
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	08008050 	.word	0x08008050

08005b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b74:	f7ff ffda 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	0adb      	lsrs	r3, r3, #11
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	4904      	ldr	r1, [pc, #16]	; (8005b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b86:	5ccb      	ldrb	r3, [r1, r3]
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40021000 	.word	0x40021000
 8005b98:	08008050 	.word	0x08008050

08005b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bb4:	f7ff f916 	bl	8004de4 <HAL_PWREx_GetVoltageRange>
 8005bb8:	6178      	str	r0, [r7, #20]
 8005bba:	e014      	b.n	8005be6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bbc:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc0:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc8:	4b1f      	ldr	r3, [pc, #124]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bd4:	f7ff f906 	bl	8004de4 <HAL_PWREx_GetVoltageRange>
 8005bd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	4a1a      	ldr	r2, [pc, #104]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bec:	d10b      	bne.n	8005c06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b80      	cmp	r3, #128	; 0x80
 8005bf2:	d913      	bls.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2ba0      	cmp	r3, #160	; 0xa0
 8005bf8:	d902      	bls.n	8005c00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	e00d      	b.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c00:	2301      	movs	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	e00a      	b.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b7f      	cmp	r3, #127	; 0x7f
 8005c0a:	d902      	bls.n	8005c12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	e004      	b.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b70      	cmp	r3, #112	; 0x70
 8005c16:	d101      	bne.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c18:	2301      	movs	r3, #1
 8005c1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f023 020f 	bic.w	r2, r3, #15
 8005c24:	4909      	ldr	r1, [pc, #36]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c2c:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d001      	beq.n	8005c3e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	40022000 	.word	0x40022000

08005c50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c56:	4b2d      	ldr	r3, [pc, #180]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d00b      	beq.n	8005c7e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d825      	bhi.n	8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d008      	beq.n	8005c84 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d11f      	bne.n	8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005c78:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c7a:	613b      	str	r3, [r7, #16]
    break;
 8005c7c:	e01f      	b.n	8005cbe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005c7e:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005c80:	613b      	str	r3, [r7, #16]
    break;
 8005c82:	e01c      	b.n	8005cbe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c84:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d107      	bne.n	8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c90:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e005      	b.n	8005cac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005cac:	4a1a      	ldr	r2, [pc, #104]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb4:	613b      	str	r3, [r7, #16]
    break;
 8005cb6:	e002      	b.n	8005cbe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
    break;
 8005cbc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	fb03 f202 	mul.w	r2, r3, r2
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	0e5b      	lsrs	r3, r3, #25
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	3301      	adds	r3, #1
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005cfe:	683b      	ldr	r3, [r7, #0]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	00f42400 	.word	0x00f42400
 8005d14:	007a1200 	.word	0x007a1200
 8005d18:	08008058 	.word	0x08008058

08005d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d24:	2300      	movs	r3, #0
 8005d26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d040      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3c:	2b80      	cmp	r3, #128	; 0x80
 8005d3e:	d02a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d40:	2b80      	cmp	r3, #128	; 0x80
 8005d42:	d825      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d44:	2b60      	cmp	r3, #96	; 0x60
 8005d46:	d026      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d48:	2b60      	cmp	r3, #96	; 0x60
 8005d4a:	d821      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d4c:	2b40      	cmp	r3, #64	; 0x40
 8005d4e:	d006      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d81d      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d010      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005d5c:	e018      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d5e:	4b89      	ldr	r3, [pc, #548]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	4a88      	ldr	r2, [pc, #544]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d68:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d6a:	e015      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fb12 	bl	800639c <RCCEx_PLLSAI1_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d7c:	e00c      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3320      	adds	r3, #32
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fbfd 	bl	8006584 <RCCEx_PLLSAI2_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d8e:	e003      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	74fb      	strb	r3, [r7, #19]
      break;
 8005d94:	e000      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d9e:	4b79      	ldr	r3, [pc, #484]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005da4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dac:	4975      	ldr	r1, [pc, #468]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005db4:	e001      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db6:	7cfb      	ldrb	r3, [r7, #19]
 8005db8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d047      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	d030      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	d82a      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dda:	d02a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de0:	d824      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de6:	d008      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dec:	d81e      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df6:	d010      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005df8:	e018      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dfa:	4b62      	ldr	r3, [pc, #392]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	4a61      	ldr	r2, [pc, #388]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e04:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e06:	e015      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fac4 	bl	800639c <RCCEx_PLLSAI1_Config>
 8005e14:	4603      	mov	r3, r0
 8005e16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e18:	e00c      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3320      	adds	r3, #32
 8005e1e:	2100      	movs	r1, #0
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fbaf 	bl	8006584 <RCCEx_PLLSAI2_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e2a:	e003      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	74fb      	strb	r3, [r7, #19]
      break;
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e34:	7cfb      	ldrb	r3, [r7, #19]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e3a:	4b52      	ldr	r3, [pc, #328]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e48:	494e      	ldr	r1, [pc, #312]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e50:	e001      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e52:	7cfb      	ldrb	r3, [r7, #19]
 8005e54:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 809f 	beq.w	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e64:	2300      	movs	r3, #0
 8005e66:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e68:	4b46      	ldr	r3, [pc, #280]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e7e:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	4a40      	ldr	r2, [pc, #256]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e88:	6593      	str	r3, [r2, #88]	; 0x58
 8005e8a:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e96:	2301      	movs	r3, #1
 8005e98:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e9a:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a3a      	ldr	r2, [pc, #232]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ea6:	f7fc f87f 	bl	8001fa8 <HAL_GetTick>
 8005eaa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005eac:	e009      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eae:	f7fc f87b 	bl	8001fa8 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d902      	bls.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	74fb      	strb	r3, [r7, #19]
        break;
 8005ec0:	e005      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ec2:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0ef      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005ece:	7cfb      	ldrb	r3, [r7, #19]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d15b      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ed4:	4b2b      	ldr	r3, [pc, #172]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ede:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01f      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d019      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ef2:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005efe:	4b21      	ldr	r3, [pc, #132]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	4a1f      	ldr	r2, [pc, #124]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f0e:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f14:	4a1b      	ldr	r2, [pc, #108]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f1e:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d016      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fc f83a 	bl	8001fa8 <HAL_GetTick>
 8005f34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f36:	e00b      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f38:	f7fc f836 	bl	8001fa8 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d902      	bls.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	74fb      	strb	r3, [r7, #19]
            break;
 8005f4e:	e006      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0ec      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005f5e:	7cfb      	ldrb	r3, [r7, #19]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10c      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f74:	4903      	ldr	r1, [pc, #12]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f7c:	e008      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f7e:	7cfb      	ldrb	r3, [r7, #19]
 8005f80:	74bb      	strb	r3, [r7, #18]
 8005f82:	e005      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005f84:	40021000 	.word	0x40021000
 8005f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8c:	7cfb      	ldrb	r3, [r7, #19]
 8005f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f90:	7c7b      	ldrb	r3, [r7, #17]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d105      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f96:	4ba0      	ldr	r3, [pc, #640]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9a:	4a9f      	ldr	r2, [pc, #636]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fae:	4b9a      	ldr	r3, [pc, #616]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb4:	f023 0203 	bic.w	r2, r3, #3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	4996      	ldr	r1, [pc, #600]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fd0:	4b91      	ldr	r3, [pc, #580]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd6:	f023 020c 	bic.w	r2, r3, #12
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	498e      	ldr	r1, [pc, #568]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ff2:	4b89      	ldr	r3, [pc, #548]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	4985      	ldr	r1, [pc, #532]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006014:	4b80      	ldr	r3, [pc, #512]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006022:	497d      	ldr	r1, [pc, #500]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006036:	4b78      	ldr	r3, [pc, #480]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006044:	4974      	ldr	r1, [pc, #464]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006058:	4b6f      	ldr	r3, [pc, #444]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006066:	496c      	ldr	r1, [pc, #432]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800607a:	4b67      	ldr	r3, [pc, #412]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006080:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006088:	4963      	ldr	r1, [pc, #396]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800609c:	4b5e      	ldr	r3, [pc, #376]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060aa:	495b      	ldr	r1, [pc, #364]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060be:	4b56      	ldr	r3, [pc, #344]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	4952      	ldr	r1, [pc, #328]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060e0:	4b4d      	ldr	r3, [pc, #308]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ee:	494a      	ldr	r1, [pc, #296]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006102:	4b45      	ldr	r3, [pc, #276]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006110:	4941      	ldr	r1, [pc, #260]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006124:	4b3c      	ldr	r3, [pc, #240]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800612a:	f023 0203 	bic.w	r2, r3, #3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006132:	4939      	ldr	r1, [pc, #228]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d028      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006146:	4b34      	ldr	r3, [pc, #208]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006154:	4930      	ldr	r1, [pc, #192]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006164:	d106      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006166:	4b2c      	ldr	r3, [pc, #176]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	4a2b      	ldr	r2, [pc, #172]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800616c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006170:	60d3      	str	r3, [r2, #12]
 8006172:	e011      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800617c:	d10c      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3304      	adds	r3, #4
 8006182:	2101      	movs	r1, #1
 8006184:	4618      	mov	r0, r3
 8006186:	f000 f909 	bl	800639c <RCCEx_PLLSAI1_Config>
 800618a:	4603      	mov	r3, r0
 800618c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800618e:	7cfb      	ldrb	r3, [r7, #19]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006194:	7cfb      	ldrb	r3, [r7, #19]
 8006196:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d04d      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ac:	d108      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80061ae:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b4:	4a18      	ldr	r2, [pc, #96]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80061be:	e012      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061c0:	4b15      	ldr	r3, [pc, #84]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061c6:	4a14      	ldr	r2, [pc, #80]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80061d0:	4b11      	ldr	r3, [pc, #68]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061de:	490e      	ldr	r1, [pc, #56]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ee:	d106      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f0:	4b09      	ldr	r3, [pc, #36]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4a08      	ldr	r2, [pc, #32]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061fa:	60d3      	str	r3, [r2, #12]
 80061fc:	e020      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006206:	d109      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006208:	4b03      	ldr	r3, [pc, #12]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4a02      	ldr	r2, [pc, #8]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800620e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006212:	60d3      	str	r3, [r2, #12]
 8006214:	e014      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006224:	d10c      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	3304      	adds	r3, #4
 800622a:	2101      	movs	r1, #1
 800622c:	4618      	mov	r0, r3
 800622e:	f000 f8b5 	bl	800639c <RCCEx_PLLSAI1_Config>
 8006232:	4603      	mov	r3, r0
 8006234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006236:	7cfb      	ldrb	r3, [r7, #19]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800623c:	7cfb      	ldrb	r3, [r7, #19]
 800623e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d028      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800624c:	4b4a      	ldr	r3, [pc, #296]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800625a:	4947      	ldr	r1, [pc, #284]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800625c:	4313      	orrs	r3, r2
 800625e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800626a:	d106      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800626c:	4b42      	ldr	r3, [pc, #264]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4a41      	ldr	r2, [pc, #260]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006276:	60d3      	str	r3, [r2, #12]
 8006278:	e011      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800627e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006282:	d10c      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f886 	bl	800639c <RCCEx_PLLSAI1_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006294:	7cfb      	ldrb	r3, [r7, #19]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800629a:	7cfb      	ldrb	r3, [r7, #19]
 800629c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01e      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062aa:	4b33      	ldr	r3, [pc, #204]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ba:	492f      	ldr	r1, [pc, #188]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3304      	adds	r3, #4
 80062d2:	2102      	movs	r1, #2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 f861 	bl	800639c <RCCEx_PLLSAI1_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062de:	7cfb      	ldrb	r3, [r7, #19]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80062e4:	7cfb      	ldrb	r3, [r7, #19]
 80062e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062f4:	4b20      	ldr	r3, [pc, #128]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062fa:	f023 0204 	bic.w	r2, r3, #4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006304:	491c      	ldr	r1, [pc, #112]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006318:	4b17      	ldr	r3, [pc, #92]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800631a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800631e:	f023 0218 	bic.w	r2, r3, #24
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006328:	4913      	ldr	r1, [pc, #76]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d017      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800633c:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800633e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800634c:	490a      	ldr	r1, [pc, #40]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800635a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800635e:	d105      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	4a04      	ldr	r2, [pc, #16]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800636a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800636c:	7cbb      	ldrb	r3, [r7, #18]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	40021000 	.word	0x40021000

0800637c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a04      	ldr	r2, [pc, #16]	; (8006398 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006386:	f043 0304 	orr.w	r3, r3, #4
 800638a:	6013      	str	r3, [r2, #0]
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40021000 	.word	0x40021000

0800639c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063aa:	4b72      	ldr	r3, [pc, #456]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00e      	beq.n	80063d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063b6:	4b6f      	ldr	r3, [pc, #444]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f003 0203 	and.w	r2, r3, #3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d103      	bne.n	80063ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
       ||
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d142      	bne.n	8006454 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
 80063d2:	e03f      	b.n	8006454 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d018      	beq.n	800640e <RCCEx_PLLSAI1_Config+0x72>
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d825      	bhi.n	800642c <RCCEx_PLLSAI1_Config+0x90>
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d002      	beq.n	80063ea <RCCEx_PLLSAI1_Config+0x4e>
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d009      	beq.n	80063fc <RCCEx_PLLSAI1_Config+0x60>
 80063e8:	e020      	b.n	800642c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063ea:	4b62      	ldr	r3, [pc, #392]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d11d      	bne.n	8006432 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063fa:	e01a      	b.n	8006432 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063fc:	4b5d      	ldr	r3, [pc, #372]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006404:	2b00      	cmp	r3, #0
 8006406:	d116      	bne.n	8006436 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800640c:	e013      	b.n	8006436 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800640e:	4b59      	ldr	r3, [pc, #356]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10f      	bne.n	800643a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800641a:	4b56      	ldr	r3, [pc, #344]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800642a:	e006      	b.n	800643a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
      break;
 8006430:	e004      	b.n	800643c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006432:	bf00      	nop
 8006434:	e002      	b.n	800643c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800643a:	bf00      	nop
    }

    if(status == HAL_OK)
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d108      	bne.n	8006454 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006442:	4b4c      	ldr	r3, [pc, #304]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f023 0203 	bic.w	r2, r3, #3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4949      	ldr	r1, [pc, #292]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006450:	4313      	orrs	r3, r2
 8006452:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f040 8086 	bne.w	8006568 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800645c:	4b45      	ldr	r3, [pc, #276]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a44      	ldr	r2, [pc, #272]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006462:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006468:	f7fb fd9e 	bl	8001fa8 <HAL_GetTick>
 800646c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800646e:	e009      	b.n	8006484 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006470:	f7fb fd9a 	bl	8001fa8 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d902      	bls.n	8006484 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	73fb      	strb	r3, [r7, #15]
        break;
 8006482:	e005      	b.n	8006490 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006484:	4b3b      	ldr	r3, [pc, #236]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1ef      	bne.n	8006470 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d168      	bne.n	8006568 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d113      	bne.n	80064c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800649c:	4b35      	ldr	r3, [pc, #212]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	4b35      	ldr	r3, [pc, #212]	; (8006578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6892      	ldr	r2, [r2, #8]
 80064a8:	0211      	lsls	r1, r2, #8
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	68d2      	ldr	r2, [r2, #12]
 80064ae:	06d2      	lsls	r2, r2, #27
 80064b0:	4311      	orrs	r1, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6852      	ldr	r2, [r2, #4]
 80064b6:	3a01      	subs	r2, #1
 80064b8:	0112      	lsls	r2, r2, #4
 80064ba:	430a      	orrs	r2, r1
 80064bc:	492d      	ldr	r1, [pc, #180]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	610b      	str	r3, [r1, #16]
 80064c2:	e02d      	b.n	8006520 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d115      	bne.n	80064f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064ca:	4b2a      	ldr	r3, [pc, #168]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	4b2b      	ldr	r3, [pc, #172]	; (800657c <RCCEx_PLLSAI1_Config+0x1e0>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6892      	ldr	r2, [r2, #8]
 80064d6:	0211      	lsls	r1, r2, #8
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6912      	ldr	r2, [r2, #16]
 80064dc:	0852      	lsrs	r2, r2, #1
 80064de:	3a01      	subs	r2, #1
 80064e0:	0552      	lsls	r2, r2, #21
 80064e2:	4311      	orrs	r1, r2
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6852      	ldr	r2, [r2, #4]
 80064e8:	3a01      	subs	r2, #1
 80064ea:	0112      	lsls	r2, r2, #4
 80064ec:	430a      	orrs	r2, r1
 80064ee:	4921      	ldr	r1, [pc, #132]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	610b      	str	r3, [r1, #16]
 80064f4:	e014      	b.n	8006520 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f6:	4b1f      	ldr	r3, [pc, #124]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	4b21      	ldr	r3, [pc, #132]	; (8006580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6892      	ldr	r2, [r2, #8]
 8006502:	0211      	lsls	r1, r2, #8
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6952      	ldr	r2, [r2, #20]
 8006508:	0852      	lsrs	r2, r2, #1
 800650a:	3a01      	subs	r2, #1
 800650c:	0652      	lsls	r2, r2, #25
 800650e:	4311      	orrs	r1, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6852      	ldr	r2, [r2, #4]
 8006514:	3a01      	subs	r2, #1
 8006516:	0112      	lsls	r2, r2, #4
 8006518:	430a      	orrs	r2, r1
 800651a:	4916      	ldr	r1, [pc, #88]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800651c:	4313      	orrs	r3, r2
 800651e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006520:	4b14      	ldr	r3, [pc, #80]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a13      	ldr	r2, [pc, #76]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800652a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fb fd3c 	bl	8001fa8 <HAL_GetTick>
 8006530:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006532:	e009      	b.n	8006548 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006534:	f7fb fd38 	bl	8001fa8 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d902      	bls.n	8006548 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	73fb      	strb	r3, [r7, #15]
          break;
 8006546:	e005      	b.n	8006554 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0ef      	beq.n	8006534 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	4904      	ldr	r1, [pc, #16]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006564:	4313      	orrs	r3, r2
 8006566:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40021000 	.word	0x40021000
 8006578:	07ff800f 	.word	0x07ff800f
 800657c:	ff9f800f 	.word	0xff9f800f
 8006580:	f9ff800f 	.word	0xf9ff800f

08006584 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006592:	4b72      	ldr	r3, [pc, #456]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00e      	beq.n	80065bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800659e:	4b6f      	ldr	r3, [pc, #444]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0203 	and.w	r2, r3, #3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d103      	bne.n	80065b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
       ||
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d142      	bne.n	800663c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	73fb      	strb	r3, [r7, #15]
 80065ba:	e03f      	b.n	800663c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d018      	beq.n	80065f6 <RCCEx_PLLSAI2_Config+0x72>
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d825      	bhi.n	8006614 <RCCEx_PLLSAI2_Config+0x90>
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d002      	beq.n	80065d2 <RCCEx_PLLSAI2_Config+0x4e>
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d009      	beq.n	80065e4 <RCCEx_PLLSAI2_Config+0x60>
 80065d0:	e020      	b.n	8006614 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065d2:	4b62      	ldr	r3, [pc, #392]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11d      	bne.n	800661a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065e2:	e01a      	b.n	800661a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065e4:	4b5d      	ldr	r3, [pc, #372]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d116      	bne.n	800661e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065f4:	e013      	b.n	800661e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065f6:	4b59      	ldr	r3, [pc, #356]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10f      	bne.n	8006622 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006602:	4b56      	ldr	r3, [pc, #344]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006612:	e006      	b.n	8006622 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
      break;
 8006618:	e004      	b.n	8006624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800661a:	bf00      	nop
 800661c:	e002      	b.n	8006624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006622:	bf00      	nop
    }

    if(status == HAL_OK)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d108      	bne.n	800663c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800662a:	4b4c      	ldr	r3, [pc, #304]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f023 0203 	bic.w	r2, r3, #3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4949      	ldr	r1, [pc, #292]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006638:	4313      	orrs	r3, r2
 800663a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 8086 	bne.w	8006750 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006644:	4b45      	ldr	r3, [pc, #276]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a44      	ldr	r2, [pc, #272]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800664a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800664e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006650:	f7fb fcaa 	bl	8001fa8 <HAL_GetTick>
 8006654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006656:	e009      	b.n	800666c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006658:	f7fb fca6 	bl	8001fa8 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d902      	bls.n	800666c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	73fb      	strb	r3, [r7, #15]
        break;
 800666a:	e005      	b.n	8006678 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800666c:	4b3b      	ldr	r3, [pc, #236]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1ef      	bne.n	8006658 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d168      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d113      	bne.n	80066ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006684:	4b35      	ldr	r3, [pc, #212]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	4b35      	ldr	r3, [pc, #212]	; (8006760 <RCCEx_PLLSAI2_Config+0x1dc>)
 800668a:	4013      	ands	r3, r2
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6892      	ldr	r2, [r2, #8]
 8006690:	0211      	lsls	r1, r2, #8
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68d2      	ldr	r2, [r2, #12]
 8006696:	06d2      	lsls	r2, r2, #27
 8006698:	4311      	orrs	r1, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6852      	ldr	r2, [r2, #4]
 800669e:	3a01      	subs	r2, #1
 80066a0:	0112      	lsls	r2, r2, #4
 80066a2:	430a      	orrs	r2, r1
 80066a4:	492d      	ldr	r1, [pc, #180]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	614b      	str	r3, [r1, #20]
 80066aa:	e02d      	b.n	8006708 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d115      	bne.n	80066de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066b2:	4b2a      	ldr	r3, [pc, #168]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	4b2b      	ldr	r3, [pc, #172]	; (8006764 <RCCEx_PLLSAI2_Config+0x1e0>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6892      	ldr	r2, [r2, #8]
 80066be:	0211      	lsls	r1, r2, #8
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6912      	ldr	r2, [r2, #16]
 80066c4:	0852      	lsrs	r2, r2, #1
 80066c6:	3a01      	subs	r2, #1
 80066c8:	0552      	lsls	r2, r2, #21
 80066ca:	4311      	orrs	r1, r2
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6852      	ldr	r2, [r2, #4]
 80066d0:	3a01      	subs	r2, #1
 80066d2:	0112      	lsls	r2, r2, #4
 80066d4:	430a      	orrs	r2, r1
 80066d6:	4921      	ldr	r1, [pc, #132]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	614b      	str	r3, [r1, #20]
 80066dc:	e014      	b.n	8006708 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066de:	4b1f      	ldr	r3, [pc, #124]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	4b21      	ldr	r3, [pc, #132]	; (8006768 <RCCEx_PLLSAI2_Config+0x1e4>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6892      	ldr	r2, [r2, #8]
 80066ea:	0211      	lsls	r1, r2, #8
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6952      	ldr	r2, [r2, #20]
 80066f0:	0852      	lsrs	r2, r2, #1
 80066f2:	3a01      	subs	r2, #1
 80066f4:	0652      	lsls	r2, r2, #25
 80066f6:	4311      	orrs	r1, r2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6852      	ldr	r2, [r2, #4]
 80066fc:	3a01      	subs	r2, #1
 80066fe:	0112      	lsls	r2, r2, #4
 8006700:	430a      	orrs	r2, r1
 8006702:	4916      	ldr	r1, [pc, #88]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006704:	4313      	orrs	r3, r2
 8006706:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006708:	4b14      	ldr	r3, [pc, #80]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a13      	ldr	r2, [pc, #76]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800670e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006714:	f7fb fc48 	bl	8001fa8 <HAL_GetTick>
 8006718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800671a:	e009      	b.n	8006730 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800671c:	f7fb fc44 	bl	8001fa8 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d902      	bls.n	8006730 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	73fb      	strb	r3, [r7, #15]
          break;
 800672e:	e005      	b.n	800673c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0ef      	beq.n	800671c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	4904      	ldr	r1, [pc, #16]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800674c:	4313      	orrs	r3, r2
 800674e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000
 8006760:	07ff800f 	.word	0x07ff800f
 8006764:	ff9f800f 	.word	0xff9f800f
 8006768:	f9ff800f 	.word	0xf9ff800f

0800676c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e095      	b.n	80068aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	2b00      	cmp	r3, #0
 8006784:	d108      	bne.n	8006798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800678e:	d009      	beq.n	80067a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	61da      	str	r2, [r3, #28]
 8006796:	e005      	b.n	80067a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7fa fe62 	bl	8001488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067e4:	d902      	bls.n	80067ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e002      	b.n	80067f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067fa:	d007      	beq.n	800680c <HAL_SPI_Init+0xa0>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006804:	d002      	beq.n	800680c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684e:	ea42 0103 	orr.w	r1, r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	0c1b      	lsrs	r3, r3, #16
 8006868:	f003 0204 	and.w	r2, r3, #4
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006888:	ea42 0103 	orr.w	r1, r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e042      	b.n	800694a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fa fe4c 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2224      	movs	r2, #36	; 0x24
 80068e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0201 	bic.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fbb3 	bl	8007068 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f8b4 	bl	8006a70 <UART_SetConfig>
 8006908:	4603      	mov	r3, r0
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e01b      	b.n	800694a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006920:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006930:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0201 	orr.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fc32 	bl	80071ac <UART_CheckIdleState>
 8006948:	4603      	mov	r3, r0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b08a      	sub	sp, #40	; 0x28
 8006956:	af02      	add	r7, sp, #8
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4613      	mov	r3, r2
 8006960:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006968:	2b20      	cmp	r3, #32
 800696a:	d17c      	bne.n	8006a66 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_UART_Transmit+0x26>
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e075      	b.n	8006a68 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2221      	movs	r2, #33	; 0x21
 8006988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800698c:	f7fb fb0c 	bl	8001fa8 <HAL_GetTick>
 8006990:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	88fa      	ldrh	r2, [r7, #6]
 8006996:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	88fa      	ldrh	r2, [r7, #6]
 800699e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069aa:	d108      	bne.n	80069be <HAL_UART_Transmit+0x6c>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	e003      	b.n	80069c6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069c6:	e031      	b.n	8006a2c <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2200      	movs	r2, #0
 80069d0:	2180      	movs	r1, #128	; 0x80
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fc94 	bl	8007300 <UART_WaitOnFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e03e      	b.n	8006a68 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	881a      	ldrh	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069fc:	b292      	uxth	r2, r2
 80069fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	3302      	adds	r3, #2
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	e008      	b.n	8006a1a <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	781a      	ldrb	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	b292      	uxth	r2, r2
 8006a12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	3301      	adds	r3, #1
 8006a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1c7      	bne.n	80069c8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2140      	movs	r1, #64	; 0x40
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fc5c 	bl	8007300 <UART_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e006      	b.n	8006a68 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	e000      	b.n	8006a68 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8006a66:	2302      	movs	r3, #2
  }
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a74:	b08c      	sub	sp, #48	; 0x30
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4baa      	ldr	r3, [pc, #680]	; (8006d48 <UART_SetConfig+0x2d8>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a9f      	ldr	r2, [pc, #636]	; (8006d4c <UART_SetConfig+0x2dc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d004      	beq.n	8006adc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006ae6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	6812      	ldr	r2, [r2, #0]
 8006aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006af0:	430b      	orrs	r3, r1
 8006af2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	f023 010f 	bic.w	r1, r3, #15
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a90      	ldr	r2, [pc, #576]	; (8006d50 <UART_SetConfig+0x2e0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d125      	bne.n	8006b60 <UART_SetConfig+0xf0>
 8006b14:	4b8f      	ldr	r3, [pc, #572]	; (8006d54 <UART_SetConfig+0x2e4>)
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d81a      	bhi.n	8006b58 <UART_SetConfig+0xe8>
 8006b22:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <UART_SetConfig+0xb8>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006b39 	.word	0x08006b39
 8006b2c:	08006b49 	.word	0x08006b49
 8006b30:	08006b41 	.word	0x08006b41
 8006b34:	08006b51 	.word	0x08006b51
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b3e:	e116      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006b40:	2302      	movs	r3, #2
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b46:	e112      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b4e:	e10e      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006b50:	2308      	movs	r3, #8
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b56:	e10a      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5e:	e106      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a7c      	ldr	r2, [pc, #496]	; (8006d58 <UART_SetConfig+0x2e8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d138      	bne.n	8006bdc <UART_SetConfig+0x16c>
 8006b6a:	4b7a      	ldr	r3, [pc, #488]	; (8006d54 <UART_SetConfig+0x2e4>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b70:	f003 030c 	and.w	r3, r3, #12
 8006b74:	2b0c      	cmp	r3, #12
 8006b76:	d82d      	bhi.n	8006bd4 <UART_SetConfig+0x164>
 8006b78:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <UART_SetConfig+0x110>)
 8006b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7e:	bf00      	nop
 8006b80:	08006bb5 	.word	0x08006bb5
 8006b84:	08006bd5 	.word	0x08006bd5
 8006b88:	08006bd5 	.word	0x08006bd5
 8006b8c:	08006bd5 	.word	0x08006bd5
 8006b90:	08006bc5 	.word	0x08006bc5
 8006b94:	08006bd5 	.word	0x08006bd5
 8006b98:	08006bd5 	.word	0x08006bd5
 8006b9c:	08006bd5 	.word	0x08006bd5
 8006ba0:	08006bbd 	.word	0x08006bbd
 8006ba4:	08006bd5 	.word	0x08006bd5
 8006ba8:	08006bd5 	.word	0x08006bd5
 8006bac:	08006bd5 	.word	0x08006bd5
 8006bb0:	08006bcd 	.word	0x08006bcd
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bba:	e0d8      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bc2:	e0d4      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bca:	e0d0      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006bcc:	2308      	movs	r3, #8
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd2:	e0cc      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bda:	e0c8      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a5e      	ldr	r2, [pc, #376]	; (8006d5c <UART_SetConfig+0x2ec>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d125      	bne.n	8006c32 <UART_SetConfig+0x1c2>
 8006be6:	4b5b      	ldr	r3, [pc, #364]	; (8006d54 <UART_SetConfig+0x2e4>)
 8006be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bf0:	2b30      	cmp	r3, #48	; 0x30
 8006bf2:	d016      	beq.n	8006c22 <UART_SetConfig+0x1b2>
 8006bf4:	2b30      	cmp	r3, #48	; 0x30
 8006bf6:	d818      	bhi.n	8006c2a <UART_SetConfig+0x1ba>
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d00a      	beq.n	8006c12 <UART_SetConfig+0x1a2>
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d814      	bhi.n	8006c2a <UART_SetConfig+0x1ba>
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <UART_SetConfig+0x19a>
 8006c04:	2b10      	cmp	r3, #16
 8006c06:	d008      	beq.n	8006c1a <UART_SetConfig+0x1aa>
 8006c08:	e00f      	b.n	8006c2a <UART_SetConfig+0x1ba>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c10:	e0ad      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006c12:	2302      	movs	r3, #2
 8006c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c18:	e0a9      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006c1a:	2304      	movs	r3, #4
 8006c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c20:	e0a5      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006c22:	2308      	movs	r3, #8
 8006c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c28:	e0a1      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006c2a:	2310      	movs	r3, #16
 8006c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c30:	e09d      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a4a      	ldr	r2, [pc, #296]	; (8006d60 <UART_SetConfig+0x2f0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d125      	bne.n	8006c88 <UART_SetConfig+0x218>
 8006c3c:	4b45      	ldr	r3, [pc, #276]	; (8006d54 <UART_SetConfig+0x2e4>)
 8006c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c46:	2bc0      	cmp	r3, #192	; 0xc0
 8006c48:	d016      	beq.n	8006c78 <UART_SetConfig+0x208>
 8006c4a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c4c:	d818      	bhi.n	8006c80 <UART_SetConfig+0x210>
 8006c4e:	2b80      	cmp	r3, #128	; 0x80
 8006c50:	d00a      	beq.n	8006c68 <UART_SetConfig+0x1f8>
 8006c52:	2b80      	cmp	r3, #128	; 0x80
 8006c54:	d814      	bhi.n	8006c80 <UART_SetConfig+0x210>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <UART_SetConfig+0x1f0>
 8006c5a:	2b40      	cmp	r3, #64	; 0x40
 8006c5c:	d008      	beq.n	8006c70 <UART_SetConfig+0x200>
 8006c5e:	e00f      	b.n	8006c80 <UART_SetConfig+0x210>
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c66:	e082      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6e:	e07e      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006c70:	2304      	movs	r3, #4
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c76:	e07a      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006c78:	2308      	movs	r3, #8
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7e:	e076      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006c80:	2310      	movs	r3, #16
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c86:	e072      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a35      	ldr	r2, [pc, #212]	; (8006d64 <UART_SetConfig+0x2f4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d12a      	bne.n	8006ce8 <UART_SetConfig+0x278>
 8006c92:	4b30      	ldr	r3, [pc, #192]	; (8006d54 <UART_SetConfig+0x2e4>)
 8006c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca0:	d01a      	beq.n	8006cd8 <UART_SetConfig+0x268>
 8006ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca6:	d81b      	bhi.n	8006ce0 <UART_SetConfig+0x270>
 8006ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cac:	d00c      	beq.n	8006cc8 <UART_SetConfig+0x258>
 8006cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb2:	d815      	bhi.n	8006ce0 <UART_SetConfig+0x270>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <UART_SetConfig+0x250>
 8006cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbc:	d008      	beq.n	8006cd0 <UART_SetConfig+0x260>
 8006cbe:	e00f      	b.n	8006ce0 <UART_SetConfig+0x270>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc6:	e052      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cce:	e04e      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd6:	e04a      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006cd8:	2308      	movs	r3, #8
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cde:	e046      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce6:	e042      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a17      	ldr	r2, [pc, #92]	; (8006d4c <UART_SetConfig+0x2dc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d13a      	bne.n	8006d68 <UART_SetConfig+0x2f8>
 8006cf2:	4b18      	ldr	r3, [pc, #96]	; (8006d54 <UART_SetConfig+0x2e4>)
 8006cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d00:	d01a      	beq.n	8006d38 <UART_SetConfig+0x2c8>
 8006d02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d06:	d81b      	bhi.n	8006d40 <UART_SetConfig+0x2d0>
 8006d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d0c:	d00c      	beq.n	8006d28 <UART_SetConfig+0x2b8>
 8006d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d12:	d815      	bhi.n	8006d40 <UART_SetConfig+0x2d0>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <UART_SetConfig+0x2b0>
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d1c:	d008      	beq.n	8006d30 <UART_SetConfig+0x2c0>
 8006d1e:	e00f      	b.n	8006d40 <UART_SetConfig+0x2d0>
 8006d20:	2300      	movs	r3, #0
 8006d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d26:	e022      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d2e:	e01e      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006d30:	2304      	movs	r3, #4
 8006d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d36:	e01a      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006d38:	2308      	movs	r3, #8
 8006d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3e:	e016      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006d40:	2310      	movs	r3, #16
 8006d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d46:	e012      	b.n	8006d6e <UART_SetConfig+0x2fe>
 8006d48:	cfff69f3 	.word	0xcfff69f3
 8006d4c:	40008000 	.word	0x40008000
 8006d50:	40013800 	.word	0x40013800
 8006d54:	40021000 	.word	0x40021000
 8006d58:	40004400 	.word	0x40004400
 8006d5c:	40004800 	.word	0x40004800
 8006d60:	40004c00 	.word	0x40004c00
 8006d64:	40005000 	.word	0x40005000
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4aae      	ldr	r2, [pc, #696]	; (800702c <UART_SetConfig+0x5bc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	f040 8097 	bne.w	8006ea8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	d823      	bhi.n	8006dca <UART_SetConfig+0x35a>
 8006d82:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <UART_SetConfig+0x318>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006dad 	.word	0x08006dad
 8006d8c:	08006dcb 	.word	0x08006dcb
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dcb 	.word	0x08006dcb
 8006d98:	08006dbb 	.word	0x08006dbb
 8006d9c:	08006dcb 	.word	0x08006dcb
 8006da0:	08006dcb 	.word	0x08006dcb
 8006da4:	08006dcb 	.word	0x08006dcb
 8006da8:	08006dc3 	.word	0x08006dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dac:	f7fe feca 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 8006db0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006db2:	e010      	b.n	8006dd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db4:	4b9e      	ldr	r3, [pc, #632]	; (8007030 <UART_SetConfig+0x5c0>)
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006db8:	e00d      	b.n	8006dd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dba:	f7fe fe2b 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 8006dbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dc0:	e009      	b.n	8006dd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dc8:	e005      	b.n	8006dd6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 8130 	beq.w	800703e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	4a94      	ldr	r2, [pc, #592]	; (8007034 <UART_SetConfig+0x5c4>)
 8006de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8006df0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d305      	bcc.n	8006e0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d903      	bls.n	8006e16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e14:	e113      	b.n	800703e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	2200      	movs	r2, #0
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	60fa      	str	r2, [r7, #12]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	4a84      	ldr	r2, [pc, #528]	; (8007034 <UART_SetConfig+0x5c4>)
 8006e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e38:	f7f9 fa32 	bl	80002a0 <__aeabi_uldivmod>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4610      	mov	r0, r2
 8006e42:	4619      	mov	r1, r3
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	020b      	lsls	r3, r1, #8
 8006e4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e52:	0202      	lsls	r2, r0, #8
 8006e54:	6979      	ldr	r1, [r7, #20]
 8006e56:	6849      	ldr	r1, [r1, #4]
 8006e58:	0849      	lsrs	r1, r1, #1
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	4605      	mov	r5, r0
 8006e60:	eb12 0804 	adds.w	r8, r2, r4
 8006e64:	eb43 0905 	adc.w	r9, r3, r5
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	469a      	mov	sl, r3
 8006e70:	4693      	mov	fp, r2
 8006e72:	4652      	mov	r2, sl
 8006e74:	465b      	mov	r3, fp
 8006e76:	4640      	mov	r0, r8
 8006e78:	4649      	mov	r1, r9
 8006e7a:	f7f9 fa11 	bl	80002a0 <__aeabi_uldivmod>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4613      	mov	r3, r2
 8006e84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e8c:	d308      	bcc.n	8006ea0 <UART_SetConfig+0x430>
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e94:	d204      	bcs.n	8006ea0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6a3a      	ldr	r2, [r7, #32]
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	e0ce      	b.n	800703e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ea6:	e0ca      	b.n	800703e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb0:	d166      	bne.n	8006f80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d827      	bhi.n	8006f0a <UART_SetConfig+0x49a>
 8006eba:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <UART_SetConfig+0x450>)
 8006ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec0:	08006ee5 	.word	0x08006ee5
 8006ec4:	08006eed 	.word	0x08006eed
 8006ec8:	08006ef5 	.word	0x08006ef5
 8006ecc:	08006f0b 	.word	0x08006f0b
 8006ed0:	08006efb 	.word	0x08006efb
 8006ed4:	08006f0b 	.word	0x08006f0b
 8006ed8:	08006f0b 	.word	0x08006f0b
 8006edc:	08006f0b 	.word	0x08006f0b
 8006ee0:	08006f03 	.word	0x08006f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee4:	f7fe fe2e 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 8006ee8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eea:	e014      	b.n	8006f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eec:	f7fe fe40 	bl	8005b70 <HAL_RCC_GetPCLK2Freq>
 8006ef0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ef2:	e010      	b.n	8006f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef4:	4b4e      	ldr	r3, [pc, #312]	; (8007030 <UART_SetConfig+0x5c0>)
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ef8:	e00d      	b.n	8006f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006efa:	f7fe fd8b 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 8006efe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f00:	e009      	b.n	8006f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f08:	e005      	b.n	8006f16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8090 	beq.w	800703e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	4a44      	ldr	r2, [pc, #272]	; (8007034 <UART_SetConfig+0x5c4>)
 8006f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f30:	005a      	lsls	r2, r3, #1
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	441a      	add	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f42:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2b0f      	cmp	r3, #15
 8006f48:	d916      	bls.n	8006f78 <UART_SetConfig+0x508>
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f50:	d212      	bcs.n	8006f78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f023 030f 	bic.w	r3, r3, #15
 8006f5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	085b      	lsrs	r3, r3, #1
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	8bfb      	ldrh	r3, [r7, #30]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	8bfa      	ldrh	r2, [r7, #30]
 8006f74:	60da      	str	r2, [r3, #12]
 8006f76:	e062      	b.n	800703e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f7e:	e05e      	b.n	800703e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d828      	bhi.n	8006fda <UART_SetConfig+0x56a>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <UART_SetConfig+0x520>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fb5 	.word	0x08006fb5
 8006f94:	08006fbd 	.word	0x08006fbd
 8006f98:	08006fc5 	.word	0x08006fc5
 8006f9c:	08006fdb 	.word	0x08006fdb
 8006fa0:	08006fcb 	.word	0x08006fcb
 8006fa4:	08006fdb 	.word	0x08006fdb
 8006fa8:	08006fdb 	.word	0x08006fdb
 8006fac:	08006fdb 	.word	0x08006fdb
 8006fb0:	08006fd3 	.word	0x08006fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb4:	f7fe fdc6 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 8006fb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fba:	e014      	b.n	8006fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fbc:	f7fe fdd8 	bl	8005b70 <HAL_RCC_GetPCLK2Freq>
 8006fc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fc2:	e010      	b.n	8006fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc4:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <UART_SetConfig+0x5c0>)
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fc8:	e00d      	b.n	8006fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fca:	f7fe fd23 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 8006fce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fd0:	e009      	b.n	8006fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fd8:	e005      	b.n	8006fe6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fe4:	bf00      	nop
    }

    if (pclk != 0U)
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d028      	beq.n	800703e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	4a10      	ldr	r2, [pc, #64]	; (8007034 <UART_SetConfig+0x5c4>)
 8006ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	085b      	lsrs	r3, r3, #1
 8007004:	441a      	add	r2, r3
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	2b0f      	cmp	r3, #15
 8007014:	d910      	bls.n	8007038 <UART_SetConfig+0x5c8>
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701c:	d20c      	bcs.n	8007038 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	b29a      	uxth	r2, r3
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60da      	str	r2, [r3, #12]
 8007028:	e009      	b.n	800703e <UART_SetConfig+0x5ce>
 800702a:	bf00      	nop
 800702c:	40008000 	.word	0x40008000
 8007030:	00f42400 	.word	0x00f42400
 8007034:	08008088 	.word	0x08008088
      }
      else
      {
        ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2201      	movs	r2, #1
 8007042:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2201      	movs	r2, #1
 800704a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2200      	movs	r2, #0
 8007052:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2200      	movs	r2, #0
 8007058:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800705a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800705e:	4618      	mov	r0, r3
 8007060:	3730      	adds	r7, #48	; 0x30
 8007062:	46bd      	mov	sp, r7
 8007064:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01a      	beq.n	800717e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007166:	d10a      	bne.n	800717e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	605a      	str	r2, [r3, #4]
  }
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b098      	sub	sp, #96	; 0x60
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071bc:	f7fa fef4 	bl	8001fa8 <HAL_GetTick>
 80071c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d12f      	bne.n	8007230 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071d8:	2200      	movs	r2, #0
 80071da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f88e 	bl	8007300 <UART_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d022      	beq.n	8007230 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007208:	647b      	str	r3, [r7, #68]	; 0x44
 800720a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800720e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007210:	e841 2300 	strex	r3, r2, [r1]
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1e6      	bne.n	80071ea <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e063      	b.n	80072f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b04      	cmp	r3, #4
 800723c:	d149      	bne.n	80072d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800723e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007246:	2200      	movs	r2, #0
 8007248:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f857 	bl	8007300 <UART_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d03c      	beq.n	80072d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	623b      	str	r3, [r7, #32]
   return(result);
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800726c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
 8007278:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800727c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e6      	bne.n	8007258 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3308      	adds	r3, #8
 8007290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	60fb      	str	r3, [r7, #12]
   return(result);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f023 0301 	bic.w	r3, r3, #1
 80072a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072aa:	61fa      	str	r2, [r7, #28]
 80072ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	69b9      	ldr	r1, [r7, #24]
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	617b      	str	r3, [r7, #20]
   return(result);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e5      	bne.n	800728a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e012      	b.n	80072f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3758      	adds	r7, #88	; 0x58
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	4613      	mov	r3, r2
 800730e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007310:	e049      	b.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d045      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731a:	f7fa fe45 	bl	8001fa8 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	429a      	cmp	r2, r3
 8007328:	d302      	bcc.n	8007330 <UART_WaitOnFlagUntilTimeout+0x30>
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e048      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d031      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b08      	cmp	r3, #8
 800734e:	d110      	bne.n	8007372 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2208      	movs	r2, #8
 8007356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f838 	bl	80073ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2208      	movs	r2, #8
 8007362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e029      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800737c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007380:	d111      	bne.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800738a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f81e 	bl	80073ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e00f      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4013      	ands	r3, r2
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	bf0c      	ite	eq
 80073b6:	2301      	moveq	r3, #1
 80073b8:	2300      	movne	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	461a      	mov	r2, r3
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d0a6      	beq.n	8007312 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b095      	sub	sp, #84	; 0x54
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f4:	643b      	str	r3, [r7, #64]	; 0x40
 80073f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e6      	bne.n	80073d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	61fb      	str	r3, [r7, #28]
   return(result);
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	64bb      	str	r3, [r7, #72]	; 0x48
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800742c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800742e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e3      	bne.n	8007408 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007444:	2b01      	cmp	r3, #1
 8007446:	d118      	bne.n	800747a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	60bb      	str	r3, [r7, #8]
   return(result);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f023 0310 	bic.w	r3, r3, #16
 800745c:	647b      	str	r3, [r7, #68]	; 0x44
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007466:	61bb      	str	r3, [r7, #24]
 8007468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	6979      	ldr	r1, [r7, #20]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	613b      	str	r3, [r7, #16]
   return(result);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e6      	bne.n	8007448 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800748e:	bf00      	nop
 8007490:	3754      	adds	r7, #84	; 0x54
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e027      	b.n	8007500 <HAL_UARTEx_DisableFifoMode+0x66>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2224      	movs	r2, #36	; 0x24
 80074bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0201 	bic.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007520:	2302      	movs	r3, #2
 8007522:	e02d      	b.n	8007580 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2224      	movs	r2, #36	; 0x24
 8007530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0201 	bic.w	r2, r2, #1
 800754a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f84f 	bl	8007604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800759c:	2302      	movs	r3, #2
 800759e:	e02d      	b.n	80075fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2224      	movs	r2, #36	; 0x24
 80075ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0201 	bic.w	r2, r2, #1
 80075c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f811 	bl	8007604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007610:	2b00      	cmp	r3, #0
 8007612:	d108      	bne.n	8007626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007624:	e031      	b.n	800768a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007626:	2308      	movs	r3, #8
 8007628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800762a:	2308      	movs	r3, #8
 800762c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	0e5b      	lsrs	r3, r3, #25
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	0f5b      	lsrs	r3, r3, #29
 8007646:	b2db      	uxtb	r3, r3
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800764e:	7bbb      	ldrb	r3, [r7, #14]
 8007650:	7b3a      	ldrb	r2, [r7, #12]
 8007652:	4911      	ldr	r1, [pc, #68]	; (8007698 <UARTEx_SetNbDataToProcess+0x94>)
 8007654:	5c8a      	ldrb	r2, [r1, r2]
 8007656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800765a:	7b3a      	ldrb	r2, [r7, #12]
 800765c:	490f      	ldr	r1, [pc, #60]	; (800769c <UARTEx_SetNbDataToProcess+0x98>)
 800765e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007660:	fb93 f3f2 	sdiv	r3, r3, r2
 8007664:	b29a      	uxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	7b7a      	ldrb	r2, [r7, #13]
 8007670:	4909      	ldr	r1, [pc, #36]	; (8007698 <UARTEx_SetNbDataToProcess+0x94>)
 8007672:	5c8a      	ldrb	r2, [r1, r2]
 8007674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007678:	7b7a      	ldrb	r2, [r7, #13]
 800767a:	4908      	ldr	r1, [pc, #32]	; (800769c <UARTEx_SetNbDataToProcess+0x98>)
 800767c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800767e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800768a:	bf00      	nop
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	080080a0 	.word	0x080080a0
 800769c:	080080a8 	.word	0x080080a8

080076a0 <sniprintf>:
 80076a0:	b40c      	push	{r2, r3}
 80076a2:	b530      	push	{r4, r5, lr}
 80076a4:	4b17      	ldr	r3, [pc, #92]	; (8007704 <sniprintf+0x64>)
 80076a6:	1e0c      	subs	r4, r1, #0
 80076a8:	681d      	ldr	r5, [r3, #0]
 80076aa:	b09d      	sub	sp, #116	; 0x74
 80076ac:	da08      	bge.n	80076c0 <sniprintf+0x20>
 80076ae:	238b      	movs	r3, #139	; 0x8b
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	f04f 30ff 	mov.w	r0, #4294967295
 80076b6:	b01d      	add	sp, #116	; 0x74
 80076b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076bc:	b002      	add	sp, #8
 80076be:	4770      	bx	lr
 80076c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80076c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076c8:	bf14      	ite	ne
 80076ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076ce:	4623      	moveq	r3, r4
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	9307      	str	r3, [sp, #28]
 80076d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076d8:	9002      	str	r0, [sp, #8]
 80076da:	9006      	str	r0, [sp, #24]
 80076dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076e2:	ab21      	add	r3, sp, #132	; 0x84
 80076e4:	a902      	add	r1, sp, #8
 80076e6:	4628      	mov	r0, r5
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	f000 f993 	bl	8007a14 <_svfiprintf_r>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	bfbc      	itt	lt
 80076f2:	238b      	movlt	r3, #139	; 0x8b
 80076f4:	602b      	strlt	r3, [r5, #0]
 80076f6:	2c00      	cmp	r4, #0
 80076f8:	d0dd      	beq.n	80076b6 <sniprintf+0x16>
 80076fa:	9b02      	ldr	r3, [sp, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	e7d9      	b.n	80076b6 <sniprintf+0x16>
 8007702:	bf00      	nop
 8007704:	200000f8 	.word	0x200000f8

08007708 <memset>:
 8007708:	4402      	add	r2, r0
 800770a:	4603      	mov	r3, r0
 800770c:	4293      	cmp	r3, r2
 800770e:	d100      	bne.n	8007712 <memset+0xa>
 8007710:	4770      	bx	lr
 8007712:	f803 1b01 	strb.w	r1, [r3], #1
 8007716:	e7f9      	b.n	800770c <memset+0x4>

08007718 <__errno>:
 8007718:	4b01      	ldr	r3, [pc, #4]	; (8007720 <__errno+0x8>)
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	200000f8 	.word	0x200000f8

08007724 <__libc_init_array>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	4d0d      	ldr	r5, [pc, #52]	; (800775c <__libc_init_array+0x38>)
 8007728:	4c0d      	ldr	r4, [pc, #52]	; (8007760 <__libc_init_array+0x3c>)
 800772a:	1b64      	subs	r4, r4, r5
 800772c:	10a4      	asrs	r4, r4, #2
 800772e:	2600      	movs	r6, #0
 8007730:	42a6      	cmp	r6, r4
 8007732:	d109      	bne.n	8007748 <__libc_init_array+0x24>
 8007734:	4d0b      	ldr	r5, [pc, #44]	; (8007764 <__libc_init_array+0x40>)
 8007736:	4c0c      	ldr	r4, [pc, #48]	; (8007768 <__libc_init_array+0x44>)
 8007738:	f000 fc6a 	bl	8008010 <_init>
 800773c:	1b64      	subs	r4, r4, r5
 800773e:	10a4      	asrs	r4, r4, #2
 8007740:	2600      	movs	r6, #0
 8007742:	42a6      	cmp	r6, r4
 8007744:	d105      	bne.n	8007752 <__libc_init_array+0x2e>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	f855 3b04 	ldr.w	r3, [r5], #4
 800774c:	4798      	blx	r3
 800774e:	3601      	adds	r6, #1
 8007750:	e7ee      	b.n	8007730 <__libc_init_array+0xc>
 8007752:	f855 3b04 	ldr.w	r3, [r5], #4
 8007756:	4798      	blx	r3
 8007758:	3601      	adds	r6, #1
 800775a:	e7f2      	b.n	8007742 <__libc_init_array+0x1e>
 800775c:	080080ec 	.word	0x080080ec
 8007760:	080080ec 	.word	0x080080ec
 8007764:	080080ec 	.word	0x080080ec
 8007768:	080080f0 	.word	0x080080f0

0800776c <__retarget_lock_acquire_recursive>:
 800776c:	4770      	bx	lr

0800776e <__retarget_lock_release_recursive>:
 800776e:	4770      	bx	lr

08007770 <_free_r>:
 8007770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007772:	2900      	cmp	r1, #0
 8007774:	d044      	beq.n	8007800 <_free_r+0x90>
 8007776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800777a:	9001      	str	r0, [sp, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f1a1 0404 	sub.w	r4, r1, #4
 8007782:	bfb8      	it	lt
 8007784:	18e4      	addlt	r4, r4, r3
 8007786:	f000 f8df 	bl	8007948 <__malloc_lock>
 800778a:	4a1e      	ldr	r2, [pc, #120]	; (8007804 <_free_r+0x94>)
 800778c:	9801      	ldr	r0, [sp, #4]
 800778e:	6813      	ldr	r3, [r2, #0]
 8007790:	b933      	cbnz	r3, 80077a0 <_free_r+0x30>
 8007792:	6063      	str	r3, [r4, #4]
 8007794:	6014      	str	r4, [r2, #0]
 8007796:	b003      	add	sp, #12
 8007798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800779c:	f000 b8da 	b.w	8007954 <__malloc_unlock>
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	d908      	bls.n	80077b6 <_free_r+0x46>
 80077a4:	6825      	ldr	r5, [r4, #0]
 80077a6:	1961      	adds	r1, r4, r5
 80077a8:	428b      	cmp	r3, r1
 80077aa:	bf01      	itttt	eq
 80077ac:	6819      	ldreq	r1, [r3, #0]
 80077ae:	685b      	ldreq	r3, [r3, #4]
 80077b0:	1949      	addeq	r1, r1, r5
 80077b2:	6021      	streq	r1, [r4, #0]
 80077b4:	e7ed      	b.n	8007792 <_free_r+0x22>
 80077b6:	461a      	mov	r2, r3
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	b10b      	cbz	r3, 80077c0 <_free_r+0x50>
 80077bc:	42a3      	cmp	r3, r4
 80077be:	d9fa      	bls.n	80077b6 <_free_r+0x46>
 80077c0:	6811      	ldr	r1, [r2, #0]
 80077c2:	1855      	adds	r5, r2, r1
 80077c4:	42a5      	cmp	r5, r4
 80077c6:	d10b      	bne.n	80077e0 <_free_r+0x70>
 80077c8:	6824      	ldr	r4, [r4, #0]
 80077ca:	4421      	add	r1, r4
 80077cc:	1854      	adds	r4, r2, r1
 80077ce:	42a3      	cmp	r3, r4
 80077d0:	6011      	str	r1, [r2, #0]
 80077d2:	d1e0      	bne.n	8007796 <_free_r+0x26>
 80077d4:	681c      	ldr	r4, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	6053      	str	r3, [r2, #4]
 80077da:	440c      	add	r4, r1
 80077dc:	6014      	str	r4, [r2, #0]
 80077de:	e7da      	b.n	8007796 <_free_r+0x26>
 80077e0:	d902      	bls.n	80077e8 <_free_r+0x78>
 80077e2:	230c      	movs	r3, #12
 80077e4:	6003      	str	r3, [r0, #0]
 80077e6:	e7d6      	b.n	8007796 <_free_r+0x26>
 80077e8:	6825      	ldr	r5, [r4, #0]
 80077ea:	1961      	adds	r1, r4, r5
 80077ec:	428b      	cmp	r3, r1
 80077ee:	bf04      	itt	eq
 80077f0:	6819      	ldreq	r1, [r3, #0]
 80077f2:	685b      	ldreq	r3, [r3, #4]
 80077f4:	6063      	str	r3, [r4, #4]
 80077f6:	bf04      	itt	eq
 80077f8:	1949      	addeq	r1, r1, r5
 80077fa:	6021      	streq	r1, [r4, #0]
 80077fc:	6054      	str	r4, [r2, #4]
 80077fe:	e7ca      	b.n	8007796 <_free_r+0x26>
 8007800:	b003      	add	sp, #12
 8007802:	bd30      	pop	{r4, r5, pc}
 8007804:	20000800 	.word	0x20000800

08007808 <sbrk_aligned>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	4e0e      	ldr	r6, [pc, #56]	; (8007844 <sbrk_aligned+0x3c>)
 800780c:	460c      	mov	r4, r1
 800780e:	6831      	ldr	r1, [r6, #0]
 8007810:	4605      	mov	r5, r0
 8007812:	b911      	cbnz	r1, 800781a <sbrk_aligned+0x12>
 8007814:	f000 fba6 	bl	8007f64 <_sbrk_r>
 8007818:	6030      	str	r0, [r6, #0]
 800781a:	4621      	mov	r1, r4
 800781c:	4628      	mov	r0, r5
 800781e:	f000 fba1 	bl	8007f64 <_sbrk_r>
 8007822:	1c43      	adds	r3, r0, #1
 8007824:	d00a      	beq.n	800783c <sbrk_aligned+0x34>
 8007826:	1cc4      	adds	r4, r0, #3
 8007828:	f024 0403 	bic.w	r4, r4, #3
 800782c:	42a0      	cmp	r0, r4
 800782e:	d007      	beq.n	8007840 <sbrk_aligned+0x38>
 8007830:	1a21      	subs	r1, r4, r0
 8007832:	4628      	mov	r0, r5
 8007834:	f000 fb96 	bl	8007f64 <_sbrk_r>
 8007838:	3001      	adds	r0, #1
 800783a:	d101      	bne.n	8007840 <sbrk_aligned+0x38>
 800783c:	f04f 34ff 	mov.w	r4, #4294967295
 8007840:	4620      	mov	r0, r4
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	20000804 	.word	0x20000804

08007848 <_malloc_r>:
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	1ccd      	adds	r5, r1, #3
 800784e:	f025 0503 	bic.w	r5, r5, #3
 8007852:	3508      	adds	r5, #8
 8007854:	2d0c      	cmp	r5, #12
 8007856:	bf38      	it	cc
 8007858:	250c      	movcc	r5, #12
 800785a:	2d00      	cmp	r5, #0
 800785c:	4607      	mov	r7, r0
 800785e:	db01      	blt.n	8007864 <_malloc_r+0x1c>
 8007860:	42a9      	cmp	r1, r5
 8007862:	d905      	bls.n	8007870 <_malloc_r+0x28>
 8007864:	230c      	movs	r3, #12
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	2600      	movs	r6, #0
 800786a:	4630      	mov	r0, r6
 800786c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007870:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007944 <_malloc_r+0xfc>
 8007874:	f000 f868 	bl	8007948 <__malloc_lock>
 8007878:	f8d8 3000 	ldr.w	r3, [r8]
 800787c:	461c      	mov	r4, r3
 800787e:	bb5c      	cbnz	r4, 80078d8 <_malloc_r+0x90>
 8007880:	4629      	mov	r1, r5
 8007882:	4638      	mov	r0, r7
 8007884:	f7ff ffc0 	bl	8007808 <sbrk_aligned>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	4604      	mov	r4, r0
 800788c:	d155      	bne.n	800793a <_malloc_r+0xf2>
 800788e:	f8d8 4000 	ldr.w	r4, [r8]
 8007892:	4626      	mov	r6, r4
 8007894:	2e00      	cmp	r6, #0
 8007896:	d145      	bne.n	8007924 <_malloc_r+0xdc>
 8007898:	2c00      	cmp	r4, #0
 800789a:	d048      	beq.n	800792e <_malloc_r+0xe6>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	4631      	mov	r1, r6
 80078a0:	4638      	mov	r0, r7
 80078a2:	eb04 0903 	add.w	r9, r4, r3
 80078a6:	f000 fb5d 	bl	8007f64 <_sbrk_r>
 80078aa:	4581      	cmp	r9, r0
 80078ac:	d13f      	bne.n	800792e <_malloc_r+0xe6>
 80078ae:	6821      	ldr	r1, [r4, #0]
 80078b0:	1a6d      	subs	r5, r5, r1
 80078b2:	4629      	mov	r1, r5
 80078b4:	4638      	mov	r0, r7
 80078b6:	f7ff ffa7 	bl	8007808 <sbrk_aligned>
 80078ba:	3001      	adds	r0, #1
 80078bc:	d037      	beq.n	800792e <_malloc_r+0xe6>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	442b      	add	r3, r5
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	f8d8 3000 	ldr.w	r3, [r8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d038      	beq.n	800793e <_malloc_r+0xf6>
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	42a2      	cmp	r2, r4
 80078d0:	d12b      	bne.n	800792a <_malloc_r+0xe2>
 80078d2:	2200      	movs	r2, #0
 80078d4:	605a      	str	r2, [r3, #4]
 80078d6:	e00f      	b.n	80078f8 <_malloc_r+0xb0>
 80078d8:	6822      	ldr	r2, [r4, #0]
 80078da:	1b52      	subs	r2, r2, r5
 80078dc:	d41f      	bmi.n	800791e <_malloc_r+0xd6>
 80078de:	2a0b      	cmp	r2, #11
 80078e0:	d917      	bls.n	8007912 <_malloc_r+0xca>
 80078e2:	1961      	adds	r1, r4, r5
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	6025      	str	r5, [r4, #0]
 80078e8:	bf18      	it	ne
 80078ea:	6059      	strne	r1, [r3, #4]
 80078ec:	6863      	ldr	r3, [r4, #4]
 80078ee:	bf08      	it	eq
 80078f0:	f8c8 1000 	streq.w	r1, [r8]
 80078f4:	5162      	str	r2, [r4, r5]
 80078f6:	604b      	str	r3, [r1, #4]
 80078f8:	4638      	mov	r0, r7
 80078fa:	f104 060b 	add.w	r6, r4, #11
 80078fe:	f000 f829 	bl	8007954 <__malloc_unlock>
 8007902:	f026 0607 	bic.w	r6, r6, #7
 8007906:	1d23      	adds	r3, r4, #4
 8007908:	1af2      	subs	r2, r6, r3
 800790a:	d0ae      	beq.n	800786a <_malloc_r+0x22>
 800790c:	1b9b      	subs	r3, r3, r6
 800790e:	50a3      	str	r3, [r4, r2]
 8007910:	e7ab      	b.n	800786a <_malloc_r+0x22>
 8007912:	42a3      	cmp	r3, r4
 8007914:	6862      	ldr	r2, [r4, #4]
 8007916:	d1dd      	bne.n	80078d4 <_malloc_r+0x8c>
 8007918:	f8c8 2000 	str.w	r2, [r8]
 800791c:	e7ec      	b.n	80078f8 <_malloc_r+0xb0>
 800791e:	4623      	mov	r3, r4
 8007920:	6864      	ldr	r4, [r4, #4]
 8007922:	e7ac      	b.n	800787e <_malloc_r+0x36>
 8007924:	4634      	mov	r4, r6
 8007926:	6876      	ldr	r6, [r6, #4]
 8007928:	e7b4      	b.n	8007894 <_malloc_r+0x4c>
 800792a:	4613      	mov	r3, r2
 800792c:	e7cc      	b.n	80078c8 <_malloc_r+0x80>
 800792e:	230c      	movs	r3, #12
 8007930:	603b      	str	r3, [r7, #0]
 8007932:	4638      	mov	r0, r7
 8007934:	f000 f80e 	bl	8007954 <__malloc_unlock>
 8007938:	e797      	b.n	800786a <_malloc_r+0x22>
 800793a:	6025      	str	r5, [r4, #0]
 800793c:	e7dc      	b.n	80078f8 <_malloc_r+0xb0>
 800793e:	605b      	str	r3, [r3, #4]
 8007940:	deff      	udf	#255	; 0xff
 8007942:	bf00      	nop
 8007944:	20000800 	.word	0x20000800

08007948 <__malloc_lock>:
 8007948:	4801      	ldr	r0, [pc, #4]	; (8007950 <__malloc_lock+0x8>)
 800794a:	f7ff bf0f 	b.w	800776c <__retarget_lock_acquire_recursive>
 800794e:	bf00      	nop
 8007950:	200007fc 	.word	0x200007fc

08007954 <__malloc_unlock>:
 8007954:	4801      	ldr	r0, [pc, #4]	; (800795c <__malloc_unlock+0x8>)
 8007956:	f7ff bf0a 	b.w	800776e <__retarget_lock_release_recursive>
 800795a:	bf00      	nop
 800795c:	200007fc 	.word	0x200007fc

08007960 <__ssputs_r>:
 8007960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007964:	688e      	ldr	r6, [r1, #8]
 8007966:	461f      	mov	r7, r3
 8007968:	42be      	cmp	r6, r7
 800796a:	680b      	ldr	r3, [r1, #0]
 800796c:	4682      	mov	sl, r0
 800796e:	460c      	mov	r4, r1
 8007970:	4690      	mov	r8, r2
 8007972:	d82c      	bhi.n	80079ce <__ssputs_r+0x6e>
 8007974:	898a      	ldrh	r2, [r1, #12]
 8007976:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800797a:	d026      	beq.n	80079ca <__ssputs_r+0x6a>
 800797c:	6965      	ldr	r5, [r4, #20]
 800797e:	6909      	ldr	r1, [r1, #16]
 8007980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007984:	eba3 0901 	sub.w	r9, r3, r1
 8007988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800798c:	1c7b      	adds	r3, r7, #1
 800798e:	444b      	add	r3, r9
 8007990:	106d      	asrs	r5, r5, #1
 8007992:	429d      	cmp	r5, r3
 8007994:	bf38      	it	cc
 8007996:	461d      	movcc	r5, r3
 8007998:	0553      	lsls	r3, r2, #21
 800799a:	d527      	bpl.n	80079ec <__ssputs_r+0x8c>
 800799c:	4629      	mov	r1, r5
 800799e:	f7ff ff53 	bl	8007848 <_malloc_r>
 80079a2:	4606      	mov	r6, r0
 80079a4:	b360      	cbz	r0, 8007a00 <__ssputs_r+0xa0>
 80079a6:	6921      	ldr	r1, [r4, #16]
 80079a8:	464a      	mov	r2, r9
 80079aa:	f000 faeb 	bl	8007f84 <memcpy>
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	6126      	str	r6, [r4, #16]
 80079bc:	6165      	str	r5, [r4, #20]
 80079be:	444e      	add	r6, r9
 80079c0:	eba5 0509 	sub.w	r5, r5, r9
 80079c4:	6026      	str	r6, [r4, #0]
 80079c6:	60a5      	str	r5, [r4, #8]
 80079c8:	463e      	mov	r6, r7
 80079ca:	42be      	cmp	r6, r7
 80079cc:	d900      	bls.n	80079d0 <__ssputs_r+0x70>
 80079ce:	463e      	mov	r6, r7
 80079d0:	6820      	ldr	r0, [r4, #0]
 80079d2:	4632      	mov	r2, r6
 80079d4:	4641      	mov	r1, r8
 80079d6:	f000 faab 	bl	8007f30 <memmove>
 80079da:	68a3      	ldr	r3, [r4, #8]
 80079dc:	1b9b      	subs	r3, r3, r6
 80079de:	60a3      	str	r3, [r4, #8]
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	4433      	add	r3, r6
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	2000      	movs	r0, #0
 80079e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ec:	462a      	mov	r2, r5
 80079ee:	f000 fad7 	bl	8007fa0 <_realloc_r>
 80079f2:	4606      	mov	r6, r0
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d1e0      	bne.n	80079ba <__ssputs_r+0x5a>
 80079f8:	6921      	ldr	r1, [r4, #16]
 80079fa:	4650      	mov	r0, sl
 80079fc:	f7ff feb8 	bl	8007770 <_free_r>
 8007a00:	230c      	movs	r3, #12
 8007a02:	f8ca 3000 	str.w	r3, [sl]
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a12:	e7e9      	b.n	80079e8 <__ssputs_r+0x88>

08007a14 <_svfiprintf_r>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	4698      	mov	r8, r3
 8007a1a:	898b      	ldrh	r3, [r1, #12]
 8007a1c:	061b      	lsls	r3, r3, #24
 8007a1e:	b09d      	sub	sp, #116	; 0x74
 8007a20:	4607      	mov	r7, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	4614      	mov	r4, r2
 8007a26:	d50e      	bpl.n	8007a46 <_svfiprintf_r+0x32>
 8007a28:	690b      	ldr	r3, [r1, #16]
 8007a2a:	b963      	cbnz	r3, 8007a46 <_svfiprintf_r+0x32>
 8007a2c:	2140      	movs	r1, #64	; 0x40
 8007a2e:	f7ff ff0b 	bl	8007848 <_malloc_r>
 8007a32:	6028      	str	r0, [r5, #0]
 8007a34:	6128      	str	r0, [r5, #16]
 8007a36:	b920      	cbnz	r0, 8007a42 <_svfiprintf_r+0x2e>
 8007a38:	230c      	movs	r3, #12
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e0d0      	b.n	8007be4 <_svfiprintf_r+0x1d0>
 8007a42:	2340      	movs	r3, #64	; 0x40
 8007a44:	616b      	str	r3, [r5, #20]
 8007a46:	2300      	movs	r3, #0
 8007a48:	9309      	str	r3, [sp, #36]	; 0x24
 8007a4a:	2320      	movs	r3, #32
 8007a4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a54:	2330      	movs	r3, #48	; 0x30
 8007a56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007bfc <_svfiprintf_r+0x1e8>
 8007a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a5e:	f04f 0901 	mov.w	r9, #1
 8007a62:	4623      	mov	r3, r4
 8007a64:	469a      	mov	sl, r3
 8007a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a6a:	b10a      	cbz	r2, 8007a70 <_svfiprintf_r+0x5c>
 8007a6c:	2a25      	cmp	r2, #37	; 0x25
 8007a6e:	d1f9      	bne.n	8007a64 <_svfiprintf_r+0x50>
 8007a70:	ebba 0b04 	subs.w	fp, sl, r4
 8007a74:	d00b      	beq.n	8007a8e <_svfiprintf_r+0x7a>
 8007a76:	465b      	mov	r3, fp
 8007a78:	4622      	mov	r2, r4
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	f7ff ff6f 	bl	8007960 <__ssputs_r>
 8007a82:	3001      	adds	r0, #1
 8007a84:	f000 80a9 	beq.w	8007bda <_svfiprintf_r+0x1c6>
 8007a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a8a:	445a      	add	r2, fp
 8007a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 80a1 	beq.w	8007bda <_svfiprintf_r+0x1c6>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aa2:	f10a 0a01 	add.w	sl, sl, #1
 8007aa6:	9304      	str	r3, [sp, #16]
 8007aa8:	9307      	str	r3, [sp, #28]
 8007aaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aae:	931a      	str	r3, [sp, #104]	; 0x68
 8007ab0:	4654      	mov	r4, sl
 8007ab2:	2205      	movs	r2, #5
 8007ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab8:	4850      	ldr	r0, [pc, #320]	; (8007bfc <_svfiprintf_r+0x1e8>)
 8007aba:	f7f8 fba1 	bl	8000200 <memchr>
 8007abe:	9a04      	ldr	r2, [sp, #16]
 8007ac0:	b9d8      	cbnz	r0, 8007afa <_svfiprintf_r+0xe6>
 8007ac2:	06d0      	lsls	r0, r2, #27
 8007ac4:	bf44      	itt	mi
 8007ac6:	2320      	movmi	r3, #32
 8007ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007acc:	0711      	lsls	r1, r2, #28
 8007ace:	bf44      	itt	mi
 8007ad0:	232b      	movmi	r3, #43	; 0x2b
 8007ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8007ada:	2b2a      	cmp	r3, #42	; 0x2a
 8007adc:	d015      	beq.n	8007b0a <_svfiprintf_r+0xf6>
 8007ade:	9a07      	ldr	r2, [sp, #28]
 8007ae0:	4654      	mov	r4, sl
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	f04f 0c0a 	mov.w	ip, #10
 8007ae8:	4621      	mov	r1, r4
 8007aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aee:	3b30      	subs	r3, #48	; 0x30
 8007af0:	2b09      	cmp	r3, #9
 8007af2:	d94d      	bls.n	8007b90 <_svfiprintf_r+0x17c>
 8007af4:	b1b0      	cbz	r0, 8007b24 <_svfiprintf_r+0x110>
 8007af6:	9207      	str	r2, [sp, #28]
 8007af8:	e014      	b.n	8007b24 <_svfiprintf_r+0x110>
 8007afa:	eba0 0308 	sub.w	r3, r0, r8
 8007afe:	fa09 f303 	lsl.w	r3, r9, r3
 8007b02:	4313      	orrs	r3, r2
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	46a2      	mov	sl, r4
 8007b08:	e7d2      	b.n	8007ab0 <_svfiprintf_r+0x9c>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	1d19      	adds	r1, r3, #4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	9103      	str	r1, [sp, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bfbb      	ittet	lt
 8007b16:	425b      	neglt	r3, r3
 8007b18:	f042 0202 	orrlt.w	r2, r2, #2
 8007b1c:	9307      	strge	r3, [sp, #28]
 8007b1e:	9307      	strlt	r3, [sp, #28]
 8007b20:	bfb8      	it	lt
 8007b22:	9204      	strlt	r2, [sp, #16]
 8007b24:	7823      	ldrb	r3, [r4, #0]
 8007b26:	2b2e      	cmp	r3, #46	; 0x2e
 8007b28:	d10c      	bne.n	8007b44 <_svfiprintf_r+0x130>
 8007b2a:	7863      	ldrb	r3, [r4, #1]
 8007b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2e:	d134      	bne.n	8007b9a <_svfiprintf_r+0x186>
 8007b30:	9b03      	ldr	r3, [sp, #12]
 8007b32:	1d1a      	adds	r2, r3, #4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	9203      	str	r2, [sp, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bfb8      	it	lt
 8007b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b40:	3402      	adds	r4, #2
 8007b42:	9305      	str	r3, [sp, #20]
 8007b44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007c0c <_svfiprintf_r+0x1f8>
 8007b48:	7821      	ldrb	r1, [r4, #0]
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	4650      	mov	r0, sl
 8007b4e:	f7f8 fb57 	bl	8000200 <memchr>
 8007b52:	b138      	cbz	r0, 8007b64 <_svfiprintf_r+0x150>
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	eba0 000a 	sub.w	r0, r0, sl
 8007b5a:	2240      	movs	r2, #64	; 0x40
 8007b5c:	4082      	lsls	r2, r0
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	3401      	adds	r4, #1
 8007b62:	9304      	str	r3, [sp, #16]
 8007b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b68:	4825      	ldr	r0, [pc, #148]	; (8007c00 <_svfiprintf_r+0x1ec>)
 8007b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b6e:	2206      	movs	r2, #6
 8007b70:	f7f8 fb46 	bl	8000200 <memchr>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d038      	beq.n	8007bea <_svfiprintf_r+0x1d6>
 8007b78:	4b22      	ldr	r3, [pc, #136]	; (8007c04 <_svfiprintf_r+0x1f0>)
 8007b7a:	bb1b      	cbnz	r3, 8007bc4 <_svfiprintf_r+0x1b0>
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	3307      	adds	r3, #7
 8007b80:	f023 0307 	bic.w	r3, r3, #7
 8007b84:	3308      	adds	r3, #8
 8007b86:	9303      	str	r3, [sp, #12]
 8007b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b8a:	4433      	add	r3, r6
 8007b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8e:	e768      	b.n	8007a62 <_svfiprintf_r+0x4e>
 8007b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b94:	460c      	mov	r4, r1
 8007b96:	2001      	movs	r0, #1
 8007b98:	e7a6      	b.n	8007ae8 <_svfiprintf_r+0xd4>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	3401      	adds	r4, #1
 8007b9e:	9305      	str	r3, [sp, #20]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	f04f 0c0a 	mov.w	ip, #10
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bac:	3a30      	subs	r2, #48	; 0x30
 8007bae:	2a09      	cmp	r2, #9
 8007bb0:	d903      	bls.n	8007bba <_svfiprintf_r+0x1a6>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0c6      	beq.n	8007b44 <_svfiprintf_r+0x130>
 8007bb6:	9105      	str	r1, [sp, #20]
 8007bb8:	e7c4      	b.n	8007b44 <_svfiprintf_r+0x130>
 8007bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e7f0      	b.n	8007ba6 <_svfiprintf_r+0x192>
 8007bc4:	ab03      	add	r3, sp, #12
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	462a      	mov	r2, r5
 8007bca:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <_svfiprintf_r+0x1f4>)
 8007bcc:	a904      	add	r1, sp, #16
 8007bce:	4638      	mov	r0, r7
 8007bd0:	f3af 8000 	nop.w
 8007bd4:	1c42      	adds	r2, r0, #1
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	d1d6      	bne.n	8007b88 <_svfiprintf_r+0x174>
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	065b      	lsls	r3, r3, #25
 8007bde:	f53f af2d 	bmi.w	8007a3c <_svfiprintf_r+0x28>
 8007be2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007be4:	b01d      	add	sp, #116	; 0x74
 8007be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bea:	ab03      	add	r3, sp, #12
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	462a      	mov	r2, r5
 8007bf0:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <_svfiprintf_r+0x1f4>)
 8007bf2:	a904      	add	r1, sp, #16
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	f000 f879 	bl	8007cec <_printf_i>
 8007bfa:	e7eb      	b.n	8007bd4 <_svfiprintf_r+0x1c0>
 8007bfc:	080080b0 	.word	0x080080b0
 8007c00:	080080ba 	.word	0x080080ba
 8007c04:	00000000 	.word	0x00000000
 8007c08:	08007961 	.word	0x08007961
 8007c0c:	080080b6 	.word	0x080080b6

08007c10 <_printf_common>:
 8007c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	4616      	mov	r6, r2
 8007c16:	4699      	mov	r9, r3
 8007c18:	688a      	ldr	r2, [r1, #8]
 8007c1a:	690b      	ldr	r3, [r1, #16]
 8007c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c20:	4293      	cmp	r3, r2
 8007c22:	bfb8      	it	lt
 8007c24:	4613      	movlt	r3, r2
 8007c26:	6033      	str	r3, [r6, #0]
 8007c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	b10a      	cbz	r2, 8007c36 <_printf_common+0x26>
 8007c32:	3301      	adds	r3, #1
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	0699      	lsls	r1, r3, #26
 8007c3a:	bf42      	ittt	mi
 8007c3c:	6833      	ldrmi	r3, [r6, #0]
 8007c3e:	3302      	addmi	r3, #2
 8007c40:	6033      	strmi	r3, [r6, #0]
 8007c42:	6825      	ldr	r5, [r4, #0]
 8007c44:	f015 0506 	ands.w	r5, r5, #6
 8007c48:	d106      	bne.n	8007c58 <_printf_common+0x48>
 8007c4a:	f104 0a19 	add.w	sl, r4, #25
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	6832      	ldr	r2, [r6, #0]
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	42ab      	cmp	r3, r5
 8007c56:	dc26      	bgt.n	8007ca6 <_printf_common+0x96>
 8007c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c5c:	1e13      	subs	r3, r2, #0
 8007c5e:	6822      	ldr	r2, [r4, #0]
 8007c60:	bf18      	it	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	0692      	lsls	r2, r2, #26
 8007c66:	d42b      	bmi.n	8007cc0 <_printf_common+0xb0>
 8007c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	4638      	mov	r0, r7
 8007c70:	47c0      	blx	r8
 8007c72:	3001      	adds	r0, #1
 8007c74:	d01e      	beq.n	8007cb4 <_printf_common+0xa4>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	6922      	ldr	r2, [r4, #16]
 8007c7a:	f003 0306 	and.w	r3, r3, #6
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	bf02      	ittt	eq
 8007c82:	68e5      	ldreq	r5, [r4, #12]
 8007c84:	6833      	ldreq	r3, [r6, #0]
 8007c86:	1aed      	subeq	r5, r5, r3
 8007c88:	68a3      	ldr	r3, [r4, #8]
 8007c8a:	bf0c      	ite	eq
 8007c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c90:	2500      	movne	r5, #0
 8007c92:	4293      	cmp	r3, r2
 8007c94:	bfc4      	itt	gt
 8007c96:	1a9b      	subgt	r3, r3, r2
 8007c98:	18ed      	addgt	r5, r5, r3
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	341a      	adds	r4, #26
 8007c9e:	42b5      	cmp	r5, r6
 8007ca0:	d11a      	bne.n	8007cd8 <_printf_common+0xc8>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e008      	b.n	8007cb8 <_printf_common+0xa8>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	4652      	mov	r2, sl
 8007caa:	4649      	mov	r1, r9
 8007cac:	4638      	mov	r0, r7
 8007cae:	47c0      	blx	r8
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d103      	bne.n	8007cbc <_printf_common+0xac>
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	e7c6      	b.n	8007c4e <_printf_common+0x3e>
 8007cc0:	18e1      	adds	r1, r4, r3
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	2030      	movs	r0, #48	; 0x30
 8007cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cca:	4422      	add	r2, r4
 8007ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cd4:	3302      	adds	r3, #2
 8007cd6:	e7c7      	b.n	8007c68 <_printf_common+0x58>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4622      	mov	r2, r4
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4638      	mov	r0, r7
 8007ce0:	47c0      	blx	r8
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d0e6      	beq.n	8007cb4 <_printf_common+0xa4>
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	e7d9      	b.n	8007c9e <_printf_common+0x8e>
	...

08007cec <_printf_i>:
 8007cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	7e0f      	ldrb	r7, [r1, #24]
 8007cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cf4:	2f78      	cmp	r7, #120	; 0x78
 8007cf6:	4691      	mov	r9, r2
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	469a      	mov	sl, r3
 8007cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d02:	d807      	bhi.n	8007d14 <_printf_i+0x28>
 8007d04:	2f62      	cmp	r7, #98	; 0x62
 8007d06:	d80a      	bhi.n	8007d1e <_printf_i+0x32>
 8007d08:	2f00      	cmp	r7, #0
 8007d0a:	f000 80d4 	beq.w	8007eb6 <_printf_i+0x1ca>
 8007d0e:	2f58      	cmp	r7, #88	; 0x58
 8007d10:	f000 80c0 	beq.w	8007e94 <_printf_i+0x1a8>
 8007d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d1c:	e03a      	b.n	8007d94 <_printf_i+0xa8>
 8007d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d22:	2b15      	cmp	r3, #21
 8007d24:	d8f6      	bhi.n	8007d14 <_printf_i+0x28>
 8007d26:	a101      	add	r1, pc, #4	; (adr r1, 8007d2c <_printf_i+0x40>)
 8007d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d2c:	08007d85 	.word	0x08007d85
 8007d30:	08007d99 	.word	0x08007d99
 8007d34:	08007d15 	.word	0x08007d15
 8007d38:	08007d15 	.word	0x08007d15
 8007d3c:	08007d15 	.word	0x08007d15
 8007d40:	08007d15 	.word	0x08007d15
 8007d44:	08007d99 	.word	0x08007d99
 8007d48:	08007d15 	.word	0x08007d15
 8007d4c:	08007d15 	.word	0x08007d15
 8007d50:	08007d15 	.word	0x08007d15
 8007d54:	08007d15 	.word	0x08007d15
 8007d58:	08007e9d 	.word	0x08007e9d
 8007d5c:	08007dc5 	.word	0x08007dc5
 8007d60:	08007e57 	.word	0x08007e57
 8007d64:	08007d15 	.word	0x08007d15
 8007d68:	08007d15 	.word	0x08007d15
 8007d6c:	08007ebf 	.word	0x08007ebf
 8007d70:	08007d15 	.word	0x08007d15
 8007d74:	08007dc5 	.word	0x08007dc5
 8007d78:	08007d15 	.word	0x08007d15
 8007d7c:	08007d15 	.word	0x08007d15
 8007d80:	08007e5f 	.word	0x08007e5f
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	1d1a      	adds	r2, r3, #4
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	602a      	str	r2, [r5, #0]
 8007d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d94:	2301      	movs	r3, #1
 8007d96:	e09f      	b.n	8007ed8 <_printf_i+0x1ec>
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	0607      	lsls	r7, r0, #24
 8007d9e:	f103 0104 	add.w	r1, r3, #4
 8007da2:	6029      	str	r1, [r5, #0]
 8007da4:	d501      	bpl.n	8007daa <_printf_i+0xbe>
 8007da6:	681e      	ldr	r6, [r3, #0]
 8007da8:	e003      	b.n	8007db2 <_printf_i+0xc6>
 8007daa:	0646      	lsls	r6, r0, #25
 8007dac:	d5fb      	bpl.n	8007da6 <_printf_i+0xba>
 8007dae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007db2:	2e00      	cmp	r6, #0
 8007db4:	da03      	bge.n	8007dbe <_printf_i+0xd2>
 8007db6:	232d      	movs	r3, #45	; 0x2d
 8007db8:	4276      	negs	r6, r6
 8007dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dbe:	485a      	ldr	r0, [pc, #360]	; (8007f28 <_printf_i+0x23c>)
 8007dc0:	230a      	movs	r3, #10
 8007dc2:	e012      	b.n	8007dea <_printf_i+0xfe>
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	6820      	ldr	r0, [r4, #0]
 8007dc8:	1d19      	adds	r1, r3, #4
 8007dca:	6029      	str	r1, [r5, #0]
 8007dcc:	0605      	lsls	r5, r0, #24
 8007dce:	d501      	bpl.n	8007dd4 <_printf_i+0xe8>
 8007dd0:	681e      	ldr	r6, [r3, #0]
 8007dd2:	e002      	b.n	8007dda <_printf_i+0xee>
 8007dd4:	0641      	lsls	r1, r0, #25
 8007dd6:	d5fb      	bpl.n	8007dd0 <_printf_i+0xe4>
 8007dd8:	881e      	ldrh	r6, [r3, #0]
 8007dda:	4853      	ldr	r0, [pc, #332]	; (8007f28 <_printf_i+0x23c>)
 8007ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8007dde:	bf0c      	ite	eq
 8007de0:	2308      	moveq	r3, #8
 8007de2:	230a      	movne	r3, #10
 8007de4:	2100      	movs	r1, #0
 8007de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dea:	6865      	ldr	r5, [r4, #4]
 8007dec:	60a5      	str	r5, [r4, #8]
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	bfa2      	ittt	ge
 8007df2:	6821      	ldrge	r1, [r4, #0]
 8007df4:	f021 0104 	bicge.w	r1, r1, #4
 8007df8:	6021      	strge	r1, [r4, #0]
 8007dfa:	b90e      	cbnz	r6, 8007e00 <_printf_i+0x114>
 8007dfc:	2d00      	cmp	r5, #0
 8007dfe:	d04b      	beq.n	8007e98 <_printf_i+0x1ac>
 8007e00:	4615      	mov	r5, r2
 8007e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e06:	fb03 6711 	mls	r7, r3, r1, r6
 8007e0a:	5dc7      	ldrb	r7, [r0, r7]
 8007e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e10:	4637      	mov	r7, r6
 8007e12:	42bb      	cmp	r3, r7
 8007e14:	460e      	mov	r6, r1
 8007e16:	d9f4      	bls.n	8007e02 <_printf_i+0x116>
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d10b      	bne.n	8007e34 <_printf_i+0x148>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	07de      	lsls	r6, r3, #31
 8007e20:	d508      	bpl.n	8007e34 <_printf_i+0x148>
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	6861      	ldr	r1, [r4, #4]
 8007e26:	4299      	cmp	r1, r3
 8007e28:	bfde      	ittt	le
 8007e2a:	2330      	movle	r3, #48	; 0x30
 8007e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e34:	1b52      	subs	r2, r2, r5
 8007e36:	6122      	str	r2, [r4, #16]
 8007e38:	f8cd a000 	str.w	sl, [sp]
 8007e3c:	464b      	mov	r3, r9
 8007e3e:	aa03      	add	r2, sp, #12
 8007e40:	4621      	mov	r1, r4
 8007e42:	4640      	mov	r0, r8
 8007e44:	f7ff fee4 	bl	8007c10 <_printf_common>
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d14a      	bne.n	8007ee2 <_printf_i+0x1f6>
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	b004      	add	sp, #16
 8007e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	f043 0320 	orr.w	r3, r3, #32
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	4833      	ldr	r0, [pc, #204]	; (8007f2c <_printf_i+0x240>)
 8007e60:	2778      	movs	r7, #120	; 0x78
 8007e62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	6829      	ldr	r1, [r5, #0]
 8007e6a:	061f      	lsls	r7, r3, #24
 8007e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e70:	d402      	bmi.n	8007e78 <_printf_i+0x18c>
 8007e72:	065f      	lsls	r7, r3, #25
 8007e74:	bf48      	it	mi
 8007e76:	b2b6      	uxthmi	r6, r6
 8007e78:	07df      	lsls	r7, r3, #31
 8007e7a:	bf48      	it	mi
 8007e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8007e80:	6029      	str	r1, [r5, #0]
 8007e82:	bf48      	it	mi
 8007e84:	6023      	strmi	r3, [r4, #0]
 8007e86:	b91e      	cbnz	r6, 8007e90 <_printf_i+0x1a4>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	f023 0320 	bic.w	r3, r3, #32
 8007e8e:	6023      	str	r3, [r4, #0]
 8007e90:	2310      	movs	r3, #16
 8007e92:	e7a7      	b.n	8007de4 <_printf_i+0xf8>
 8007e94:	4824      	ldr	r0, [pc, #144]	; (8007f28 <_printf_i+0x23c>)
 8007e96:	e7e4      	b.n	8007e62 <_printf_i+0x176>
 8007e98:	4615      	mov	r5, r2
 8007e9a:	e7bd      	b.n	8007e18 <_printf_i+0x12c>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	6826      	ldr	r6, [r4, #0]
 8007ea0:	6961      	ldr	r1, [r4, #20]
 8007ea2:	1d18      	adds	r0, r3, #4
 8007ea4:	6028      	str	r0, [r5, #0]
 8007ea6:	0635      	lsls	r5, r6, #24
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	d501      	bpl.n	8007eb0 <_printf_i+0x1c4>
 8007eac:	6019      	str	r1, [r3, #0]
 8007eae:	e002      	b.n	8007eb6 <_printf_i+0x1ca>
 8007eb0:	0670      	lsls	r0, r6, #25
 8007eb2:	d5fb      	bpl.n	8007eac <_printf_i+0x1c0>
 8007eb4:	8019      	strh	r1, [r3, #0]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	4615      	mov	r5, r2
 8007ebc:	e7bc      	b.n	8007e38 <_printf_i+0x14c>
 8007ebe:	682b      	ldr	r3, [r5, #0]
 8007ec0:	1d1a      	adds	r2, r3, #4
 8007ec2:	602a      	str	r2, [r5, #0]
 8007ec4:	681d      	ldr	r5, [r3, #0]
 8007ec6:	6862      	ldr	r2, [r4, #4]
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f7f8 f998 	bl	8000200 <memchr>
 8007ed0:	b108      	cbz	r0, 8007ed6 <_printf_i+0x1ea>
 8007ed2:	1b40      	subs	r0, r0, r5
 8007ed4:	6060      	str	r0, [r4, #4]
 8007ed6:	6863      	ldr	r3, [r4, #4]
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	2300      	movs	r3, #0
 8007edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee0:	e7aa      	b.n	8007e38 <_printf_i+0x14c>
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	462a      	mov	r2, r5
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	4640      	mov	r0, r8
 8007eea:	47d0      	blx	sl
 8007eec:	3001      	adds	r0, #1
 8007eee:	d0ad      	beq.n	8007e4c <_printf_i+0x160>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	079b      	lsls	r3, r3, #30
 8007ef4:	d413      	bmi.n	8007f1e <_printf_i+0x232>
 8007ef6:	68e0      	ldr	r0, [r4, #12]
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	4298      	cmp	r0, r3
 8007efc:	bfb8      	it	lt
 8007efe:	4618      	movlt	r0, r3
 8007f00:	e7a6      	b.n	8007e50 <_printf_i+0x164>
 8007f02:	2301      	movs	r3, #1
 8007f04:	4632      	mov	r2, r6
 8007f06:	4649      	mov	r1, r9
 8007f08:	4640      	mov	r0, r8
 8007f0a:	47d0      	blx	sl
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d09d      	beq.n	8007e4c <_printf_i+0x160>
 8007f10:	3501      	adds	r5, #1
 8007f12:	68e3      	ldr	r3, [r4, #12]
 8007f14:	9903      	ldr	r1, [sp, #12]
 8007f16:	1a5b      	subs	r3, r3, r1
 8007f18:	42ab      	cmp	r3, r5
 8007f1a:	dcf2      	bgt.n	8007f02 <_printf_i+0x216>
 8007f1c:	e7eb      	b.n	8007ef6 <_printf_i+0x20a>
 8007f1e:	2500      	movs	r5, #0
 8007f20:	f104 0619 	add.w	r6, r4, #25
 8007f24:	e7f5      	b.n	8007f12 <_printf_i+0x226>
 8007f26:	bf00      	nop
 8007f28:	080080c1 	.word	0x080080c1
 8007f2c:	080080d2 	.word	0x080080d2

08007f30 <memmove>:
 8007f30:	4288      	cmp	r0, r1
 8007f32:	b510      	push	{r4, lr}
 8007f34:	eb01 0402 	add.w	r4, r1, r2
 8007f38:	d902      	bls.n	8007f40 <memmove+0x10>
 8007f3a:	4284      	cmp	r4, r0
 8007f3c:	4623      	mov	r3, r4
 8007f3e:	d807      	bhi.n	8007f50 <memmove+0x20>
 8007f40:	1e43      	subs	r3, r0, #1
 8007f42:	42a1      	cmp	r1, r4
 8007f44:	d008      	beq.n	8007f58 <memmove+0x28>
 8007f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f4e:	e7f8      	b.n	8007f42 <memmove+0x12>
 8007f50:	4402      	add	r2, r0
 8007f52:	4601      	mov	r1, r0
 8007f54:	428a      	cmp	r2, r1
 8007f56:	d100      	bne.n	8007f5a <memmove+0x2a>
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f62:	e7f7      	b.n	8007f54 <memmove+0x24>

08007f64 <_sbrk_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4d06      	ldr	r5, [pc, #24]	; (8007f80 <_sbrk_r+0x1c>)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	602b      	str	r3, [r5, #0]
 8007f70:	f7f9 fc82 	bl	8001878 <_sbrk>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_sbrk_r+0x1a>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_sbrk_r+0x1a>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	200007f8 	.word	0x200007f8

08007f84 <memcpy>:
 8007f84:	440a      	add	r2, r1
 8007f86:	4291      	cmp	r1, r2
 8007f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f8c:	d100      	bne.n	8007f90 <memcpy+0xc>
 8007f8e:	4770      	bx	lr
 8007f90:	b510      	push	{r4, lr}
 8007f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f9a:	4291      	cmp	r1, r2
 8007f9c:	d1f9      	bne.n	8007f92 <memcpy+0xe>
 8007f9e:	bd10      	pop	{r4, pc}

08007fa0 <_realloc_r>:
 8007fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	4614      	mov	r4, r2
 8007fa8:	460e      	mov	r6, r1
 8007faa:	b921      	cbnz	r1, 8007fb6 <_realloc_r+0x16>
 8007fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	f7ff bc49 	b.w	8007848 <_malloc_r>
 8007fb6:	b92a      	cbnz	r2, 8007fc4 <_realloc_r+0x24>
 8007fb8:	f7ff fbda 	bl	8007770 <_free_r>
 8007fbc:	4625      	mov	r5, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc4:	f000 f81b 	bl	8007ffe <_malloc_usable_size_r>
 8007fc8:	4284      	cmp	r4, r0
 8007fca:	4607      	mov	r7, r0
 8007fcc:	d802      	bhi.n	8007fd4 <_realloc_r+0x34>
 8007fce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fd2:	d812      	bhi.n	8007ffa <_realloc_r+0x5a>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	f7ff fc36 	bl	8007848 <_malloc_r>
 8007fdc:	4605      	mov	r5, r0
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d0ed      	beq.n	8007fbe <_realloc_r+0x1e>
 8007fe2:	42bc      	cmp	r4, r7
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	bf28      	it	cs
 8007fea:	463a      	movcs	r2, r7
 8007fec:	f7ff ffca 	bl	8007f84 <memcpy>
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	f7ff fbbc 	bl	8007770 <_free_r>
 8007ff8:	e7e1      	b.n	8007fbe <_realloc_r+0x1e>
 8007ffa:	4635      	mov	r5, r6
 8007ffc:	e7df      	b.n	8007fbe <_realloc_r+0x1e>

08007ffe <_malloc_usable_size_r>:
 8007ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008002:	1f18      	subs	r0, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	bfbc      	itt	lt
 8008008:	580b      	ldrlt	r3, [r1, r0]
 800800a:	18c0      	addlt	r0, r0, r3
 800800c:	4770      	bx	lr
	...

08008010 <_init>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr

0800801c <_fini>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	bf00      	nop
 8008020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008022:	bc08      	pop	{r3}
 8008024:	469e      	mov	lr, r3
 8008026:	4770      	bx	lr
