
02_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007524  08007524  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800752c  0800752c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800752c  0800752c  0001752c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000068  0800759c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  0800759c  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a94  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ecb  00000000  00000000  00039b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117d  00000000  00000000  0003e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e57f  00000000  00000000  0003f23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001abe2  00000000  00000000  0006d7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e701  00000000  00000000  0008839e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006814  00000000  00000000  001a6aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001ad2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000068 	.word	0x20000068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007458 	.word	0x08007458

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	08007458 	.word	0x08007458

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 f9eb 	bl	800197a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f82a 	bl	80005fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a8:	f000 f88a 	bl	80006c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fbe0 	bl	8000d70 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b0:	f000 f8b6 	bl	8000720 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005b4:	f000 f918 	bl	80007e8 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80005b8:	f000 f94e 	bl	8000858 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005bc:	f000 f98c 	bl	80008d8 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80005c0:	f000 f9ca 	bl	8000958 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80005c4:	f000 fa1e 	bl	8000a04 <MX_SPI1_Init>
  MX_SPI3_Init();
 80005c8:	f000 fa5a 	bl	8000a80 <MX_SPI3_Init>
  MX_UART4_Init();
 80005cc:	f000 fa96 	bl	8000afc <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005d0:	f000 fae0 	bl	8000b94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 fb2a 	bl	8000c2c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005d8:	f000 fb76 	bl	8000cc8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005dc:	f000 fbc0 	bl	8000d60 <MX_USB_OTG_FS_USB_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello World");
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <main+0x58>)
 80005e2:	f006 f869 	bl	80066b8 <iprintf>
	  printf("\r\n");
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <main+0x5c>)
 80005e8:	f006 f8cc 	bl	8006784 <puts>
	  HAL_Delay(150);
 80005ec:	2096      	movs	r0, #150	; 0x96
 80005ee:	f001 fa39 	bl	8001a64 <HAL_Delay>
	  printf("Hello World");
 80005f2:	e7f5      	b.n	80005e0 <main+0x44>
 80005f4:	08007470 	.word	0x08007470
 80005f8:	0800747c 	.word	0x0800747c

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	; 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f006 f99a 	bl	8006944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f003 fb4a 	bl	8003cb8 <HAL_PWREx_ControlVoltageScaling>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800062a:	f000 fcf5 	bl	8001018 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062e:	f003 fb13 	bl	8003c58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xc0>)
 8000634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000638:	4a20      	ldr	r2, [pc, #128]	; (80006bc <SystemClock_Config+0xc0>)
 800063a:	f023 0318 	bic.w	r3, r3, #24
 800063e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000642:	2314      	movs	r3, #20
 8000644:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064a:	2301      	movs	r3, #1
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000652:	2360      	movs	r3, #96	; 0x60
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800065a:	2301      	movs	r3, #1
 800065c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065e:	2301      	movs	r3, #1
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000662:	233c      	movs	r3, #60	; 0x3c
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fbc2 	bl	8003e00 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000682:	f000 fcc9 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2303      	movs	r3, #3
 800068c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	2105      	movs	r1, #5
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 ffc8 	bl	8004634 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006aa:	f000 fcb5 	bl	8001018 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ae:	f004 fdaf 	bl	8005210 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b2:	bf00      	nop
 80006b4:	3758      	adds	r7, #88	; 0x58
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0a6      	sub	sp, #152	; 0x98
 80006c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2294      	movs	r2, #148	; 0x94
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f006 f939 	bl	8006944 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80006d2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006e4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006e6:	2301      	movs	r3, #1
 80006e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006ee:	2318      	movs	r3, #24
 80006f0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80006fe:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000702:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f004 fa52 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000712:	f000 fc81 	bl	8001018 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3798      	adds	r7, #152	; 0x98
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000736:	4b29      	ldr	r3, [pc, #164]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000738:	4a29      	ldr	r2, [pc, #164]	; (80007e0 <MX_ADC1_Init+0xc0>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <MX_ADC1_Init+0xbc>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000742:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <MX_ADC1_Init+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000756:	2204      	movs	r2, #4
 8000758:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_ADC1_Init+0xbc>)
 800075c:	2200      	movs	r2, #0
 800075e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000762:	2200      	movs	r2, #0
 8000764:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000768:	2201      	movs	r2, #1
 800076a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_ADC1_Init+0xbc>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000776:	2200      	movs	r2, #0
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_ADC1_Init+0xbc>)
 800077c:	2200      	movs	r2, #0
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_ADC1_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <MX_ADC1_Init+0xbc>)
 8000798:	f001 fb28 	bl	8001dec <HAL_ADC_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007a2:	f000 fc39 	bl	8001018 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_ADC1_Init+0xc4>)
 80007a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007aa:	2306      	movs	r3, #6
 80007ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b2:	237f      	movs	r3, #127	; 0x7f
 80007b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b6:	2304      	movs	r3, #4
 80007b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_ADC1_Init+0xbc>)
 80007c4:	f001 fc58 	bl	8002078 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007ce:	f000 fc23 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000084 	.word	0x20000084
 80007e0:	50040000 	.word	0x50040000
 80007e4:	04300002 	.word	0x04300002

080007e8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_DFSDM1_Init+0x68>)
 80007ee:	4a19      	ldr	r2, [pc, #100]	; (8000854 <MX_DFSDM1_Init+0x6c>)
 80007f0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_DFSDM1_Init+0x68>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_DFSDM1_Init+0x68>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_DFSDM1_Init+0x68>)
 8000800:	2202      	movs	r2, #2
 8000802:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_DFSDM1_Init+0x68>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_DFSDM1_Init+0x68>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_DFSDM1_Init+0x68>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_DFSDM1_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_DFSDM1_Init+0x68>)
 800081e:	2204      	movs	r2, #4
 8000820:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_DFSDM1_Init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_DFSDM1_Init+0x68>)
 800082a:	2201      	movs	r2, #1
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_DFSDM1_Init+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_DFSDM1_Init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_DFSDM1_Init+0x68>)
 800083c:	f002 f92a 	bl	8002a94 <HAL_DFSDM_ChannelInit>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000846:	f000 fbe7 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000ec 	.word	0x200000ec
 8000854:	40016040 	.word	0x40016040

08000858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_I2C1_Init+0x74>)
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_I2C1_Init+0x78>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_I2C1_Init+0x74>)
 8000864:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <MX_I2C1_Init+0x7c>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_I2C1_Init+0x74>)
 8000870:	2201      	movs	r2, #1
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_I2C1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_I2C1_Init+0x74>)
 8000894:	f002 fbd7 	bl	8003046 <HAL_I2C_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800089e:	f000 fbbb 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_I2C1_Init+0x74>)
 80008a6:	f002 fc69 	bl	800317c <HAL_I2CEx_ConfigAnalogFilter>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f000 fbb2 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_I2C1_Init+0x74>)
 80008b8:	f002 fcab 	bl	8003212 <HAL_I2CEx_ConfigDigitalFilter>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f000 fba9 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000124 	.word	0x20000124
 80008d0:	40005400 	.word	0x40005400
 80008d4:	307075b1 	.word	0x307075b1

080008d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_I2C2_Init+0x74>)
 80008de:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <MX_I2C2_Init+0x78>)
 80008e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_I2C2_Init+0x74>)
 80008e4:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <MX_I2C2_Init+0x7c>)
 80008e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_I2C2_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_I2C2_Init+0x74>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_I2C2_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_I2C2_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_I2C2_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <MX_I2C2_Init+0x74>)
 8000914:	f002 fb97 	bl	8003046 <HAL_I2C_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800091e:	f000 fb7b 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <MX_I2C2_Init+0x74>)
 8000926:	f002 fc29 	bl	800317c <HAL_I2CEx_ConfigAnalogFilter>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000930:	f000 fb72 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000934:	2100      	movs	r1, #0
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_I2C2_Init+0x74>)
 8000938:	f002 fc6b 	bl	8003212 <HAL_I2CEx_ConfigDigitalFilter>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000942:	f000 fb69 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000178 	.word	0x20000178
 8000950:	40005800 	.word	0x40005800
 8000954:	307075b1 	.word	0x307075b1

08000958 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 800096e:	4a24      	ldr	r2, [pc, #144]	; (8000a00 <MX_OCTOSPI1_Init+0xa8>)
 8000970:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 8000974:	2201      	movs	r2, #1
 8000976:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 8000980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000984:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 8000988:	2220      	movs	r2, #32
 800098a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 800098e:	2201      	movs	r2, #1
 8000990:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 80009b8:	2208      	movs	r2, #8
 80009ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80009bc:	480f      	ldr	r0, [pc, #60]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 80009be:	f002 fc75 	bl	80032ac <HAL_OSPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80009c8:	f000 fb26 	bl	8001018 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80009d4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80009d8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_OCTOSPI1_Init+0xa4>)
 80009e4:	f002 fd1c 	bl	8003420 <HAL_OSPIM_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80009ee:	f000 fb13 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001cc 	.word	0x200001cc
 8000a00:	a0001000 	.word	0xa0001000

08000a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_SPI1_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a52:	2207      	movs	r2, #7
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a64:	f004 fdcc 	bl	8005600 <HAL_SPI_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 fad3 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000021c 	.word	0x2000021c
 8000a7c:	40013000 	.word	0x40013000

08000a80 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <MX_SPI3_Init+0x78>)
 8000a88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000a8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000a9a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a9e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000ace:	2207      	movs	r2, #7
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_SPI3_Init+0x74>)
 8000ae0:	f004 fd8e 	bl	8005600 <HAL_SPI_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000aea:	f000 fa95 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000280 	.word	0x20000280
 8000af8:	40003c00 	.word	0x40003c00

08000afc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b02:	4a23      	ldr	r2, [pc, #140]	; (8000b90 <MX_UART4_Init+0x94>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b44:	4811      	ldr	r0, [pc, #68]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b46:	f004 fdfe 	bl	8005746 <HAL_UART_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b50:	f000 fa62 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b54:	2100      	movs	r1, #0
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b58:	f005 fc22 	bl	80063a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b62:	f000 fa59 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b6a:	f005 fc57 	bl	800641c <HAL_UARTEx_SetRxFifoThreshold>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b74:	f000 fa50 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_UART4_Init+0x90>)
 8000b7a:	f005 fbd8 	bl	800632e <HAL_UARTEx_DisableFifoMode>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b84:	f000 fa48 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200002e4 	.word	0x200002e4
 8000b90:	40004c00 	.word	0x40004c00

08000b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000b9a:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bdc:	4811      	ldr	r0, [pc, #68]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000bde:	f004 fdb2 	bl	8005746 <HAL_UART_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000be8:	f000 fa16 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bec:	2100      	movs	r1, #0
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000bf0:	f005 fbd6 	bl	80063a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bfa:	f000 fa0d 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000c02:	f005 fc0b 	bl	800641c <HAL_UARTEx_SetRxFifoThreshold>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 fa04 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_USART1_UART_Init+0x90>)
 8000c12:	f005 fb8c 	bl	800632e <HAL_UARTEx_DisableFifoMode>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 f9fc 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000378 	.word	0x20000378
 8000c28:	40013800 	.word	0x40013800

08000c2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c32:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <MX_USART2_UART_Init+0x98>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c58:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c5c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c76:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c78:	f004 fd65 	bl	8005746 <HAL_UART_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c82:	f000 f9c9 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c8a:	f005 fb89 	bl	80063a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c94:	f000 f9c0 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c9c:	f005 fbbe 	bl	800641c <HAL_UARTEx_SetRxFifoThreshold>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000ca6:	f000 f9b7 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000cac:	f005 fb3f 	bl	800632e <HAL_UARTEx_DisableFifoMode>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000cb6:	f000 f9af 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000040c 	.word	0x2000040c
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cce:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <MX_USART3_UART_Init+0x94>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d10:	4811      	ldr	r0, [pc, #68]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d12:	f004 fd18 	bl	8005746 <HAL_UART_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d1c:	f000 f97c 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d24:	f005 fb3c 	bl	80063a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d2e:	f000 f973 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d36:	f005 fb71 	bl	800641c <HAL_UARTEx_SetRxFifoThreshold>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f000 f96a 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d46:	f005 faf2 	bl	800632e <HAL_UARTEx_DisableFifoMode>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d50:	f000 f962 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200004a0 	.word	0x200004a0
 8000d5c:	40004800 	.word	0x40004800

08000d60 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4b96      	ldr	r3, [pc, #600]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a95      	ldr	r2, [pc, #596]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b93      	ldr	r3, [pc, #588]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	4b90      	ldr	r3, [pc, #576]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a8f      	ldr	r2, [pc, #572]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b8d      	ldr	r3, [pc, #564]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db6:	4b8a      	ldr	r3, [pc, #552]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a89      	ldr	r2, [pc, #548]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b87      	ldr	r3, [pc, #540]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b84      	ldr	r3, [pc, #528]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a83      	ldr	r2, [pc, #524]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b81      	ldr	r3, [pc, #516]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	4b7e      	ldr	r3, [pc, #504]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a7d      	ldr	r2, [pc, #500]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b7b      	ldr	r3, [pc, #492]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	4b78      	ldr	r3, [pc, #480]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a77      	ldr	r2, [pc, #476]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b75      	ldr	r3, [pc, #468]	; (8000fe0 <MX_GPIO_Init+0x270>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f240 1105 	movw	r1, #261	; 0x105
 8000e1c:	4871      	ldr	r0, [pc, #452]	; (8000fe4 <MX_GPIO_Init+0x274>)
 8000e1e:	f002 f8d7 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e22:	2200      	movs	r2, #0
 8000e24:	f248 111c 	movw	r1, #33052	; 0x811c
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f002 f8d0 	bl	8002fd0 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e30:	2200      	movs	r2, #0
 8000e32:	f24f 0104 	movw	r1, #61444	; 0xf004
 8000e36:	486c      	ldr	r0, [pc, #432]	; (8000fe8 <MX_GPIO_Init+0x278>)
 8000e38:	f002 f8ca 	bl	8002fd0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f242 0183 	movw	r1, #8323	; 0x2083
 8000e42:	486a      	ldr	r0, [pc, #424]	; (8000fec <MX_GPIO_Init+0x27c>)
 8000e44:	f002 f8c4 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e4e:	4868      	ldr	r0, [pc, #416]	; (8000ff0 <MX_GPIO_Init+0x280>)
 8000e50:	f002 f8be 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e54:	f240 1305 	movw	r3, #261	; 0x105
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	485d      	ldr	r0, [pc, #372]	; (8000fe4 <MX_GPIO_Init+0x274>)
 8000e6e:	f001 ff1d 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e72:	237a      	movs	r3, #122	; 0x7a
 8000e74:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4857      	ldr	r0, [pc, #348]	; (8000fe4 <MX_GPIO_Init+0x274>)
 8000e88:	f001 ff10 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e8c:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4853      	ldr	r0, [pc, #332]	; (8000ff0 <MX_GPIO_Init+0x280>)
 8000ea4:	f001 ff02 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000ea8:	f248 131c 	movw	r3, #33052	; 0x811c
 8000eac:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f001 fef2 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ecc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4842      	ldr	r0, [pc, #264]	; (8000fe8 <MX_GPIO_Init+0x278>)
 8000ede:	f001 fee5 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	483a      	ldr	r0, [pc, #232]	; (8000fe8 <MX_GPIO_Init+0x278>)
 8000efe:	f001 fed5 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f02:	f24f 0304 	movw	r3, #61444	; 0xf004
 8000f06:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4833      	ldr	r0, [pc, #204]	; (8000fe8 <MX_GPIO_Init+0x278>)
 8000f1c:	f001 fec6 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f20:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000f24:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	482d      	ldr	r0, [pc, #180]	; (8000fec <MX_GPIO_Init+0x27c>)
 8000f38:	f001 feb8 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f3c:	f242 0383 	movw	r3, #8323	; 0x2083
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4825      	ldr	r0, [pc, #148]	; (8000fec <MX_GPIO_Init+0x27c>)
 8000f56:	f001 fea9 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f5a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <MX_GPIO_Init+0x280>)
 8000f74:	f001 fe9a 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f001 fe8c 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f94:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f001 fe7a 	bl	8002cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2017      	movs	r0, #23
 8000fbe:	f001 fd32 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fc2:	2017      	movs	r0, #23
 8000fc4:	f001 fd4b 	bl	8002a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2028      	movs	r0, #40	; 0x28
 8000fce:	f001 fd2a 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd2:	2028      	movs	r0, #40	; 0x28
 8000fd4:	f001 fd43 	bl	8002a5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd8:	bf00      	nop
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48001000 	.word	0x48001000
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	48000c00 	.word	0x48000c00
 8000ff0:	48000800 	.word	0x48000800

08000ff4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8000ffc:	1d39      	adds	r1, r7, #4
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	2201      	movs	r2, #1
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <__io_putchar+0x20>)
 8001006:	f004 fbee 	bl	80057e6 <HAL_UART_Transmit>
	return ch;
 800100a:	687b      	ldr	r3, [r7, #4]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000378 	.word	0x20000378

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x44>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_MspInit+0x44>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6613      	str	r3, [r2, #96]	; 0x60
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_MspInit+0x44>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_MspInit+0x44>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_MspInit+0x44>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6593      	str	r3, [r2, #88]	; 0x58
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_MspInit+0x44>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a15      	ldr	r2, [pc, #84]	; (80010e0 <HAL_ADC_MspInit+0x74>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d123      	bne.n	80010d6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_ADC_MspInit+0x78>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <HAL_ADC_MspInit+0x78>)
 8001094:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_ADC_MspInit+0x78>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_ADC_MspInit+0x78>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_ADC_MspInit+0x78>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_ADC_MspInit+0x78>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80010be:	233f      	movs	r3, #63	; 0x3f
 80010c0:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010c2:	230b      	movs	r3, #11
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_ADC_MspInit+0x7c>)
 80010d2:	f001 fdeb 	bl	8002cac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	50040000 	.word	0x50040000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000800 	.word	0x48000800

080010ec <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0ae      	sub	sp, #184	; 0xb8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	2294      	movs	r2, #148	; 0x94
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f005 fc19 	bl	8006944 <memset>
  if(DFSDM1_Init == 0)
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d142      	bne.n	80011a0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800111a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800111e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4618      	mov	r0, r3
 800112c:	f003 fd40 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001136:	f7ff ff6f 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_DFSDM_ChannelMspInit+0xc0>)
 800113c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113e:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001144:	6613      	str	r3, [r2, #96]	; 0x60
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800116a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800116e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001184:	2306      	movs	r3, #6
 8001186:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800118e:	4619      	mov	r1, r3
 8001190:	4807      	ldr	r0, [pc, #28]	; (80011b0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001192:	f001 fd8b 	bl	8002cac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	4a02      	ldr	r2, [pc, #8]	; (80011a8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800119e:	6013      	str	r3, [r2, #0]
  }

}
 80011a0:	bf00      	nop
 80011a2:	37b8      	adds	r7, #184	; 0xb8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000534 	.word	0x20000534
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48001000 	.word	0x48001000

080011b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0b0      	sub	sp, #192	; 0xc0
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	2294      	movs	r2, #148	; 0x94
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f005 fbb5 	bl	8006944 <memset>
  if(hi2c->Instance==I2C1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a42      	ldr	r2, [pc, #264]	; (80012e8 <HAL_I2C_MspInit+0x134>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d13c      	bne.n	800125e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011e4:	2340      	movs	r3, #64	; 0x40
 80011e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fcdd 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011fc:	f7ff ff0c 	bl	8001018 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <HAL_I2C_MspInit+0x138>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	4a39      	ldr	r2, [pc, #228]	; (80012ec <HAL_I2C_MspInit+0x138>)
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120c:	4b37      	ldr	r3, [pc, #220]	; (80012ec <HAL_I2C_MspInit+0x138>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001218:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001220:	2312      	movs	r3, #18
 8001222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001226:	2301      	movs	r3, #1
 8001228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001232:	2304      	movs	r3, #4
 8001234:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800123c:	4619      	mov	r1, r3
 800123e:	482c      	ldr	r0, [pc, #176]	; (80012f0 <HAL_I2C_MspInit+0x13c>)
 8001240:	f001 fd34 	bl	8002cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <HAL_I2C_MspInit+0x138>)
 8001246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001248:	4a28      	ldr	r2, [pc, #160]	; (80012ec <HAL_I2C_MspInit+0x138>)
 800124a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800124e:	6593      	str	r3, [r2, #88]	; 0x58
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <HAL_I2C_MspInit+0x138>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800125c:	e040      	b.n	80012e0 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <HAL_I2C_MspInit+0x140>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d13b      	bne.n	80012e0 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800126c:	2300      	movs	r3, #0
 800126e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001270:	f107 0318 	add.w	r3, r7, #24
 8001274:	4618      	mov	r0, r3
 8001276:	f003 fc9b 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001280:	f7ff feca 	bl	8001018 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_I2C_MspInit+0x138>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	4a18      	ldr	r2, [pc, #96]	; (80012ec <HAL_I2C_MspInit+0x138>)
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_I2C_MspInit+0x138>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800129c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a4:	2312      	movs	r3, #18
 80012a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012b6:	2304      	movs	r3, #4
 80012b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012c0:	4619      	mov	r1, r3
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <HAL_I2C_MspInit+0x13c>)
 80012c4:	f001 fcf2 	bl	8002cac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_I2C_MspInit+0x138>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_I2C_MspInit+0x138>)
 80012ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d2:	6593      	str	r3, [r2, #88]	; 0x58
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_I2C_MspInit+0x138>)
 80012d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
}
 80012e0:	bf00      	nop
 80012e2:	37c0      	adds	r7, #192	; 0xc0
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000400 	.word	0x48000400
 80012f4:	40005800 	.word	0x40005800

080012f8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0b0      	sub	sp, #192	; 0xc0
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	2294      	movs	r2, #148	; 0x94
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f005 fb13 	bl	8006944 <memset>
  if(hospi->Instance==OCTOSPI1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <HAL_OSPI_MspInit+0xcc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d149      	bne.n	80013bc <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800132c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	f107 0318 	add.w	r3, r7, #24
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fc39 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001344:	f7ff fe68 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_OSPI_MspInit+0xd0>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <HAL_OSPI_MspInit+0xd0>)
 800134e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <HAL_OSPI_MspInit+0xd0>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_OSPI_MspInit+0xd0>)
 8001362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001364:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <HAL_OSPI_MspInit+0xd0>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	6513      	str	r3, [r2, #80]	; 0x50
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_OSPI_MspInit+0xd0>)
 800136e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_OSPI_MspInit+0xd0>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_OSPI_MspInit+0xd0>)
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_OSPI_MspInit+0xd0>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001390:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013aa:	230a      	movs	r3, #10
 80013ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013b4:	4619      	mov	r1, r3
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_OSPI_MspInit+0xd4>)
 80013b8:	f001 fc78 	bl	8002cac <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	37c0      	adds	r7, #192	; 0xc0
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	a0001000 	.word	0xa0001000
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48001000 	.word	0x48001000

080013d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <HAL_SPI_MspInit+0xdc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d129      	bne.n	8001446 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f6:	4a2e      	ldr	r2, [pc, #184]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 80013f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013fc:	6613      	str	r3, [r2, #96]	; 0x60
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001422:	23e0      	movs	r3, #224	; 0xe0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001432:	2305      	movs	r3, #5
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f001 fc34 	bl	8002cac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001444:	e02d      	b.n	80014a2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <HAL_SPI_MspInit+0xe4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d128      	bne.n	80014a2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 8001456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145a:	6593      	str	r3, [r2, #88]	; 0x58
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_SPI_MspInit+0xe0>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001480:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001492:	2306      	movs	r3, #6
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <HAL_SPI_MspInit+0xe8>)
 800149e:	f001 fc05 	bl	8002cac <HAL_GPIO_Init>
}
 80014a2:	bf00      	nop
 80014a4:	3730      	adds	r7, #48	; 0x30
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40013000 	.word	0x40013000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40003c00 	.word	0x40003c00
 80014b8:	48000800 	.word	0x48000800

080014bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0b4      	sub	sp, #208	; 0xd0
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d8:	2294      	movs	r2, #148	; 0x94
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 fa31 	bl	8006944 <memset>
  if(huart->Instance==UART4)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a83      	ldr	r2, [pc, #524]	; (80016f4 <HAL_UART_MspInit+0x238>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d13c      	bne.n	8001566 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014ec:	2308      	movs	r3, #8
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fb59 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001504:	f7ff fd88 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001508:	4b7b      	ldr	r3, [pc, #492]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	4a7a      	ldr	r2, [pc, #488]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 800150e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001512:	6593      	str	r3, [r2, #88]	; 0x58
 8001514:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b75      	ldr	r3, [pc, #468]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	4a74      	ldr	r2, [pc, #464]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152c:	4b72      	ldr	r3, [pc, #456]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	623b      	str	r3, [r7, #32]
 8001536:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001538:	2303      	movs	r3, #3
 800153a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001550:	2308      	movs	r3, #8
 8001552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f001 fba4 	bl	8002cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001564:	e0c2      	b.n	80016ec <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a64      	ldr	r2, [pc, #400]	; (80016fc <HAL_UART_MspInit+0x240>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d13b      	bne.n	80015e8 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001570:	2301      	movs	r3, #1
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001574:	2300      	movs	r3, #0
 8001576:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fb17 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001588:	f7ff fd46 	bl	8001018 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800158c:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001590:	4a59      	ldr	r2, [pc, #356]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 8001592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001596:	6613      	str	r3, [r2, #96]	; 0x60
 8001598:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 800159a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a4:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	4a53      	ldr	r2, [pc, #332]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b0:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80015bc:	23c0      	movs	r3, #192	; 0xc0
 80015be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015d4:	2307      	movs	r3, #7
 80015d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015de:	4619      	mov	r1, r3
 80015e0:	4847      	ldr	r0, [pc, #284]	; (8001700 <HAL_UART_MspInit+0x244>)
 80015e2:	f001 fb63 	bl	8002cac <HAL_GPIO_Init>
}
 80015e6:	e081      	b.n	80016ec <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a45      	ldr	r2, [pc, #276]	; (8001704 <HAL_UART_MspInit+0x248>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d13b      	bne.n	800166a <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fad6 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_UART_MspInit+0x152>
      Error_Handler();
 800160a:	f7ff fd05 	bl	8001018 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	4a39      	ldr	r2, [pc, #228]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a33      	ldr	r2, [pc, #204]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800163e:	2378      	movs	r3, #120	; 0x78
 8001640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001656:	2307      	movs	r3, #7
 8001658:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001660:	4619      	mov	r1, r3
 8001662:	4829      	ldr	r0, [pc, #164]	; (8001708 <HAL_UART_MspInit+0x24c>)
 8001664:	f001 fb22 	bl	8002cac <HAL_GPIO_Init>
}
 8001668:	e040      	b.n	80016ec <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a27      	ldr	r2, [pc, #156]	; (800170c <HAL_UART_MspInit+0x250>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d13b      	bne.n	80016ec <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001674:	2304      	movs	r3, #4
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001678:	2300      	movs	r3, #0
 800167a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fa95 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800168c:	f7ff fcc4 	bl	8001018 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 8001696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_UART_MspInit+0x23c>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80016c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016da:	2307      	movs	r3, #7
 80016dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016e4:	4619      	mov	r1, r3
 80016e6:	4808      	ldr	r0, [pc, #32]	; (8001708 <HAL_UART_MspInit+0x24c>)
 80016e8:	f001 fae0 	bl	8002cac <HAL_GPIO_Init>
}
 80016ec:	bf00      	nop
 80016ee:	37d0      	adds	r7, #208	; 0xd0
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40004c00 	.word	0x40004c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40013800 	.word	0x40013800
 8001700:	48000400 	.word	0x48000400
 8001704:	40004400 	.word	0x40004400
 8001708:	48000c00 	.word	0x48000c00
 800170c:	40004800 	.word	0x40004800

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 f962 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001768:	2020      	movs	r0, #32
 800176a:	f001 fc49 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800176e:	2040      	movs	r0, #64	; 0x40
 8001770:	f001 fc46 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001774:	2080      	movs	r0, #128	; 0x80
 8001776:	f001 fc43 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800177a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800177e:	f001 fc3f 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}

08001786 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800178a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800178e:	f001 fc37 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001792:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001796:	f001 fc33 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800179a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800179e:	f001 fc2f 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80017a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a6:	f001 fc2b 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80017aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017ae:	f001 fc27 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80017b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017b6:	f001 fc23 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}

080017be <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e00a      	b.n	80017e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d0:	f3af 8000 	nop.w
 80017d4:	4601      	mov	r1, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	60ba      	str	r2, [r7, #8]
 80017dc:	b2ca      	uxtb	r2, r1
 80017de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbf0      	blt.n	80017d0 <_read+0x12>
  }

  return len;
 80017ee:	687b      	ldr	r3, [r7, #4]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e009      	b.n	800181e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fbee 	bl	8000ff4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	dbf1      	blt.n	800180a <_write+0x12>
  }
  return len;
 8001826:	687b      	ldr	r3, [r7, #4]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_close>:

int _close(int file)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001858:	605a      	str	r2, [r3, #4]
  return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_isatty>:

int _isatty(int file)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f005 f88a 	bl	80069e0 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200a0000 	.word	0x200a0000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20000538 	.word	0x20000538
 8001900:	200006b0 	.word	0x200006b0

08001904 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800192c:	f7ff ffea 	bl	8001904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <LoopForever+0x6>)
  ldr r1, =_edata
 8001932:	490d      	ldr	r1, [pc, #52]	; (8001968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <LoopForever+0xe>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800193c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001948:	4c0a      	ldr	r4, [pc, #40]	; (8001974 <LoopForever+0x16>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001956:	f005 f849 	bl	80069ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800195a:	f7fe fe1f 	bl	800059c <main>

0800195e <LoopForever>:

LoopForever:
    b LoopForever
 800195e:	e7fe      	b.n	800195e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001960:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800196c:	08007534 	.word	0x08007534
  ldr r2, =_sbss
 8001970:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001974:	200006b0 	.word	0x200006b0

08001978 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC1_IRQHandler>

0800197a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f001 f843 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f80e 	bl	80019ac <HAL_InitTick>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	e001      	b.n	80019a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800199c:	f7ff fb42 	bl	8001024 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_InitTick+0x6c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d023      	beq.n	8001a08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_InitTick+0x70>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_InitTick+0x6c>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 f84f 	bl	8002a7a <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10f      	bne.n	8001a02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d809      	bhi.n	80019fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e8:	2200      	movs	r2, #0
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f001 f819 	bl	8002a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_InitTick+0x74>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e007      	b.n	8001a0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e004      	b.n	8001a0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	e001      	b.n	8001a0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008
 8001a48:	2000053c 	.word	0x2000053c

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	2000053c 	.word	0x2000053c

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff ffee 	bl	8001a4c <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffde 	bl	8001a4c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008

08001aac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3360      	adds	r3, #96	; 0x60
 8001b26:	461a      	mov	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <LL_ADC_SetOffset+0x44>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	03fff000 	.word	0x03fff000

08001b5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3360      	adds	r3, #96	; 0x60
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3360      	adds	r3, #96	; 0x60
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bb2:	bf00      	nop
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	615a      	str	r2, [r3, #20]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3330      	adds	r3, #48	; 0x30
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	211f      	movs	r1, #31
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0e9b      	lsrs	r3, r3, #26
 8001c1c:	f003 011f 	and.w	r1, r3, #31
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3314      	adds	r3, #20
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	0e5b      	lsrs	r3, r3, #25
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	0d1b      	lsrs	r3, r3, #20
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	2107      	movs	r1, #7
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	401a      	ands	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	0d1b      	lsrs	r3, r3, #20
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	431a      	orrs	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c86:	bf00      	nop
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0318 	and.w	r3, r3, #24
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cb8:	40d9      	lsrs	r1, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	0007ffff 	.word	0x0007ffff

08001cdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6093      	str	r3, [r2, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d14:	d101      	bne.n	8001d1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d64:	d101      	bne.n	8001d6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <LL_ADC_IsEnabled+0x18>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <LL_ADC_IsEnabled+0x1a>
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d101      	bne.n	8001db6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d101      	bne.n	8001ddc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e129      	b.n	800205a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff f929 	bl	800106c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff67 	bl	8001d00 <LL_ADC_IsDeepPowerDownEnabled>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff4d 	bl	8001cdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff82 	bl	8001d50 <LL_ADC_IsInternalRegulatorEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d115      	bne.n	8001e7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff66 	bl	8001d28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e5c:	4b81      	ldr	r3, [pc, #516]	; (8002064 <HAL_ADC_Init+0x278>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	099b      	lsrs	r3, r3, #6
 8001e62:	4a81      	ldr	r2, [pc, #516]	; (8002068 <HAL_ADC_Init+0x27c>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e70:	e002      	b.n	8001e78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f9      	bne.n	8001e72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff64 	bl	8001d50 <LL_ADC_IsInternalRegulatorEnabled>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10d      	bne.n	8001eaa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	f043 0210 	orr.w	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff75 	bl	8001d9e <LL_ADC_REG_IsConversionOngoing>
 8001eb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 80c2 	bne.w	8002048 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 80be 	bne.w	8002048 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ed4:	f043 0202 	orr.w	r2, r3, #2
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff49 	bl	8001d78 <LL_ADC_IsEnabled>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10b      	bne.n	8001f04 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eec:	485f      	ldr	r0, [pc, #380]	; (800206c <HAL_ADC_Init+0x280>)
 8001eee:	f7ff ff43 	bl	8001d78 <LL_ADC_IsEnabled>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4619      	mov	r1, r3
 8001efe:	485c      	ldr	r0, [pc, #368]	; (8002070 <HAL_ADC_Init+0x284>)
 8001f00:	f7ff fdd4 	bl	8001aac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7e5b      	ldrb	r3, [r3, #25]
 8001f08:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f0e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f14:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f1a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f22:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d106      	bne.n	8001f40 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	3b01      	subs	r3, #1
 8001f38:	045b      	lsls	r3, r3, #17
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d009      	beq.n	8001f5c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	4b44      	ldr	r3, [pc, #272]	; (8002074 <HAL_ADC_Init+0x288>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff25 	bl	8001dc4 <LL_ADC_INJ_IsConversionOngoing>
 8001f7a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d140      	bne.n	8002004 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d13d      	bne.n	8002004 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7e1b      	ldrb	r3, [r3, #24]
 8001f90:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f92:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f9a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001faa:	f023 0306 	bic.w	r3, r3, #6
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d118      	bne.n	8001ff4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	611a      	str	r2, [r3, #16]
 8001ff2:	e007      	b.n	8002004 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d10c      	bne.n	8002026 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f023 010f 	bic.w	r1, r3, #15
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
 8002024:	e007      	b.n	8002036 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 020f 	bic.w	r2, r2, #15
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f023 0303 	bic.w	r3, r3, #3
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	659a      	str	r2, [r3, #88]	; 0x58
 8002046:	e007      	b.n	8002058 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f043 0210 	orr.w	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002058:	7ffb      	ldrb	r3, [r7, #31]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000
 8002068:	053e2d63 	.word	0x053e2d63
 800206c:	50040000 	.word	0x50040000
 8002070:	50040300 	.word	0x50040300
 8002074:	fff0c007 	.word	0xfff0c007

08002078 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b0b6      	sub	sp, #216	; 0xd8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x22>
 8002096:	2302      	movs	r3, #2
 8002098:	e3d5      	b.n	8002846 <HAL_ADC_ConfigChannel+0x7ce>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fe79 	bl	8001d9e <LL_ADC_REG_IsConversionOngoing>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 83ba 	bne.w	8002828 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d824      	bhi.n	800210e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	3b02      	subs	r3, #2
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d81b      	bhi.n	8002106 <HAL_ADC_ConfigChannel+0x8e>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <HAL_ADC_ConfigChannel+0x5c>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	080020ed 	.word	0x080020ed
 80020dc:	080020f5 	.word	0x080020f5
 80020e0:	080020fd 	.word	0x080020fd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80020e4:	230c      	movs	r3, #12
 80020e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020ea:	e010      	b.n	800210e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80020ec:	2312      	movs	r3, #18
 80020ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020f2:	e00c      	b.n	800210e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80020f4:	2318      	movs	r3, #24
 80020f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020fa:	e008      	b.n	800210e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80020fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002104:	e003      	b.n	800210e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002106:	2306      	movs	r3, #6
 8002108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800210c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800211c:	f7ff fd62 	bl	8001be4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fe3a 	bl	8001d9e <LL_ADC_REG_IsConversionOngoing>
 800212a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fe46 	bl	8001dc4 <LL_ADC_INJ_IsConversionOngoing>
 8002138:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800213c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 81bf 	bne.w	80024c4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002146:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 81ba 	bne.w	80024c4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002158:	d10f      	bne.n	800217a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	4619      	mov	r1, r3
 8002166:	f7ff fd69 	bl	8001c3c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fd23 	bl	8001bbe <LL_ADC_SetSamplingTimeCommonConfig>
 8002178:	e00e      	b.n	8002198 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	461a      	mov	r2, r3
 8002188:	f7ff fd58 	bl	8001c3c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fd13 	bl	8001bbe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d00a      	beq.n	80021d0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6919      	ldr	r1, [r3, #16]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ca:	f7ff fca3 	bl	8001b14 <LL_ADC_SetOffset>
 80021ce:	e179      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fcc0 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x184>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fcb5 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	f003 021f 	and.w	r2, r3, #31
 80021fa:	e01e      	b.n	800223a <HAL_ADC_ConfigChannel+0x1c2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fcaa 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800221a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800221e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002222:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e004      	b.n	8002238 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800222e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x1da>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0e9b      	lsrs	r3, r3, #26
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	e018      	b.n	8002284 <HAL_ADC_ConfigChannel+0x20c>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800226a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800226e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e004      	b.n	8002284 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800227a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002284:	429a      	cmp	r2, r3
 8002286:	d106      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fc79 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2101      	movs	r1, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fc5d 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x24a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fc52 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	0e9b      	lsrs	r3, r3, #26
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	e01e      	b.n	8002300 <HAL_ADC_ConfigChannel+0x288>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fc47 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80022e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80022e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e004      	b.n	80022fe <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80022f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x2a0>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	e018      	b.n	800234a <HAL_ADC_ConfigChannel+0x2d2>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800232c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e004      	b.n	800234a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800234a:	429a      	cmp	r2, r3
 800234c:	d106      	bne.n	800235c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fc16 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fbfa 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x310>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2102      	movs	r1, #2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fbef 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	f003 021f 	and.w	r2, r3, #31
 8002386:	e01e      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x34e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2102      	movs	r1, #2
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fbe4 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80023a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80023ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80023b6:	2320      	movs	r3, #32
 80023b8:	e004      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80023ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <HAL_ADC_ConfigChannel+0x366>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	e014      	b.n	8002408 <HAL_ADC_ConfigChannel+0x390>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80023ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80023f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e004      	b.n	8002408 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80023fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002408:	429a      	cmp	r2, r3
 800240a:	d106      	bne.n	800241a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2200      	movs	r2, #0
 8002412:	2102      	movs	r1, #2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fbb7 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2103      	movs	r1, #3
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fb9b 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x3ce>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2103      	movs	r1, #3
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fb90 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800243c:	4603      	mov	r3, r0
 800243e:	0e9b      	lsrs	r3, r3, #26
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	e017      	b.n	8002476 <HAL_ADC_ConfigChannel+0x3fe>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2103      	movs	r1, #3
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fb85 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800245e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002460:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002468:	2320      	movs	r3, #32
 800246a:	e003      	b.n	8002474 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800246c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <HAL_ADC_ConfigChannel+0x416>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	0e9b      	lsrs	r3, r3, #26
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	e011      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x43a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800249c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800249e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80024a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80024a6:	2320      	movs	r3, #32
 80024a8:	e003      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80024aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d106      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2200      	movs	r2, #0
 80024bc:	2103      	movs	r1, #3
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fb62 	bl	8001b88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fc55 	bl	8001d78 <LL_ADC_IsEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f040 813f 	bne.w	8002754 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6819      	ldr	r1, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f7ff fbd6 	bl	8001c94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a8e      	ldr	r2, [pc, #568]	; (8002728 <HAL_ADC_ConfigChannel+0x6b0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	f040 8130 	bne.w	8002754 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <HAL_ADC_ConfigChannel+0x4a4>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0e9b      	lsrs	r3, r3, #26
 800250a:	3301      	adds	r3, #1
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2b09      	cmp	r3, #9
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e019      	b.n	8002550 <HAL_ADC_ConfigChannel+0x4d8>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800252a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800252e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e003      	b.n	8002540 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3301      	adds	r3, #1
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b09      	cmp	r3, #9
 8002548:	bf94      	ite	ls
 800254a:	2301      	movls	r3, #1
 800254c:	2300      	movhi	r3, #0
 800254e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002550:	2b00      	cmp	r3, #0
 8002552:	d079      	beq.n	8002648 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x4f8>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0e9b      	lsrs	r3, r3, #26
 8002566:	3301      	adds	r3, #1
 8002568:	069b      	lsls	r3, r3, #26
 800256a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256e:	e015      	b.n	800259c <HAL_ADC_ConfigChannel+0x524>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800257e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002580:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002588:	2320      	movs	r3, #32
 800258a:	e003      	b.n	8002594 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800258c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3301      	adds	r3, #1
 8002596:	069b      	lsls	r3, r3, #26
 8002598:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x544>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	3301      	adds	r3, #1
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	e017      	b.n	80025ec <HAL_ADC_ConfigChannel+0x574>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80025d4:	2320      	movs	r3, #32
 80025d6:	e003      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80025d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	ea42 0103 	orr.w	r1, r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x59a>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	3301      	adds	r3, #1
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	051b      	lsls	r3, r3, #20
 8002610:	e018      	b.n	8002644 <HAL_ADC_ConfigChannel+0x5cc>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e003      	b.n	8002636 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f003 021f 	and.w	r2, r3, #31
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002644:	430b      	orrs	r3, r1
 8002646:	e080      	b.n	800274a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x5ec>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	3301      	adds	r3, #1
 800265c:	069b      	lsls	r3, r3, #26
 800265e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002662:	e015      	b.n	8002690 <HAL_ADC_ConfigChannel+0x618>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e003      	b.n	8002688 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3301      	adds	r3, #1
 800268a:	069b      	lsls	r3, r3, #26
 800268c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x638>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	3301      	adds	r3, #1
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	e017      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x668>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	61bb      	str	r3, [r7, #24]
  return result;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80026c8:	2320      	movs	r3, #32
 80026ca:	e003      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	ea42 0103 	orr.w	r1, r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_ADC_ConfigChannel+0x694>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0e9b      	lsrs	r3, r3, #26
 80026f6:	3301      	adds	r3, #1
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	3b1e      	subs	r3, #30
 8002704:	051b      	lsls	r3, r3, #20
 8002706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800270a:	e01d      	b.n	8002748 <HAL_ADC_ConfigChannel+0x6d0>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	60fb      	str	r3, [r7, #12]
  return result;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e005      	b.n	8002734 <HAL_ADC_ConfigChannel+0x6bc>
 8002728:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	3301      	adds	r3, #1
 8002736:	f003 021f 	and.w	r2, r3, #31
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	3b1e      	subs	r3, #30
 8002742:	051b      	lsls	r3, r3, #20
 8002744:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002748:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800274e:	4619      	mov	r1, r3
 8002750:	f7ff fa74 	bl	8001c3c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_ADC_ConfigChannel+0x7d8>)
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d06c      	beq.n	800283a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002760:	483c      	ldr	r0, [pc, #240]	; (8002854 <HAL_ADC_ConfigChannel+0x7dc>)
 8002762:	f7ff f9c9 	bl	8001af8 <LL_ADC_GetCommonPathInternalCh>
 8002766:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <HAL_ADC_ConfigChannel+0x7e0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d127      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d121      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a35      	ldr	r2, [pc, #212]	; (800285c <HAL_ADC_ConfigChannel+0x7e4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d157      	bne.n	800283a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800278a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800278e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002792:	4619      	mov	r1, r3
 8002794:	482f      	ldr	r0, [pc, #188]	; (8002854 <HAL_ADC_ConfigChannel+0x7dc>)
 8002796:	f7ff f99c 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_ADC_ConfigChannel+0x7e8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	099b      	lsrs	r3, r3, #6
 80027a0:	4a30      	ldr	r2, [pc, #192]	; (8002864 <HAL_ADC_ConfigChannel+0x7ec>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	099b      	lsrs	r3, r3, #6
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027b4:	e002      	b.n	80027bc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f9      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027c2:	e03a      	b.n	800283a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <HAL_ADC_ConfigChannel+0x7f0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d113      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_ADC_ConfigChannel+0x7e4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d12a      	bne.n	800283a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ec:	4619      	mov	r1, r3
 80027ee:	4819      	ldr	r0, [pc, #100]	; (8002854 <HAL_ADC_ConfigChannel+0x7dc>)
 80027f0:	f7ff f96f 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f4:	e021      	b.n	800283a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1c      	ldr	r2, [pc, #112]	; (800286c <HAL_ADC_ConfigChannel+0x7f4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d11c      	bne.n	800283a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a12      	ldr	r2, [pc, #72]	; (800285c <HAL_ADC_ConfigChannel+0x7e4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d111      	bne.n	800283a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800281a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800281e:	4619      	mov	r1, r3
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <HAL_ADC_ConfigChannel+0x7dc>)
 8002822:	f7ff f956 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
 8002826:	e008      	b.n	800283a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002842:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002846:	4618      	mov	r0, r3
 8002848:	37d8      	adds	r7, #216	; 0xd8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	80080000 	.word	0x80080000
 8002854:	50040300 	.word	0x50040300
 8002858:	c7520000 	.word	0xc7520000
 800285c:	50040000 	.word	0x50040000
 8002860:	20000000 	.word	0x20000000
 8002864:	053e2d63 	.word	0x053e2d63
 8002868:	cb840000 	.word	0xcb840000
 800286c:	80000001 	.word	0x80000001

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	; (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f7ff ff8e 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff29 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff3e 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff8e 	bl	8002964 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5d 	bl	8002910 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff31 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffa2 	bl	80029cc <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0ac      	b.n	8002c00 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f8b2 	bl	8002c14 <DFSDM_GetChannelFromInstance>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4a55      	ldr	r2, [pc, #340]	; (8002c08 <HAL_DFSDM_ChannelInit+0x174>)
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e09f      	b.n	8002c00 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7fe fb13 	bl	80010ec <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002ac6:	4b51      	ldr	r3, [pc, #324]	; (8002c0c <HAL_DFSDM_ChannelInit+0x178>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	4a4f      	ldr	r2, [pc, #316]	; (8002c0c <HAL_DFSDM_ChannelInit+0x178>)
 8002ace:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002ad0:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <HAL_DFSDM_ChannelInit+0x178>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d125      	bne.n	8002b24 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002ad8:	4b4d      	ldr	r3, [pc, #308]	; (8002c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a4c      	ldr	r2, [pc, #304]	; (8002c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ae2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4948      	ldr	r1, [pc, #288]	; (8002c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a46      	ldr	r2, [pc, #280]	; (8002c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8002af8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002afc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	791b      	ldrb	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d108      	bne.n	8002b18 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002b06:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	493f      	ldr	r1, [pc, #252]	; (8002c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b18:	4b3d      	ldr	r3, [pc, #244]	; (8002c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a3c      	ldr	r2, [pc, #240]	; (8002c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b22:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002b32:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b42:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b48:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 020f 	bic.w	r2, r2, #15
 8002b60:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6819      	ldr	r1, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002b88:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6899      	ldr	r1, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f002 0207 	and.w	r2, r2, #7
 8002bb4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002be0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f810 	bl	8002c14 <DFSDM_GetChannelFromInstance>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4904      	ldr	r1, [pc, #16]	; (8002c08 <HAL_DFSDM_ChannelInit+0x174>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000544 	.word	0x20000544
 8002c0c:	20000540 	.word	0x20000540
 8002c10:	40016000 	.word	0x40016000

08002c14 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a1c      	ldr	r2, [pc, #112]	; (8002c90 <DFSDM_GetChannelFromInstance+0x7c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d102      	bne.n	8002c2a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e02b      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <DFSDM_GetChannelFromInstance+0x80>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d102      	bne.n	8002c38 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e024      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <DFSDM_GetChannelFromInstance+0x84>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d102      	bne.n	8002c46 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c40:	2302      	movs	r3, #2
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e01d      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <DFSDM_GetChannelFromInstance+0x88>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d102      	bne.n	8002c54 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e016      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d102      	bne.n	8002c62 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c5c:	2305      	movs	r3, #5
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e00f      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a0f      	ldr	r2, [pc, #60]	; (8002ca4 <DFSDM_GetChannelFromInstance+0x90>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d102      	bne.n	8002c70 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e008      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <DFSDM_GetChannelFromInstance+0x94>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d102      	bne.n	8002c7e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c78:	2307      	movs	r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e001      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40016000 	.word	0x40016000
 8002c94:	40016020 	.word	0x40016020
 8002c98:	40016040 	.word	0x40016040
 8002c9c:	40016080 	.word	0x40016080
 8002ca0:	400160a0 	.word	0x400160a0
 8002ca4:	400160c0 	.word	0x400160c0
 8002ca8:	400160e0 	.word	0x400160e0

08002cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cba:	e166      	b.n	8002f8a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8158 	beq.w	8002f84 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d005      	beq.n	8002cec <HAL_GPIO_Init+0x40>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d130      	bne.n	8002d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d22:	2201      	movs	r2, #1
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	f003 0201 	and.w	r2, r3, #1
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d017      	beq.n	8002d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d123      	bne.n	8002dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	08da      	lsrs	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3208      	adds	r2, #8
 8002d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	6939      	ldr	r1, [r7, #16]
 8002dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	2203      	movs	r2, #3
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0203 	and.w	r2, r3, #3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80b2 	beq.w	8002f84 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e20:	4b61      	ldr	r3, [pc, #388]	; (8002fa8 <HAL_GPIO_Init+0x2fc>)
 8002e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e24:	4a60      	ldr	r2, [pc, #384]	; (8002fa8 <HAL_GPIO_Init+0x2fc>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6613      	str	r3, [r2, #96]	; 0x60
 8002e2c:	4b5e      	ldr	r3, [pc, #376]	; (8002fa8 <HAL_GPIO_Init+0x2fc>)
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e38:	4a5c      	ldr	r2, [pc, #368]	; (8002fac <HAL_GPIO_Init+0x300>)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e62:	d02b      	beq.n	8002ebc <HAL_GPIO_Init+0x210>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a52      	ldr	r2, [pc, #328]	; (8002fb0 <HAL_GPIO_Init+0x304>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d025      	beq.n	8002eb8 <HAL_GPIO_Init+0x20c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a51      	ldr	r2, [pc, #324]	; (8002fb4 <HAL_GPIO_Init+0x308>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d01f      	beq.n	8002eb4 <HAL_GPIO_Init+0x208>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a50      	ldr	r2, [pc, #320]	; (8002fb8 <HAL_GPIO_Init+0x30c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d019      	beq.n	8002eb0 <HAL_GPIO_Init+0x204>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a4f      	ldr	r2, [pc, #316]	; (8002fbc <HAL_GPIO_Init+0x310>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <HAL_GPIO_Init+0x200>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a4e      	ldr	r2, [pc, #312]	; (8002fc0 <HAL_GPIO_Init+0x314>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_GPIO_Init+0x1fc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a4d      	ldr	r2, [pc, #308]	; (8002fc4 <HAL_GPIO_Init+0x318>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d007      	beq.n	8002ea4 <HAL_GPIO_Init+0x1f8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a4c      	ldr	r2, [pc, #304]	; (8002fc8 <HAL_GPIO_Init+0x31c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_GPIO_Init+0x1f4>
 8002e9c:	2307      	movs	r3, #7
 8002e9e:	e00e      	b.n	8002ebe <HAL_GPIO_Init+0x212>
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	e00c      	b.n	8002ebe <HAL_GPIO_Init+0x212>
 8002ea4:	2306      	movs	r3, #6
 8002ea6:	e00a      	b.n	8002ebe <HAL_GPIO_Init+0x212>
 8002ea8:	2305      	movs	r3, #5
 8002eaa:	e008      	b.n	8002ebe <HAL_GPIO_Init+0x212>
 8002eac:	2304      	movs	r3, #4
 8002eae:	e006      	b.n	8002ebe <HAL_GPIO_Init+0x212>
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e004      	b.n	8002ebe <HAL_GPIO_Init+0x212>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e002      	b.n	8002ebe <HAL_GPIO_Init+0x212>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_GPIO_Init+0x212>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	f002 0203 	and.w	r2, r2, #3
 8002ec4:	0092      	lsls	r2, r2, #2
 8002ec6:	4093      	lsls	r3, r2
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ece:	4937      	ldr	r1, [pc, #220]	; (8002fac <HAL_GPIO_Init+0x300>)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_GPIO_Init+0x320>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f00:	4a32      	ldr	r2, [pc, #200]	; (8002fcc <HAL_GPIO_Init+0x320>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f06:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_GPIO_Init+0x320>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f2a:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_GPIO_Init+0x320>)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f30:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <HAL_GPIO_Init+0x320>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f54:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <HAL_GPIO_Init+0x320>)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_GPIO_Init+0x320>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f7e:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <HAL_GPIO_Init+0x320>)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3301      	adds	r3, #1
 8002f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f47f ae91 	bne.w	8002cbc <HAL_GPIO_Init+0x10>
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	48000400 	.word	0x48000400
 8002fb4:	48000800 	.word	0x48000800
 8002fb8:	48000c00 	.word	0x48000c00
 8002fbc:	48001000 	.word	0x48001000
 8002fc0:	48001400 	.word	0x48001400
 8002fc4:	48001800 	.word	0x48001800
 8002fc8:	48001c00 	.word	0x48001c00
 8002fcc:	40010400 	.word	0x40010400

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f806 	bl	8003030 <HAL_GPIO_EXTI_Callback>
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40010400 	.word	0x40010400

08003030 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e08d      	b.n	8003174 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fe f8a1 	bl	80011b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2224      	movs	r2, #36	; 0x24
 8003076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003096:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d107      	bne.n	80030c0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	e006      	b.n	80030ce <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d108      	bne.n	80030e8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	e007      	b.n	80030f8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800310a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800311a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69d9      	ldr	r1, [r3, #28]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1a      	ldr	r2, [r3, #32]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b20      	cmp	r3, #32
 8003190:	d138      	bne.n	8003204 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800319c:	2302      	movs	r3, #2
 800319e:	e032      	b.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	e000      	b.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003204:	2302      	movs	r3, #2
  }
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b20      	cmp	r3, #32
 8003226:	d139      	bne.n	800329c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003232:	2302      	movs	r3, #2
 8003234:	e033      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	; 0x24
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003264:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80032b8:	f7fe fbc8 	bl	8001a4c <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e092      	b.n	80033f0 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 808b 	bne.w	80033f0 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe f80c 	bl	80012f8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80032e0:	f241 3188 	movw	r1, #5000	; 0x1388
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f88b 	bl	8003400 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	4b42      	ldr	r3, [pc, #264]	; (80033fc <HAL_OSPI_Init+0x150>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68d1      	ldr	r1, [r2, #12]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6912      	ldr	r2, [r2, #16]
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0412      	lsls	r2, r2, #16
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6952      	ldr	r2, [r2, #20]
 8003306:	3a01      	subs	r2, #1
 8003308:	0212      	lsls	r2, r2, #8
 800330a:	4311      	orrs	r1, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003310:	4311      	orrs	r1, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	69d2      	ldr	r2, [r2, #28]
 8003316:	4311      	orrs	r1, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	0412      	lsls	r2, r2, #16
 800332a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	021a      	lsls	r2, r3, #8
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	2120      	movs	r1, #32
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fb98 	bl	8003a88 <OSPI_WaitFlagStateUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d146      	bne.n	80033f0 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	1e5a      	subs	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003398:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d107      	bne.n	80033d8 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0202 	orr.w	r2, r2, #2
 80033d6:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033e0:	d103      	bne.n	80033ea <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	645a      	str	r2, [r3, #68]	; 0x44
 80033e8:	e002      	b.n	80033f0 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2202      	movs	r2, #2
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	f8e0f8f4 	.word	0xf8e0f8f4

08003400 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b092      	sub	sp, #72	; 0x48
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a08      	ldr	r2, [pc, #32]	; (8003460 <HAL_OSPIM_Config+0x40>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d105      	bne.n	800344e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800344c:	e004      	b.n	8003458 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800344e:	2301      	movs	r3, #1
 8003450:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003458:	2300      	movs	r3, #0
 800345a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800345e:	e01f      	b.n	80034a0 <HAL_OSPIM_Config+0x80>
 8003460:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003464:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003468:	3301      	adds	r3, #1
 800346a:	b2d8      	uxtb	r0, r3
 800346c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003470:	f107 0114 	add.w	r1, r7, #20
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	4619      	mov	r1, r3
 8003480:	f000 fb3a 	bl	8003af8 <OSPIM_GetConfig>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2208      	movs	r2, #8
 8003494:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003496:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800349a:	3301      	adds	r3, #1
 800349c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80034a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d9dd      	bls.n	8003464 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80034a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 82de 	bne.w	8003a6e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80034b2:	4bc6      	ldr	r3, [pc, #792]	; (80037cc <HAL_OSPIM_Config+0x3ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80034be:	4bc3      	ldr	r3, [pc, #780]	; (80037cc <HAL_OSPIM_Config+0x3ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4ac2      	ldr	r2, [pc, #776]	; (80037cc <HAL_OSPIM_Config+0x3ac>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80034ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80034d6:	4bbe      	ldr	r3, [pc, #760]	; (80037d0 <HAL_OSPIM_Config+0x3b0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80034e2:	4bbb      	ldr	r3, [pc, #748]	; (80037d0 <HAL_OSPIM_Config+0x3b0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4aba      	ldr	r2, [pc, #744]	; (80037d0 <HAL_OSPIM_Config+0x3b0>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80034ee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034f2:	f043 0302 	orr.w	r3, r3, #2
 80034f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80034fa:	49b6      	ldr	r1, [pc, #728]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 80034fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	3348      	adds	r3, #72	; 0x48
 8003508:	443b      	add	r3, r7
 800350a:	3b2c      	subs	r3, #44	; 0x2c
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3b01      	subs	r3, #1
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	48af      	ldr	r0, [pc, #700]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 8003518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	3348      	adds	r3, #72	; 0x48
 8003524:	443b      	add	r3, r7
 8003526:	3b2c      	subs	r3, #44	; 0x2c
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3b01      	subs	r3, #1
 800352c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4403      	add	r3, r0
 8003534:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	3348      	adds	r3, #72	; 0x48
 8003542:	443b      	add	r3, r7
 8003544:	3b34      	subs	r3, #52	; 0x34
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80a1 	beq.w	8003690 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800354e:	49a1      	ldr	r1, [pc, #644]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 8003550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	3348      	adds	r3, #72	; 0x48
 800355c:	443b      	add	r3, r7
 800355e:	3b34      	subs	r3, #52	; 0x34
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3b01      	subs	r3, #1
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	489a      	ldr	r0, [pc, #616]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 800356c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	3348      	adds	r3, #72	; 0x48
 8003578:	443b      	add	r3, r7
 800357a:	3b34      	subs	r3, #52	; 0x34
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3b01      	subs	r3, #1
 8003580:	f021 0201 	bic.w	r2, r1, #1
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4403      	add	r3, r0
 8003588:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800358a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	3348      	adds	r3, #72	; 0x48
 8003596:	443b      	add	r3, r7
 8003598:	3b30      	subs	r3, #48	; 0x30
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01d      	beq.n	80035dc <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80035a0:	498c      	ldr	r1, [pc, #560]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 80035a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	3348      	adds	r3, #72	; 0x48
 80035ae:	443b      	add	r3, r7
 80035b0:	3b30      	subs	r3, #48	; 0x30
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	4885      	ldr	r0, [pc, #532]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 80035be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	3348      	adds	r3, #72	; 0x48
 80035ca:	443b      	add	r3, r7
 80035cc:	3b30      	subs	r3, #48	; 0x30
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	f021 0210 	bic.w	r2, r1, #16
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4403      	add	r3, r0
 80035da:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3348      	adds	r3, #72	; 0x48
 80035e8:	443b      	add	r3, r7
 80035ea:	3b28      	subs	r3, #40	; 0x28
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d021      	beq.n	8003636 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80035f2:	4978      	ldr	r1, [pc, #480]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 80035f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	3348      	adds	r3, #72	; 0x48
 8003600:	443b      	add	r3, r7
 8003602:	3b28      	subs	r3, #40	; 0x28
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3b01      	subs	r3, #1
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	4870      	ldr	r0, [pc, #448]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 8003614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	3348      	adds	r3, #72	; 0x48
 8003620:	443b      	add	r3, r7
 8003622:	3b28      	subs	r3, #40	; 0x28
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3b01      	subs	r3, #1
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4403      	add	r3, r0
 8003634:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	3348      	adds	r3, #72	; 0x48
 8003642:	443b      	add	r3, r7
 8003644:	3b24      	subs	r3, #36	; 0x24
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d021      	beq.n	8003690 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800364c:	4961      	ldr	r1, [pc, #388]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 800364e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	3348      	adds	r3, #72	; 0x48
 800365a:	443b      	add	r3, r7
 800365c:	3b24      	subs	r3, #36	; 0x24
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3b01      	subs	r3, #1
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	4859      	ldr	r0, [pc, #356]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 800366e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	3348      	adds	r3, #72	; 0x48
 800367a:	443b      	add	r3, r7
 800367c:	3b24      	subs	r3, #36	; 0x24
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3b01      	subs	r3, #1
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4403      	add	r3, r0
 800368e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3348      	adds	r3, #72	; 0x48
 80036a2:	443b      	add	r3, r7
 80036a4:	3b34      	subs	r3, #52	; 0x34
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4299      	cmp	r1, r3
 80036aa:	d038      	beq.n	800371e <HAL_OSPIM_Config+0x2fe>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	3348      	adds	r3, #72	; 0x48
 80036be:	443b      	add	r3, r7
 80036c0:	3b30      	subs	r3, #48	; 0x30
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4299      	cmp	r1, r3
 80036c6:	d02a      	beq.n	800371e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6899      	ldr	r1, [r3, #8]
 80036cc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	3348      	adds	r3, #72	; 0x48
 80036da:	443b      	add	r3, r7
 80036dc:	3b2c      	subs	r3, #44	; 0x2c
 80036de:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80036e0:	4299      	cmp	r1, r3
 80036e2:	d01c      	beq.n	800371e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	68d9      	ldr	r1, [r3, #12]
 80036e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	3348      	adds	r3, #72	; 0x48
 80036f6:	443b      	add	r3, r7
 80036f8:	3b28      	subs	r3, #40	; 0x28
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4299      	cmp	r1, r3
 80036fe:	d00e      	beq.n	800371e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	6919      	ldr	r1, [r3, #16]
 8003704:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	3348      	adds	r3, #72	; 0x48
 8003712:	443b      	add	r3, r7
 8003714:	3b24      	subs	r3, #36	; 0x24
 8003716:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003718:	4299      	cmp	r1, r3
 800371a:	f040 80d3 	bne.w	80038c4 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800371e:	492d      	ldr	r1, [pc, #180]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 8003720:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3348      	adds	r3, #72	; 0x48
 800372e:	443b      	add	r3, r7
 8003730:	3b34      	subs	r3, #52	; 0x34
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3b01      	subs	r3, #1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	4825      	ldr	r0, [pc, #148]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 800373e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	3348      	adds	r3, #72	; 0x48
 800374c:	443b      	add	r3, r7
 800374e:	3b34      	subs	r3, #52	; 0x34
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3b01      	subs	r3, #1
 8003754:	f021 0201 	bic.w	r2, r1, #1
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4403      	add	r3, r0
 800375c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800375e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	3348      	adds	r3, #72	; 0x48
 800376c:	443b      	add	r3, r7
 800376e:	3b30      	subs	r3, #48	; 0x30
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01f      	beq.n	80037b6 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003776:	4917      	ldr	r1, [pc, #92]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 8003778:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	3348      	adds	r3, #72	; 0x48
 8003786:	443b      	add	r3, r7
 8003788:	3b30      	subs	r3, #48	; 0x30
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3b01      	subs	r3, #1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	480f      	ldr	r0, [pc, #60]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 8003796:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	3348      	adds	r3, #72	; 0x48
 80037a4:	443b      	add	r3, r7
 80037a6:	3b30      	subs	r3, #48	; 0x30
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f021 0210 	bic.w	r2, r1, #16
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4403      	add	r3, r0
 80037b4:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80037b6:	4907      	ldr	r1, [pc, #28]	; (80037d4 <HAL_OSPIM_Config+0x3b4>)
 80037b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	3348      	adds	r3, #72	; 0x48
 80037c6:	443b      	add	r3, r7
 80037c8:	3b2c      	subs	r3, #44	; 0x2c
 80037ca:	e005      	b.n	80037d8 <HAL_OSPIM_Config+0x3b8>
 80037cc:	a0001000 	.word	0xa0001000
 80037d0:	a0001400 	.word	0xa0001400
 80037d4:	50061c00 	.word	0x50061c00
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3b01      	subs	r3, #1
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	48a6      	ldr	r0, [pc, #664]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 80037e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	3348      	adds	r3, #72	; 0x48
 80037f2:	443b      	add	r3, r7
 80037f4:	3b2c      	subs	r3, #44	; 0x2c
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4403      	add	r3, r0
 8003802:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003804:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3348      	adds	r3, #72	; 0x48
 8003812:	443b      	add	r3, r7
 8003814:	3b28      	subs	r3, #40	; 0x28
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d023      	beq.n	8003864 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800381c:	4997      	ldr	r1, [pc, #604]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 800381e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	3348      	adds	r3, #72	; 0x48
 800382c:	443b      	add	r3, r7
 800382e:	3b28      	subs	r3, #40	; 0x28
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3b01      	subs	r3, #1
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	488f      	ldr	r0, [pc, #572]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 8003840:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	3348      	adds	r3, #72	; 0x48
 800384e:	443b      	add	r3, r7
 8003850:	3b28      	subs	r3, #40	; 0x28
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4403      	add	r3, r0
 8003862:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003864:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3348      	adds	r3, #72	; 0x48
 8003872:	443b      	add	r3, r7
 8003874:	3b24      	subs	r3, #36	; 0x24
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d023      	beq.n	80038c4 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800387c:	497f      	ldr	r1, [pc, #508]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 800387e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	3348      	adds	r3, #72	; 0x48
 800388c:	443b      	add	r3, r7
 800388e:	3b24      	subs	r3, #36	; 0x24
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3b01      	subs	r3, #1
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	4877      	ldr	r0, [pc, #476]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 80038a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	3348      	adds	r3, #72	; 0x48
 80038ae:	443b      	add	r3, r7
 80038b0:	3b24      	subs	r3, #36	; 0x24
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4403      	add	r3, r0
 80038c2:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80038c4:	4a6d      	ldr	r2, [pc, #436]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d8:	025b      	lsls	r3, r3, #9
 80038da:	431a      	orrs	r2, r3
 80038dc:	4967      	ldr	r1, [pc, #412]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80038ee:	4a63      	ldr	r2, [pc, #396]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 0203 	bic.w	r2, r3, #3
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	431a      	orrs	r2, r3
 8003906:	495d      	ldr	r1, [pc, #372]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3b01      	subs	r3, #1
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d014      	beq.n	800394a <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003920:	4a56      	ldr	r2, [pc, #344]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003934:	015b      	lsls	r3, r3, #5
 8003936:	431a      	orrs	r2, r3
 8003938:	4950      	ldr	r1, [pc, #320]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	f042 0210 	orr.w	r2, r2, #16
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d019      	beq.n	800398a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003956:	4a49      	ldr	r2, [pc, #292]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	3b01      	subs	r3, #1
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800396c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396e:	049b      	lsls	r3, r3, #18
 8003970:	431a      	orrs	r2, r3
 8003972:	4942      	ldr	r1, [pc, #264]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	3b01      	subs	r3, #1
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	e01c      	b.n	80039c4 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003992:	4a3a      	ldr	r2, [pc, #232]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	3b01      	subs	r3, #1
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039aa:	069b      	lsls	r3, r3, #26
 80039ac:	431a      	orrs	r2, r3
 80039ae:	4933      	ldr	r1, [pc, #204]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d019      	beq.n	8003a04 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80039d0:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e8:	049b      	lsls	r3, r3, #18
 80039ea:	431a      	orrs	r2, r3
 80039ec:	4923      	ldr	r1, [pc, #140]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	e01c      	b.n	8003a3e <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d018      	beq.n	8003a3e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003a0c:	4a1b      	ldr	r2, [pc, #108]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a24:	069b      	lsls	r3, r3, #26
 8003a26:	431a      	orrs	r2, r3
 8003a28:	4914      	ldr	r1, [pc, #80]	; (8003a7c <HAL_OSPIM_Config+0x65c>)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003a3e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <HAL_OSPIM_Config+0x660>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <HAL_OSPIM_Config+0x660>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003a56:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_OSPIM_Config+0x664>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <HAL_OSPIM_Config+0x664>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003a6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3748      	adds	r7, #72	; 0x48
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	50061c00 	.word	0x50061c00
 8003a80:	a0001000 	.word	0xa0001000
 8003a84:	a0001400 	.word	0xa0001400

08003a88 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a98:	e01a      	b.n	8003ad0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d016      	beq.n	8003ad0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fd ffd3 	bl	8001a4c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e00e      	b.n	8003aee <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a1a      	ldr	r2, [r3, #32]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1d6      	bne.n	8003a9a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <OSPIM_GetConfig+0x26>
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d802      	bhi.n	8003b1e <OSPIM_GetConfig+0x26>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
 8003b22:	e08e      	b.n	8003c42 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d101      	bne.n	8003b4c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003b48:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <OSPIM_GetConfig+0x158>)
 8003b4a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e074      	b.n	8003c3c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003b52:	4a40      	ldr	r2, [pc, #256]	; (8003c54 <OSPIM_GetConfig+0x15c>)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4053      	eors	r3, r2
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4053      	eors	r3, r2
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4053      	eors	r3, r2
 8003bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d018      	beq.n	8003bfa <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4053      	eors	r3, r2
 8003bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d111      	bne.n	8003bfa <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3301      	adds	r3, #1
 8003be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	60da      	str	r2, [r3, #12]
 8003bec:	e005      	b.n	8003bfa <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d018      	beq.n	8003c36 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4053      	eors	r3, r2
 8003c0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d111      	bne.n	8003c36 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	611a      	str	r2, [r3, #16]
 8003c28:	e005      	b.n	8003c36 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d987      	bls.n	8003b52 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	04040222 	.word	0x04040222
 8003c54:	50061c00 	.word	0x50061c00

08003c58 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40007000 	.word	0x40007000

08003c78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c88:	d102      	bne.n	8003c90 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c8e:	e00b      	b.n	8003ca8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9e:	d102      	bne.n	8003ca6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca4:	e000      	b.n	8003ca8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003ca6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40007000 	.word	0x40007000

08003cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d141      	bne.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cc6:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	d131      	bne.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cd4:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cda:	4a46      	ldr	r2, [pc, #280]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ce4:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cec:	4a41      	ldr	r2, [pc, #260]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003cf4:	4b40      	ldr	r3, [pc, #256]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2232      	movs	r2, #50	; 0x32
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	4a3f      	ldr	r2, [pc, #252]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	0c9b      	lsrs	r3, r3, #18
 8003d06:	3301      	adds	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d0a:	e002      	b.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d12:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1e:	d102      	bne.n	8003d26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f2      	bne.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d26:	4b33      	ldr	r3, [pc, #204]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d158      	bne.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e057      	b.n	8003de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d38:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3e:	4a2d      	ldr	r2, [pc, #180]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d48:	e04d      	b.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d50:	d141      	bne.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d52:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5e:	d131      	bne.n	8003dc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d66:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d70:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d78:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d80:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2232      	movs	r2, #50	; 0x32
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	0c9b      	lsrs	r3, r3, #18
 8003d92:	3301      	adds	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d96:	e002      	b.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d102      	bne.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f2      	bne.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbe:	d112      	bne.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e011      	b.n	8003de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dca:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dd4:	e007      	b.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dd6:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dde:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40007000 	.word	0x40007000
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	431bde83 	.word	0x431bde83

08003e00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f000 bc08 	b.w	8004624 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e14:	4b96      	ldr	r3, [pc, #600]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1e:	4b94      	ldr	r3, [pc, #592]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80e4 	beq.w	8003ffe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4c>
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	f040 808b 	bne.w	8003f5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	f040 8087 	bne.w	8003f5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e4c:	4b88      	ldr	r3, [pc, #544]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_OscConfig+0x64>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e3df      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1a      	ldr	r2, [r3, #32]
 8003e68:	4b81      	ldr	r3, [pc, #516]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <HAL_RCC_OscConfig+0x7e>
 8003e74:	4b7e      	ldr	r3, [pc, #504]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e7c:	e005      	b.n	8003e8a <HAL_RCC_OscConfig+0x8a>
 8003e7e:	4b7c      	ldr	r3, [pc, #496]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d223      	bcs.n	8003ed6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fdcc 	bl	8004a30 <RCC_SetFlashLatencyFromMSIRange>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e3c0      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea2:	4b73      	ldr	r3, [pc, #460]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a72      	ldr	r2, [pc, #456]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ea8:	f043 0308 	orr.w	r3, r3, #8
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4b70      	ldr	r3, [pc, #448]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	496d      	ldr	r1, [pc, #436]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec0:	4b6b      	ldr	r3, [pc, #428]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	4968      	ldr	r1, [pc, #416]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	604b      	str	r3, [r1, #4]
 8003ed4:	e025      	b.n	8003f22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed6:	4b66      	ldr	r3, [pc, #408]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a65      	ldr	r2, [pc, #404]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b63      	ldr	r3, [pc, #396]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4960      	ldr	r1, [pc, #384]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef4:	4b5e      	ldr	r3, [pc, #376]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	495b      	ldr	r1, [pc, #364]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fd8c 	bl	8004a30 <RCC_SetFlashLatencyFromMSIRange>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e380      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f22:	f000 fcc1 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b51      	ldr	r3, [pc, #324]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	4950      	ldr	r1, [pc, #320]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f34:	5ccb      	ldrb	r3, [r1, r3]
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3e:	4a4e      	ldr	r2, [pc, #312]	; (8004078 <HAL_RCC_OscConfig+0x278>)
 8003f40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f42:	4b4e      	ldr	r3, [pc, #312]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd fd30 	bl	80019ac <HAL_InitTick>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d052      	beq.n	8003ffc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	e364      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d032      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f62:	4b43      	ldr	r3, [pc, #268]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a42      	ldr	r2, [pc, #264]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f6e:	f7fd fd6d 	bl	8001a4c <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f76:	f7fd fd69 	bl	8001a4c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e34d      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f88:	4b39      	ldr	r3, [pc, #228]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f94:	4b36      	ldr	r3, [pc, #216]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a35      	ldr	r2, [pc, #212]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	f043 0308 	orr.w	r3, r3, #8
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b33      	ldr	r3, [pc, #204]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4930      	ldr	r1, [pc, #192]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb2:	4b2f      	ldr	r3, [pc, #188]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	492b      	ldr	r1, [pc, #172]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
 8003fc6:	e01a      	b.n	8003ffe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fc8:	4b29      	ldr	r3, [pc, #164]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a28      	ldr	r2, [pc, #160]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fd4:	f7fd fd3a 	bl	8001a4c <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fdc:	f7fd fd36 	bl	8001a4c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e31a      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fee:	4b20      	ldr	r3, [pc, #128]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1dc>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d073      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d005      	beq.n	800401c <HAL_RCC_OscConfig+0x21c>
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d10e      	bne.n	8004034 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b03      	cmp	r3, #3
 800401a:	d10b      	bne.n	8004034 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d063      	beq.n	80040f0 <HAL_RCC_OscConfig+0x2f0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d15f      	bne.n	80040f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e2f7      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403c:	d106      	bne.n	800404c <HAL_RCC_OscConfig+0x24c>
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e025      	b.n	8004098 <HAL_RCC_OscConfig+0x298>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004054:	d114      	bne.n	8004080 <HAL_RCC_OscConfig+0x280>
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a05      	ldr	r2, [pc, #20]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 800405c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a02      	ldr	r2, [pc, #8]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e013      	b.n	8004098 <HAL_RCC_OscConfig+0x298>
 8004070:	40021000 	.word	0x40021000
 8004074:	08007480 	.word	0x08007480
 8004078:	20000000 	.word	0x20000000
 800407c:	20000004 	.word	0x20000004
 8004080:	4ba0      	ldr	r3, [pc, #640]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a9f      	ldr	r2, [pc, #636]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	4b9d      	ldr	r3, [pc, #628]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a9c      	ldr	r2, [pc, #624]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d013      	beq.n	80040c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fd fcd4 	bl	8001a4c <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fd fcd0 	bl	8001a4c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e2b4      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ba:	4b92      	ldr	r3, [pc, #584]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x2a8>
 80040c6:	e014      	b.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fd fcc0 	bl	8001a4c <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fd fcbc 	bl	8001a4c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e2a0      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040e2:	4b88      	ldr	r3, [pc, #544]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x2d0>
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d060      	beq.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d005      	beq.n	8004110 <HAL_RCC_OscConfig+0x310>
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d119      	bne.n	800413e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d116      	bne.n	800413e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004110:	4b7c      	ldr	r3, [pc, #496]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_OscConfig+0x328>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e27d      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004128:	4b76      	ldr	r3, [pc, #472]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	4973      	ldr	r1, [pc, #460]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004138:	4313      	orrs	r3, r2
 800413a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800413c:	e040      	b.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d023      	beq.n	800418e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004146:	4b6f      	ldr	r3, [pc, #444]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a6e      	ldr	r2, [pc, #440]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fd fc7b 	bl	8001a4c <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415a:	f7fd fc77 	bl	8001a4c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e25b      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800416c:	4b65      	ldr	r3, [pc, #404]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004178:	4b62      	ldr	r3, [pc, #392]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	495f      	ldr	r1, [pc, #380]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
 800418c:	e018      	b.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418e:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a5c      	ldr	r2, [pc, #368]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fd fc57 	bl	8001a4c <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a2:	f7fd fc53 	bl	8001a4c <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e237      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041b4:	4b53      	ldr	r3, [pc, #332]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f0      	bne.n	80041a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d03c      	beq.n	8004246 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01c      	beq.n	800420e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d4:	4b4b      	ldr	r3, [pc, #300]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	4a4a      	ldr	r2, [pc, #296]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd fc32 	bl	8001a4c <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ec:	f7fd fc2e 	bl	8001a4c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e212      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041fe:	4b41      	ldr	r3, [pc, #260]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ef      	beq.n	80041ec <HAL_RCC_OscConfig+0x3ec>
 800420c:	e01b      	b.n	8004246 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420e:	4b3d      	ldr	r3, [pc, #244]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004214:	4a3b      	ldr	r2, [pc, #236]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fd fc15 	bl	8001a4c <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004226:	f7fd fc11 	bl	8001a4c <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e1f5      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004238:	4b32      	ldr	r3, [pc, #200]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800423a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ef      	bne.n	8004226 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80a6 	beq.w	80043a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004254:	2300      	movs	r3, #0
 8004256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004258:	4b2a      	ldr	r3, [pc, #168]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10d      	bne.n	8004280 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	4a26      	ldr	r2, [pc, #152]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800426a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426e:	6593      	str	r3, [r2, #88]	; 0x58
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427c:	2301      	movs	r3, #1
 800427e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004280:	4b21      	ldr	r3, [pc, #132]	; (8004308 <HAL_RCC_OscConfig+0x508>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d118      	bne.n	80042be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800428c:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_RCC_OscConfig+0x508>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_RCC_OscConfig+0x508>)
 8004292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004298:	f7fd fbd8 	bl	8001a4c <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a0:	f7fd fbd4 	bl	8001a4c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e1b8      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <HAL_RCC_OscConfig+0x508>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d108      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4d8>
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	4a0d      	ldr	r2, [pc, #52]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d6:	e029      	b.n	800432c <HAL_RCC_OscConfig+0x52c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d115      	bne.n	800430c <HAL_RCC_OscConfig+0x50c>
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	4a07      	ldr	r2, [pc, #28]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042e8:	f043 0304 	orr.w	r3, r3, #4
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a03      	ldr	r2, [pc, #12]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004300:	e014      	b.n	800432c <HAL_RCC_OscConfig+0x52c>
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000
 8004308:	40007000 	.word	0x40007000
 800430c:	4b9d      	ldr	r3, [pc, #628]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	4a9c      	ldr	r2, [pc, #624]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800431c:	4b99      	ldr	r3, [pc, #612]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	4a98      	ldr	r2, [pc, #608]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d016      	beq.n	8004362 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd fb8a 	bl	8001a4c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433a:	e00a      	b.n	8004352 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fd fb86 	bl	8001a4c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e168      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004352:	4b8c      	ldr	r3, [pc, #560]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ed      	beq.n	800433c <HAL_RCC_OscConfig+0x53c>
 8004360:	e015      	b.n	800438e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004362:	f7fd fb73 	bl	8001a4c <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004368:	e00a      	b.n	8004380 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f7fd fb6f 	bl	8001a4c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e151      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004380:	4b80      	ldr	r3, [pc, #512]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ed      	bne.n	800436a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800438e:	7ffb      	ldrb	r3, [r7, #31]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004394:	4b7b      	ldr	r3, [pc, #492]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	4a7a      	ldr	r2, [pc, #488]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 800439a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d03c      	beq.n	8004426 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01c      	beq.n	80043ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043b4:	4b73      	ldr	r3, [pc, #460]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80043b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ba:	4a72      	ldr	r2, [pc, #456]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fd fb42 	bl	8001a4c <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043cc:	f7fd fb3e 	bl	8001a4c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e122      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043de:	4b69      	ldr	r3, [pc, #420]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80043e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ef      	beq.n	80043cc <HAL_RCC_OscConfig+0x5cc>
 80043ec:	e01b      	b.n	8004426 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80043f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043f4:	4a63      	ldr	r2, [pc, #396]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fd fb25 	bl	8001a4c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004406:	f7fd fb21 	bl	8001a4c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e105      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004418:	4b5a      	ldr	r3, [pc, #360]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 800441a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ef      	bne.n	8004406 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80f9 	beq.w	8004622 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	2b02      	cmp	r3, #2
 8004436:	f040 80cf 	bne.w	80045d8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800443a:	4b52      	ldr	r3, [pc, #328]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f003 0203 	and.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	429a      	cmp	r2, r3
 800444c:	d12c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	3b01      	subs	r3, #1
 800445a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d123      	bne.n	80044a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d11b      	bne.n	80044a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d113      	bne.n	80044a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	3b01      	subs	r3, #1
 800448e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d109      	bne.n	80044a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	3b01      	subs	r3, #1
 80044a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d071      	beq.n	800458c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d068      	beq.n	8004580 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044ae:	4b35      	ldr	r3, [pc, #212]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d105      	bne.n	80044c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044ba:	4b32      	ldr	r3, [pc, #200]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e0ac      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044ca:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2d      	ldr	r2, [pc, #180]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80044d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044d6:	f7fd fab9 	bl	8001a4c <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044de:	f7fd fab5 	bl	8001a4c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e099      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f0:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fc:	4b21      	ldr	r3, [pc, #132]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <HAL_RCC_OscConfig+0x788>)
 8004502:	4013      	ands	r3, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800450c:	3a01      	subs	r2, #1
 800450e:	0112      	lsls	r2, r2, #4
 8004510:	4311      	orrs	r1, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004516:	0212      	lsls	r2, r2, #8
 8004518:	4311      	orrs	r1, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800451e:	0852      	lsrs	r2, r2, #1
 8004520:	3a01      	subs	r2, #1
 8004522:	0552      	lsls	r2, r2, #21
 8004524:	4311      	orrs	r1, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800452a:	0852      	lsrs	r2, r2, #1
 800452c:	3a01      	subs	r2, #1
 800452e:	0652      	lsls	r2, r2, #25
 8004530:	4311      	orrs	r1, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004536:	06d2      	lsls	r2, r2, #27
 8004538:	430a      	orrs	r2, r1
 800453a:	4912      	ldr	r1, [pc, #72]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 800453c:	4313      	orrs	r3, r2
 800453e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004540:	4b10      	ldr	r3, [pc, #64]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a0f      	ldr	r2, [pc, #60]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 8004546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800454a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 8004552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004556:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004558:	f7fd fa78 	bl	8001a4c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004560:	f7fd fa74 	bl	8001a4c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e058      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004572:	4b04      	ldr	r3, [pc, #16]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800457e:	e050      	b.n	8004622 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e04f      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
 8004584:	40021000 	.word	0x40021000
 8004588:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d144      	bne.n	8004622 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004598:	4b24      	ldr	r3, [pc, #144]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a23      	ldr	r2, [pc, #140]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 800459e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045a4:	4b21      	ldr	r3, [pc, #132]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a20      	ldr	r2, [pc, #128]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 80045aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045b0:	f7fd fa4c 	bl	8001a4c <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd fa48 	bl	8001a4c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e02c      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ca:	4b18      	ldr	r3, [pc, #96]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x7b8>
 80045d6:	e024      	b.n	8004622 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d01f      	beq.n	800461e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a12      	ldr	r2, [pc, #72]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 80045e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fd fa2f 	bl	8001a4c <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fd fa2b 	bl	8001a4c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e00f      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f0      	bne.n	80045f2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	4905      	ldr	r1, [pc, #20]	; (800462c <HAL_RCC_OscConfig+0x82c>)
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_OscConfig+0x830>)
 8004618:	4013      	ands	r3, r2
 800461a:	60cb      	str	r3, [r1, #12]
 800461c:	e001      	b.n	8004622 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40021000 	.word	0x40021000
 8004630:	feeefffc 	.word	0xfeeefffc

08004634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e11d      	b.n	8004888 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800464c:	4b90      	ldr	r3, [pc, #576]	; (8004890 <HAL_RCC_ClockConfig+0x25c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d910      	bls.n	800467c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b8d      	ldr	r3, [pc, #564]	; (8004890 <HAL_RCC_ClockConfig+0x25c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 020f 	bic.w	r2, r3, #15
 8004662:	498b      	ldr	r1, [pc, #556]	; (8004890 <HAL_RCC_ClockConfig+0x25c>)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b89      	ldr	r3, [pc, #548]	; (8004890 <HAL_RCC_ClockConfig+0x25c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e105      	b.n	8004888 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d010      	beq.n	80046aa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	4b81      	ldr	r3, [pc, #516]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004694:	429a      	cmp	r2, r3
 8004696:	d908      	bls.n	80046aa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004698:	4b7e      	ldr	r3, [pc, #504]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	497b      	ldr	r1, [pc, #492]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d079      	beq.n	80047aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d11e      	bne.n	80046fc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046be:	4b75      	ldr	r3, [pc, #468]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e0dc      	b.n	8004888 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80046ce:	f000 fa09 	bl	8004ae4 <RCC_GetSysClockFreqFromPLLSource>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4a70      	ldr	r2, [pc, #448]	; (8004898 <HAL_RCC_ClockConfig+0x264>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d946      	bls.n	8004768 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80046da:	4b6e      	ldr	r3, [pc, #440]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d140      	bne.n	8004768 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046e6:	4b6b      	ldr	r3, [pc, #428]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ee:	4a69      	ldr	r2, [pc, #420]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 80046f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e035      	b.n	8004768 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d107      	bne.n	8004714 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004704:	4b63      	ldr	r3, [pc, #396]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d115      	bne.n	800473c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0b9      	b.n	8004888 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800471c:	4b5d      	ldr	r3, [pc, #372]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0ad      	b.n	8004888 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800472c:	4b59      	ldr	r3, [pc, #356]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0a5      	b.n	8004888 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800473c:	f000 f8b4 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004740:	4603      	mov	r3, r0
 8004742:	4a55      	ldr	r2, [pc, #340]	; (8004898 <HAL_RCC_ClockConfig+0x264>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d90f      	bls.n	8004768 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004748:	4b52      	ldr	r3, [pc, #328]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004754:	4b4f      	ldr	r3, [pc, #316]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475c:	4a4d      	ldr	r2, [pc, #308]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 800475e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004762:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004768:	4b4a      	ldr	r3, [pc, #296]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 0203 	bic.w	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4947      	ldr	r1, [pc, #284]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477a:	f7fd f967 	bl	8001a4c <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004780:	e00a      	b.n	8004798 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004782:	f7fd f963 	bl	8001a4c <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e077      	b.n	8004888 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004798:	4b3e      	ldr	r3, [pc, #248]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 020c 	and.w	r2, r3, #12
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d1eb      	bne.n	8004782 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b80      	cmp	r3, #128	; 0x80
 80047ae:	d105      	bne.n	80047bc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047b0:	4b38      	ldr	r3, [pc, #224]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4a37      	ldr	r2, [pc, #220]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 80047b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d010      	beq.n	80047ea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	4b31      	ldr	r3, [pc, #196]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d208      	bcs.n	80047ea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b2e      	ldr	r3, [pc, #184]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	492b      	ldr	r1, [pc, #172]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047ea:	4b29      	ldr	r3, [pc, #164]	; (8004890 <HAL_RCC_ClockConfig+0x25c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d210      	bcs.n	800481a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f8:	4b25      	ldr	r3, [pc, #148]	; (8004890 <HAL_RCC_ClockConfig+0x25c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f023 020f 	bic.w	r2, r3, #15
 8004800:	4923      	ldr	r1, [pc, #140]	; (8004890 <HAL_RCC_ClockConfig+0x25c>)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004808:	4b21      	ldr	r3, [pc, #132]	; (8004890 <HAL_RCC_ClockConfig+0x25c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d001      	beq.n	800481a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e036      	b.n	8004888 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004826:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4918      	ldr	r1, [pc, #96]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004844:	4b13      	ldr	r3, [pc, #76]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4910      	ldr	r1, [pc, #64]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 8004854:	4313      	orrs	r3, r2
 8004856:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004858:	f000 f826 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <HAL_RCC_ClockConfig+0x260>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	490c      	ldr	r1, [pc, #48]	; (800489c <HAL_RCC_ClockConfig+0x268>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <HAL_RCC_ClockConfig+0x26c>)
 8004876:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_RCC_ClockConfig+0x270>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd f895 	bl	80019ac <HAL_InitTick>
 8004882:	4603      	mov	r3, r0
 8004884:	73fb      	strb	r3, [r7, #15]

  return status;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40022000 	.word	0x40022000
 8004894:	40021000 	.word	0x40021000
 8004898:	04c4b400 	.word	0x04c4b400
 800489c:	08007480 	.word	0x08007480
 80048a0:	20000000 	.word	0x20000000
 80048a4:	20000004 	.word	0x20000004

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b6:	4b3e      	ldr	r3, [pc, #248]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x34>
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d121      	bne.n	800491a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d11e      	bne.n	800491a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048dc:	4b34      	ldr	r3, [pc, #208]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048e8:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ee:	0a1b      	lsrs	r3, r3, #8
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	e005      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048f8:	4b2d      	ldr	r3, [pc, #180]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004904:	4a2b      	ldr	r2, [pc, #172]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10d      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004918:	e00a      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d102      	bne.n	8004926 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004920:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	e004      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d101      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800492c:	4b23      	ldr	r3, [pc, #140]	; (80049bc <HAL_RCC_GetSysClockFreq+0x114>)
 800492e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d134      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004936:	4b1e      	ldr	r3, [pc, #120]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d003      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0xa6>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d003      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0xac>
 800494c:	e005      	b.n	800495a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800494e:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004950:	617b      	str	r3, [r7, #20]
      break;
 8004952:	e005      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <HAL_RCC_GetSysClockFreq+0x114>)
 8004956:	617b      	str	r3, [r7, #20]
      break;
 8004958:	e002      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	617b      	str	r3, [r7, #20]
      break;
 800495e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	3301      	adds	r3, #1
 800496c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	fb03 f202 	mul.w	r2, r3, r2
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	0e5b      	lsrs	r3, r3, #25
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	3301      	adds	r3, #1
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049a0:	69bb      	ldr	r3, [r7, #24]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3724      	adds	r7, #36	; 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000
 80049b4:	08007498 	.word	0x08007498
 80049b8:	00f42400 	.word	0x00f42400
 80049bc:	007a1200 	.word	0x007a1200

080049c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000000 	.word	0x20000000

080049d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049dc:	f7ff fff0 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4904      	ldr	r1, [pc, #16]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ee:	5ccb      	ldrb	r3, [r1, r3]
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	08007490 	.word	0x08007490

08004a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a08:	f7ff ffda 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0adb      	lsrs	r3, r3, #11
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	08007490 	.word	0x08007490

08004a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a3c:	4b27      	ldr	r3, [pc, #156]	; (8004adc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a48:	f7ff f916 	bl	8003c78 <HAL_PWREx_GetVoltageRange>
 8004a4c:	6178      	str	r0, [r7, #20]
 8004a4e:	e014      	b.n	8004a7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a50:	4b22      	ldr	r3, [pc, #136]	; (8004adc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a54:	4a21      	ldr	r2, [pc, #132]	; (8004adc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a5c:	4b1f      	ldr	r3, [pc, #124]	; (8004adc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a68:	f7ff f906 	bl	8003c78 <HAL_PWREx_GetVoltageRange>
 8004a6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a6e:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	4a1a      	ldr	r2, [pc, #104]	; (8004adc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a80:	d10b      	bne.n	8004a9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d913      	bls.n	8004ab0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2ba0      	cmp	r3, #160	; 0xa0
 8004a8c:	d902      	bls.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a8e:	2302      	movs	r3, #2
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	e00d      	b.n	8004ab0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a94:	2301      	movs	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	e00a      	b.n	8004ab0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a9e:	d902      	bls.n	8004aa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	e004      	b.n	8004ab0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b70      	cmp	r3, #112	; 0x70
 8004aaa:	d101      	bne.n	8004ab0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004aac:	2301      	movs	r3, #1
 8004aae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 020f 	bic.w	r2, r3, #15
 8004ab8:	4909      	ldr	r1, [pc, #36]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d001      	beq.n	8004ad2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40022000 	.word	0x40022000

08004ae4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aea:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d00b      	beq.n	8004b12 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d825      	bhi.n	8004b4c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d008      	beq.n	8004b18 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d11f      	bne.n	8004b4c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004b0c:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b0e:	613b      	str	r3, [r7, #16]
    break;
 8004b10:	e01f      	b.n	8004b52 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004b12:	4b25      	ldr	r3, [pc, #148]	; (8004ba8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004b14:	613b      	str	r3, [r7, #16]
    break;
 8004b16:	e01c      	b.n	8004b52 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b18:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d107      	bne.n	8004b34 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b24:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	e005      	b.n	8004b40 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b34:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004b40:	4a1a      	ldr	r2, [pc, #104]	; (8004bac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b48:	613b      	str	r3, [r7, #16]
    break;
 8004b4a:	e002      	b.n	8004b52 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
    break;
 8004b50:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	fb03 f202 	mul.w	r2, r3, r2
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	0e5b      	lsrs	r3, r3, #25
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	3301      	adds	r3, #1
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004b92:	683b      	ldr	r3, [r7, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	00f42400 	.word	0x00f42400
 8004ba8:	007a1200 	.word	0x007a1200
 8004bac:	08007498 	.word	0x08007498

08004bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bb8:	2300      	movs	r3, #0
 8004bba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d040      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd0:	2b80      	cmp	r3, #128	; 0x80
 8004bd2:	d02a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d825      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bd8:	2b60      	cmp	r3, #96	; 0x60
 8004bda:	d026      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bdc:	2b60      	cmp	r3, #96	; 0x60
 8004bde:	d821      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d006      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d81d      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d009      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d010      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004bf0:	e018      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bf2:	4b89      	ldr	r3, [pc, #548]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	4a88      	ldr	r2, [pc, #544]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bfe:	e015      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	2100      	movs	r1, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fb12 	bl	8005230 <RCCEx_PLLSAI1_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c10:	e00c      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3320      	adds	r3, #32
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fbfd 	bl	8005418 <RCCEx_PLLSAI2_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c22:	e003      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	74fb      	strb	r3, [r7, #19]
      break;
 8004c28:	e000      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c32:	4b79      	ldr	r3, [pc, #484]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c38:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c40:	4975      	ldr	r1, [pc, #468]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c48:	e001      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4a:	7cfb      	ldrb	r3, [r7, #19]
 8004c4c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d047      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c62:	d030      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c68:	d82a      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c6e:	d02a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c74:	d824      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7a:	d008      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c80:	d81e      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8a:	d010      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c8c:	e018      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c8e:	4b62      	ldr	r3, [pc, #392]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	4a61      	ldr	r2, [pc, #388]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c9a:	e015      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fac4 	bl	8005230 <RCCEx_PLLSAI1_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cac:	e00c      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3320      	adds	r3, #32
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fbaf 	bl	8005418 <RCCEx_PLLSAI2_Config>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cbe:	e003      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	74fb      	strb	r3, [r7, #19]
      break;
 8004cc4:	e000      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc8:	7cfb      	ldrb	r3, [r7, #19]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cce:	4b52      	ldr	r3, [pc, #328]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	494e      	ldr	r1, [pc, #312]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ce4:	e001      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	7cfb      	ldrb	r3, [r7, #19]
 8004ce8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 809f 	beq.w	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cfc:	4b46      	ldr	r3, [pc, #280]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00d      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	4b41      	ldr	r3, [pc, #260]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	4a40      	ldr	r2, [pc, #256]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d1e:	4b3e      	ldr	r3, [pc, #248]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d2e:	4b3b      	ldr	r3, [pc, #236]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a3a      	ldr	r2, [pc, #232]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d3a:	f7fc fe87 	bl	8001a4c <HAL_GetTick>
 8004d3e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d40:	e009      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7fc fe83 	bl	8001a4c <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d902      	bls.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	74fb      	strb	r3, [r7, #19]
        break;
 8004d54:	e005      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d56:	4b31      	ldr	r3, [pc, #196]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0ef      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004d62:	7cfb      	ldrb	r3, [r7, #19]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d15b      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d68:	4b2b      	ldr	r3, [pc, #172]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d72:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01f      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d019      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d86:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d90:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d92:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d98:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	4a1b      	ldr	r2, [pc, #108]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004db2:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d016      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7fc fe42 	bl	8001a4c <HAL_GetTick>
 8004dc8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dca:	e00b      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dcc:	f7fc fe3e 	bl	8001a4c <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d902      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	74fb      	strb	r3, [r7, #19]
            break;
 8004de2:	e006      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0ec      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10c      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df8:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	4903      	ldr	r1, [pc, #12]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e10:	e008      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e12:	7cfb      	ldrb	r3, [r7, #19]
 8004e14:	74bb      	strb	r3, [r7, #18]
 8004e16:	e005      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e20:	7cfb      	ldrb	r3, [r7, #19]
 8004e22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e24:	7c7b      	ldrb	r3, [r7, #17]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d105      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2a:	4ba0      	ldr	r3, [pc, #640]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	4a9f      	ldr	r2, [pc, #636]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e42:	4b9a      	ldr	r3, [pc, #616]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f023 0203 	bic.w	r2, r3, #3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	4996      	ldr	r1, [pc, #600]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e64:	4b91      	ldr	r3, [pc, #580]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f023 020c 	bic.w	r2, r3, #12
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	498e      	ldr	r1, [pc, #568]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e86:	4b89      	ldr	r3, [pc, #548]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e94:	4985      	ldr	r1, [pc, #532]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ea8:	4b80      	ldr	r3, [pc, #512]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb6:	497d      	ldr	r1, [pc, #500]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eca:	4b78      	ldr	r3, [pc, #480]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed8:	4974      	ldr	r1, [pc, #464]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eec:	4b6f      	ldr	r3, [pc, #444]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efa:	496c      	ldr	r1, [pc, #432]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f0e:	4b67      	ldr	r3, [pc, #412]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f1c:	4963      	ldr	r1, [pc, #396]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f30:	4b5e      	ldr	r3, [pc, #376]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f3e:	495b      	ldr	r1, [pc, #364]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f52:	4b56      	ldr	r3, [pc, #344]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f60:	4952      	ldr	r1, [pc, #328]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f74:	4b4d      	ldr	r3, [pc, #308]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	494a      	ldr	r1, [pc, #296]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f96:	4b45      	ldr	r3, [pc, #276]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa4:	4941      	ldr	r1, [pc, #260]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fb8:	4b3c      	ldr	r3, [pc, #240]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fbe:	f023 0203 	bic.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc6:	4939      	ldr	r1, [pc, #228]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d028      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fda:	4b34      	ldr	r3, [pc, #208]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe8:	4930      	ldr	r1, [pc, #192]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff8:	d106      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ffa:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	4a2b      	ldr	r2, [pc, #172]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005004:	60d3      	str	r3, [r2, #12]
 8005006:	e011      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005010:	d10c      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3304      	adds	r3, #4
 8005016:	2101      	movs	r1, #1
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f909 	bl	8005230 <RCCEx_PLLSAI1_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d04d      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800503c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005040:	d108      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005042:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800504a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800504e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005052:	e012      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005054:	4b15      	ldr	r3, [pc, #84]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800505a:	4a14      	ldr	r2, [pc, #80]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800505c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005060:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005072:	490e      	ldr	r1, [pc, #56]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800507e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005082:	d106      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4a08      	ldr	r2, [pc, #32]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800508e:	60d3      	str	r3, [r2, #12]
 8005090:	e020      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800509a:	d109      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800509c:	4b03      	ldr	r3, [pc, #12]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4a02      	ldr	r2, [pc, #8]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a6:	60d3      	str	r3, [r2, #12]
 80050a8:	e014      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	2101      	movs	r1, #1
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f8b5 	bl	8005230 <RCCEx_PLLSAI1_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ca:	7cfb      	ldrb	r3, [r7, #19]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d028      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050e0:	4b4a      	ldr	r3, [pc, #296]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ee:	4947      	ldr	r1, [pc, #284]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050fe:	d106      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005100:	4b42      	ldr	r3, [pc, #264]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a41      	ldr	r2, [pc, #260]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510a:	60d3      	str	r3, [r2, #12]
 800510c:	e011      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005112:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005116:	d10c      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	2101      	movs	r1, #1
 800511e:	4618      	mov	r0, r3
 8005120:	f000 f886 	bl	8005230 <RCCEx_PLLSAI1_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005128:	7cfb      	ldrb	r3, [r7, #19]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800512e:	7cfb      	ldrb	r3, [r7, #19]
 8005130:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01e      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800513e:	4b33      	ldr	r3, [pc, #204]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514e:	492f      	ldr	r1, [pc, #188]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800515c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005160:	d10c      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	2102      	movs	r1, #2
 8005168:	4618      	mov	r0, r3
 800516a:	f000 f861 	bl	8005230 <RCCEx_PLLSAI1_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00b      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005188:	4b20      	ldr	r3, [pc, #128]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800518e:	f023 0204 	bic.w	r2, r3, #4
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005198:	491c      	ldr	r1, [pc, #112]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051ac:	4b17      	ldr	r3, [pc, #92]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051b2:	f023 0218 	bic.w	r2, r3, #24
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	4913      	ldr	r1, [pc, #76]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d017      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80051d0:	4b0e      	ldr	r3, [pc, #56]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e0:	490a      	ldr	r1, [pc, #40]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051f2:	d105      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4a04      	ldr	r2, [pc, #16]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005200:	7cbb      	ldrb	r3, [r7, #18]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000

08005210 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a04      	ldr	r2, [pc, #16]	; (800522c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800521a:	f043 0304 	orr.w	r3, r3, #4
 800521e:	6013      	str	r3, [r2, #0]
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40021000 	.word	0x40021000

08005230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800523e:	4b72      	ldr	r3, [pc, #456]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800524a:	4b6f      	ldr	r3, [pc, #444]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0203 	and.w	r2, r3, #3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d103      	bne.n	8005262 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
       ||
 800525e:	2b00      	cmp	r3, #0
 8005260:	d142      	bne.n	80052e8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
 8005266:	e03f      	b.n	80052e8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d018      	beq.n	80052a2 <RCCEx_PLLSAI1_Config+0x72>
 8005270:	2b03      	cmp	r3, #3
 8005272:	d825      	bhi.n	80052c0 <RCCEx_PLLSAI1_Config+0x90>
 8005274:	2b01      	cmp	r3, #1
 8005276:	d002      	beq.n	800527e <RCCEx_PLLSAI1_Config+0x4e>
 8005278:	2b02      	cmp	r3, #2
 800527a:	d009      	beq.n	8005290 <RCCEx_PLLSAI1_Config+0x60>
 800527c:	e020      	b.n	80052c0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800527e:	4b62      	ldr	r3, [pc, #392]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d11d      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528e:	e01a      	b.n	80052c6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005290:	4b5d      	ldr	r3, [pc, #372]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005298:	2b00      	cmp	r3, #0
 800529a:	d116      	bne.n	80052ca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a0:	e013      	b.n	80052ca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052a2:	4b59      	ldr	r3, [pc, #356]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052ae:	4b56      	ldr	r3, [pc, #344]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052be:	e006      	b.n	80052ce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
      break;
 80052c4:	e004      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052c6:	bf00      	nop
 80052c8:	e002      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d108      	bne.n	80052e8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80052d6:	4b4c      	ldr	r3, [pc, #304]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f023 0203 	bic.w	r2, r3, #3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4949      	ldr	r1, [pc, #292]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f040 8086 	bne.w	80053fc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052f0:	4b45      	ldr	r3, [pc, #276]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a44      	ldr	r2, [pc, #272]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fc:	f7fc fba6 	bl	8001a4c <HAL_GetTick>
 8005300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005302:	e009      	b.n	8005318 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005304:	f7fc fba2 	bl	8001a4c <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d902      	bls.n	8005318 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	73fb      	strb	r3, [r7, #15]
        break;
 8005316:	e005      	b.n	8005324 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005318:	4b3b      	ldr	r3, [pc, #236]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ef      	bne.n	8005304 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d168      	bne.n	80053fc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d113      	bne.n	8005358 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005330:	4b35      	ldr	r3, [pc, #212]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	4b35      	ldr	r3, [pc, #212]	; (800540c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005336:	4013      	ands	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6892      	ldr	r2, [r2, #8]
 800533c:	0211      	lsls	r1, r2, #8
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68d2      	ldr	r2, [r2, #12]
 8005342:	06d2      	lsls	r2, r2, #27
 8005344:	4311      	orrs	r1, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6852      	ldr	r2, [r2, #4]
 800534a:	3a01      	subs	r2, #1
 800534c:	0112      	lsls	r2, r2, #4
 800534e:	430a      	orrs	r2, r1
 8005350:	492d      	ldr	r1, [pc, #180]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005352:	4313      	orrs	r3, r2
 8005354:	610b      	str	r3, [r1, #16]
 8005356:	e02d      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d115      	bne.n	800538a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800535e:	4b2a      	ldr	r3, [pc, #168]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6892      	ldr	r2, [r2, #8]
 800536a:	0211      	lsls	r1, r2, #8
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6912      	ldr	r2, [r2, #16]
 8005370:	0852      	lsrs	r2, r2, #1
 8005372:	3a01      	subs	r2, #1
 8005374:	0552      	lsls	r2, r2, #21
 8005376:	4311      	orrs	r1, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6852      	ldr	r2, [r2, #4]
 800537c:	3a01      	subs	r2, #1
 800537e:	0112      	lsls	r2, r2, #4
 8005380:	430a      	orrs	r2, r1
 8005382:	4921      	ldr	r1, [pc, #132]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005384:	4313      	orrs	r3, r2
 8005386:	610b      	str	r3, [r1, #16]
 8005388:	e014      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800538a:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	4b21      	ldr	r3, [pc, #132]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005390:	4013      	ands	r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6892      	ldr	r2, [r2, #8]
 8005396:	0211      	lsls	r1, r2, #8
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6952      	ldr	r2, [r2, #20]
 800539c:	0852      	lsrs	r2, r2, #1
 800539e:	3a01      	subs	r2, #1
 80053a0:	0652      	lsls	r2, r2, #25
 80053a2:	4311      	orrs	r1, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6852      	ldr	r2, [r2, #4]
 80053a8:	3a01      	subs	r2, #1
 80053aa:	0112      	lsls	r2, r2, #4
 80053ac:	430a      	orrs	r2, r1
 80053ae:	4916      	ldr	r1, [pc, #88]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053b4:	4b14      	ldr	r3, [pc, #80]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a13      	ldr	r2, [pc, #76]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c0:	f7fc fb44 	bl	8001a4c <HAL_GetTick>
 80053c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053c6:	e009      	b.n	80053dc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c8:	f7fc fb40 	bl	8001a4c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d902      	bls.n	80053dc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	73fb      	strb	r3, [r7, #15]
          break;
 80053da:	e005      	b.n	80053e8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0ef      	beq.n	80053c8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	4904      	ldr	r1, [pc, #16]	; (8005408 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40021000 	.word	0x40021000
 800540c:	07ff800f 	.word	0x07ff800f
 8005410:	ff9f800f 	.word	0xff9f800f
 8005414:	f9ff800f 	.word	0xf9ff800f

08005418 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005426:	4b72      	ldr	r3, [pc, #456]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00e      	beq.n	8005450 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005432:	4b6f      	ldr	r3, [pc, #444]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0203 	and.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d103      	bne.n	800544a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
       ||
 8005446:	2b00      	cmp	r3, #0
 8005448:	d142      	bne.n	80054d0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	e03f      	b.n	80054d0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b03      	cmp	r3, #3
 8005456:	d018      	beq.n	800548a <RCCEx_PLLSAI2_Config+0x72>
 8005458:	2b03      	cmp	r3, #3
 800545a:	d825      	bhi.n	80054a8 <RCCEx_PLLSAI2_Config+0x90>
 800545c:	2b01      	cmp	r3, #1
 800545e:	d002      	beq.n	8005466 <RCCEx_PLLSAI2_Config+0x4e>
 8005460:	2b02      	cmp	r3, #2
 8005462:	d009      	beq.n	8005478 <RCCEx_PLLSAI2_Config+0x60>
 8005464:	e020      	b.n	80054a8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005466:	4b62      	ldr	r3, [pc, #392]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d11d      	bne.n	80054ae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005476:	e01a      	b.n	80054ae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005478:	4b5d      	ldr	r3, [pc, #372]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005488:	e013      	b.n	80054b2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800548a:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10f      	bne.n	80054b6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005496:	4b56      	ldr	r3, [pc, #344]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054a6:	e006      	b.n	80054b6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
      break;
 80054ac:	e004      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054ae:	bf00      	nop
 80054b0:	e002      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054b2:	bf00      	nop
 80054b4:	e000      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d108      	bne.n	80054d0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80054be:	4b4c      	ldr	r3, [pc, #304]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f023 0203 	bic.w	r2, r3, #3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4949      	ldr	r1, [pc, #292]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f040 8086 	bne.w	80055e4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054d8:	4b45      	ldr	r3, [pc, #276]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a44      	ldr	r2, [pc, #272]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e4:	f7fc fab2 	bl	8001a4c <HAL_GetTick>
 80054e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054ea:	e009      	b.n	8005500 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054ec:	f7fc faae 	bl	8001a4c <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d902      	bls.n	8005500 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	73fb      	strb	r3, [r7, #15]
        break;
 80054fe:	e005      	b.n	800550c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005500:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1ef      	bne.n	80054ec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d168      	bne.n	80055e4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d113      	bne.n	8005540 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005518:	4b35      	ldr	r3, [pc, #212]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	4b35      	ldr	r3, [pc, #212]	; (80055f4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800551e:	4013      	ands	r3, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6892      	ldr	r2, [r2, #8]
 8005524:	0211      	lsls	r1, r2, #8
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68d2      	ldr	r2, [r2, #12]
 800552a:	06d2      	lsls	r2, r2, #27
 800552c:	4311      	orrs	r1, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6852      	ldr	r2, [r2, #4]
 8005532:	3a01      	subs	r2, #1
 8005534:	0112      	lsls	r2, r2, #4
 8005536:	430a      	orrs	r2, r1
 8005538:	492d      	ldr	r1, [pc, #180]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800553a:	4313      	orrs	r3, r2
 800553c:	614b      	str	r3, [r1, #20]
 800553e:	e02d      	b.n	800559c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d115      	bne.n	8005572 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005546:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	4b2b      	ldr	r3, [pc, #172]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800554c:	4013      	ands	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6892      	ldr	r2, [r2, #8]
 8005552:	0211      	lsls	r1, r2, #8
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6912      	ldr	r2, [r2, #16]
 8005558:	0852      	lsrs	r2, r2, #1
 800555a:	3a01      	subs	r2, #1
 800555c:	0552      	lsls	r2, r2, #21
 800555e:	4311      	orrs	r1, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6852      	ldr	r2, [r2, #4]
 8005564:	3a01      	subs	r2, #1
 8005566:	0112      	lsls	r2, r2, #4
 8005568:	430a      	orrs	r2, r1
 800556a:	4921      	ldr	r1, [pc, #132]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800556c:	4313      	orrs	r3, r2
 800556e:	614b      	str	r3, [r1, #20]
 8005570:	e014      	b.n	800559c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005572:	4b1f      	ldr	r3, [pc, #124]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005574:	695a      	ldr	r2, [r3, #20]
 8005576:	4b21      	ldr	r3, [pc, #132]	; (80055fc <RCCEx_PLLSAI2_Config+0x1e4>)
 8005578:	4013      	ands	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6892      	ldr	r2, [r2, #8]
 800557e:	0211      	lsls	r1, r2, #8
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6952      	ldr	r2, [r2, #20]
 8005584:	0852      	lsrs	r2, r2, #1
 8005586:	3a01      	subs	r2, #1
 8005588:	0652      	lsls	r2, r2, #25
 800558a:	4311      	orrs	r1, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6852      	ldr	r2, [r2, #4]
 8005590:	3a01      	subs	r2, #1
 8005592:	0112      	lsls	r2, r2, #4
 8005594:	430a      	orrs	r2, r1
 8005596:	4916      	ldr	r1, [pc, #88]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005598:	4313      	orrs	r3, r2
 800559a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800559c:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a8:	f7fc fa50 	bl	8001a4c <HAL_GetTick>
 80055ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055ae:	e009      	b.n	80055c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055b0:	f7fc fa4c 	bl	8001a4c <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d902      	bls.n	80055c4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	73fb      	strb	r3, [r7, #15]
          break;
 80055c2:	e005      	b.n	80055d0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0ef      	beq.n	80055b0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	4904      	ldr	r1, [pc, #16]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000
 80055f4:	07ff800f 	.word	0x07ff800f
 80055f8:	ff9f800f 	.word	0xff9f800f
 80055fc:	f9ff800f 	.word	0xf9ff800f

08005600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e095      	b.n	800573e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d108      	bne.n	800562c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005622:	d009      	beq.n	8005638 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	61da      	str	r2, [r3, #28]
 800562a:	e005      	b.n	8005638 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fb febc 	bl	80013d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005678:	d902      	bls.n	8005680 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e002      	b.n	8005686 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005684:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800568e:	d007      	beq.n	80056a0 <HAL_SPI_Init+0xa0>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005698:	d002      	beq.n	80056a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	ea42 0103 	orr.w	r1, r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	f003 0204 	and.w	r2, r3, #4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800571c:	ea42 0103 	orr.w	r1, r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e042      	b.n	80057de <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fb fea6 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2224      	movs	r2, #36	; 0x24
 8005774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fbb3 	bl	8005efc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8b4 	bl	8005904 <UART_SetConfig>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e01b      	b.n	80057de <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0201 	orr.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fc32 	bl	8006040 <UART_CheckIdleState>
 80057dc:	4603      	mov	r3, r0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b08a      	sub	sp, #40	; 0x28
 80057ea:	af02      	add	r7, sp, #8
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d17c      	bne.n	80058fa <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_UART_Transmit+0x26>
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e075      	b.n	80058fc <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2221      	movs	r2, #33	; 0x21
 800581c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005820:	f7fc f914 	bl	8001a4c <HAL_GetTick>
 8005824:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	88fa      	ldrh	r2, [r7, #6]
 800582a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	88fa      	ldrh	r2, [r7, #6]
 8005832:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583e:	d108      	bne.n	8005852 <HAL_UART_Transmit+0x6c>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d104      	bne.n	8005852 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e003      	b.n	800585a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800585a:	e031      	b.n	80058c0 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2200      	movs	r2, #0
 8005864:	2180      	movs	r1, #128	; 0x80
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fc94 	bl	8006194 <UART_WaitOnFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e03e      	b.n	80058fc <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	881a      	ldrh	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005890:	b292      	uxth	r2, r2
 8005892:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	3302      	adds	r3, #2
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	e008      	b.n	80058ae <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	b292      	uxth	r2, r2
 80058a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	3301      	adds	r3, #1
 80058ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1c7      	bne.n	800585c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2200      	movs	r2, #0
 80058d4:	2140      	movs	r1, #64	; 0x40
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 fc5c 	bl	8006194 <UART_WaitOnFlagUntilTimeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e006      	b.n	80058fc <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	e000      	b.n	80058fc <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80058fa:	2302      	movs	r3, #2
  }
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005908:	b08c      	sub	sp, #48	; 0x30
 800590a:	af00      	add	r7, sp, #0
 800590c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	431a      	orrs	r2, r3
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	431a      	orrs	r2, r3
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	4313      	orrs	r3, r2
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4baa      	ldr	r3, [pc, #680]	; (8005bdc <UART_SetConfig+0x2d8>)
 8005934:	4013      	ands	r3, r2
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800593c:	430b      	orrs	r3, r1
 800593e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a9f      	ldr	r2, [pc, #636]	; (8005be0 <UART_SetConfig+0x2dc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596c:	4313      	orrs	r3, r2
 800596e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800597a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005984:	430b      	orrs	r3, r1
 8005986:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	f023 010f 	bic.w	r1, r3, #15
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a90      	ldr	r2, [pc, #576]	; (8005be4 <UART_SetConfig+0x2e0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d125      	bne.n	80059f4 <UART_SetConfig+0xf0>
 80059a8:	4b8f      	ldr	r3, [pc, #572]	; (8005be8 <UART_SetConfig+0x2e4>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d81a      	bhi.n	80059ec <UART_SetConfig+0xe8>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0xb8>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059cd 	.word	0x080059cd
 80059c0:	080059dd 	.word	0x080059dd
 80059c4:	080059d5 	.word	0x080059d5
 80059c8:	080059e5 	.word	0x080059e5
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d2:	e116      	b.n	8005c02 <UART_SetConfig+0x2fe>
 80059d4:	2302      	movs	r3, #2
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059da:	e112      	b.n	8005c02 <UART_SetConfig+0x2fe>
 80059dc:	2304      	movs	r3, #4
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e2:	e10e      	b.n	8005c02 <UART_SetConfig+0x2fe>
 80059e4:	2308      	movs	r3, #8
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ea:	e10a      	b.n	8005c02 <UART_SetConfig+0x2fe>
 80059ec:	2310      	movs	r3, #16
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f2:	e106      	b.n	8005c02 <UART_SetConfig+0x2fe>
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a7c      	ldr	r2, [pc, #496]	; (8005bec <UART_SetConfig+0x2e8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d138      	bne.n	8005a70 <UART_SetConfig+0x16c>
 80059fe:	4b7a      	ldr	r3, [pc, #488]	; (8005be8 <UART_SetConfig+0x2e4>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a04:	f003 030c 	and.w	r3, r3, #12
 8005a08:	2b0c      	cmp	r3, #12
 8005a0a:	d82d      	bhi.n	8005a68 <UART_SetConfig+0x164>
 8005a0c:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <UART_SetConfig+0x110>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a49 	.word	0x08005a49
 8005a18:	08005a69 	.word	0x08005a69
 8005a1c:	08005a69 	.word	0x08005a69
 8005a20:	08005a69 	.word	0x08005a69
 8005a24:	08005a59 	.word	0x08005a59
 8005a28:	08005a69 	.word	0x08005a69
 8005a2c:	08005a69 	.word	0x08005a69
 8005a30:	08005a69 	.word	0x08005a69
 8005a34:	08005a51 	.word	0x08005a51
 8005a38:	08005a69 	.word	0x08005a69
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	08005a69 	.word	0x08005a69
 8005a44:	08005a61 	.word	0x08005a61
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4e:	e0d8      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005a50:	2302      	movs	r3, #2
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a56:	e0d4      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a5e:	e0d0      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005a60:	2308      	movs	r3, #8
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a66:	e0cc      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6e:	e0c8      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a5e      	ldr	r2, [pc, #376]	; (8005bf0 <UART_SetConfig+0x2ec>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d125      	bne.n	8005ac6 <UART_SetConfig+0x1c2>
 8005a7a:	4b5b      	ldr	r3, [pc, #364]	; (8005be8 <UART_SetConfig+0x2e4>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a84:	2b30      	cmp	r3, #48	; 0x30
 8005a86:	d016      	beq.n	8005ab6 <UART_SetConfig+0x1b2>
 8005a88:	2b30      	cmp	r3, #48	; 0x30
 8005a8a:	d818      	bhi.n	8005abe <UART_SetConfig+0x1ba>
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d00a      	beq.n	8005aa6 <UART_SetConfig+0x1a2>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d814      	bhi.n	8005abe <UART_SetConfig+0x1ba>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <UART_SetConfig+0x19a>
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d008      	beq.n	8005aae <UART_SetConfig+0x1aa>
 8005a9c:	e00f      	b.n	8005abe <UART_SetConfig+0x1ba>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa4:	e0ad      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aac:	e0a9      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005aae:	2304      	movs	r3, #4
 8005ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab4:	e0a5      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005abc:	e0a1      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005abe:	2310      	movs	r3, #16
 8005ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac4:	e09d      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a4a      	ldr	r2, [pc, #296]	; (8005bf4 <UART_SetConfig+0x2f0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d125      	bne.n	8005b1c <UART_SetConfig+0x218>
 8005ad0:	4b45      	ldr	r3, [pc, #276]	; (8005be8 <UART_SetConfig+0x2e4>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ada:	2bc0      	cmp	r3, #192	; 0xc0
 8005adc:	d016      	beq.n	8005b0c <UART_SetConfig+0x208>
 8005ade:	2bc0      	cmp	r3, #192	; 0xc0
 8005ae0:	d818      	bhi.n	8005b14 <UART_SetConfig+0x210>
 8005ae2:	2b80      	cmp	r3, #128	; 0x80
 8005ae4:	d00a      	beq.n	8005afc <UART_SetConfig+0x1f8>
 8005ae6:	2b80      	cmp	r3, #128	; 0x80
 8005ae8:	d814      	bhi.n	8005b14 <UART_SetConfig+0x210>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <UART_SetConfig+0x1f0>
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d008      	beq.n	8005b04 <UART_SetConfig+0x200>
 8005af2:	e00f      	b.n	8005b14 <UART_SetConfig+0x210>
 8005af4:	2300      	movs	r3, #0
 8005af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afa:	e082      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005afc:	2302      	movs	r3, #2
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b02:	e07e      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005b04:	2304      	movs	r3, #4
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0a:	e07a      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b12:	e076      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	e072      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a35      	ldr	r2, [pc, #212]	; (8005bf8 <UART_SetConfig+0x2f4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d12a      	bne.n	8005b7c <UART_SetConfig+0x278>
 8005b26:	4b30      	ldr	r3, [pc, #192]	; (8005be8 <UART_SetConfig+0x2e4>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b34:	d01a      	beq.n	8005b6c <UART_SetConfig+0x268>
 8005b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3a:	d81b      	bhi.n	8005b74 <UART_SetConfig+0x270>
 8005b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b40:	d00c      	beq.n	8005b5c <UART_SetConfig+0x258>
 8005b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b46:	d815      	bhi.n	8005b74 <UART_SetConfig+0x270>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <UART_SetConfig+0x250>
 8005b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b50:	d008      	beq.n	8005b64 <UART_SetConfig+0x260>
 8005b52:	e00f      	b.n	8005b74 <UART_SetConfig+0x270>
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b5a:	e052      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b62:	e04e      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005b64:	2304      	movs	r3, #4
 8005b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b6a:	e04a      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005b6c:	2308      	movs	r3, #8
 8005b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b72:	e046      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005b74:	2310      	movs	r3, #16
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7a:	e042      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a17      	ldr	r2, [pc, #92]	; (8005be0 <UART_SetConfig+0x2dc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d13a      	bne.n	8005bfc <UART_SetConfig+0x2f8>
 8005b86:	4b18      	ldr	r3, [pc, #96]	; (8005be8 <UART_SetConfig+0x2e4>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b94:	d01a      	beq.n	8005bcc <UART_SetConfig+0x2c8>
 8005b96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b9a:	d81b      	bhi.n	8005bd4 <UART_SetConfig+0x2d0>
 8005b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba0:	d00c      	beq.n	8005bbc <UART_SetConfig+0x2b8>
 8005ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba6:	d815      	bhi.n	8005bd4 <UART_SetConfig+0x2d0>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <UART_SetConfig+0x2b0>
 8005bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb0:	d008      	beq.n	8005bc4 <UART_SetConfig+0x2c0>
 8005bb2:	e00f      	b.n	8005bd4 <UART_SetConfig+0x2d0>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bba:	e022      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bc2:	e01e      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bca:	e01a      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005bcc:	2308      	movs	r3, #8
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd2:	e016      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bda:	e012      	b.n	8005c02 <UART_SetConfig+0x2fe>
 8005bdc:	cfff69f3 	.word	0xcfff69f3
 8005be0:	40008000 	.word	0x40008000
 8005be4:	40013800 	.word	0x40013800
 8005be8:	40021000 	.word	0x40021000
 8005bec:	40004400 	.word	0x40004400
 8005bf0:	40004800 	.word	0x40004800
 8005bf4:	40004c00 	.word	0x40004c00
 8005bf8:	40005000 	.word	0x40005000
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4aae      	ldr	r2, [pc, #696]	; (8005ec0 <UART_SetConfig+0x5bc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	f040 8097 	bne.w	8005d3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d823      	bhi.n	8005c5e <UART_SetConfig+0x35a>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0x318>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c5f 	.word	0x08005c5f
 8005c24:	08005c49 	.word	0x08005c49
 8005c28:	08005c5f 	.word	0x08005c5f
 8005c2c:	08005c4f 	.word	0x08005c4f
 8005c30:	08005c5f 	.word	0x08005c5f
 8005c34:	08005c5f 	.word	0x08005c5f
 8005c38:	08005c5f 	.word	0x08005c5f
 8005c3c:	08005c57 	.word	0x08005c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe feca 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8005c44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c46:	e010      	b.n	8005c6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c48:	4b9e      	ldr	r3, [pc, #632]	; (8005ec4 <UART_SetConfig+0x5c0>)
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c4c:	e00d      	b.n	8005c6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c4e:	f7fe fe2b 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8005c52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c54:	e009      	b.n	8005c6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c5c:	e005      	b.n	8005c6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8130 	beq.w	8005ed2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	4a94      	ldr	r2, [pc, #592]	; (8005ec8 <UART_SetConfig+0x5c4>)
 8005c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	4413      	add	r3, r2
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d305      	bcc.n	8005ca2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d903      	bls.n	8005caa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ca8:	e113      	b.n	8005ed2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	2200      	movs	r2, #0
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	60fa      	str	r2, [r7, #12]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	4a84      	ldr	r2, [pc, #528]	; (8005ec8 <UART_SetConfig+0x5c4>)
 8005cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ccc:	f7fa fae8 	bl	80002a0 <__aeabi_uldivmod>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	020b      	lsls	r3, r1, #8
 8005ce2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ce6:	0202      	lsls	r2, r0, #8
 8005ce8:	6979      	ldr	r1, [r7, #20]
 8005cea:	6849      	ldr	r1, [r1, #4]
 8005cec:	0849      	lsrs	r1, r1, #1
 8005cee:	2000      	movs	r0, #0
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	eb12 0804 	adds.w	r8, r2, r4
 8005cf8:	eb43 0905 	adc.w	r9, r3, r5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	469a      	mov	sl, r3
 8005d04:	4693      	mov	fp, r2
 8005d06:	4652      	mov	r2, sl
 8005d08:	465b      	mov	r3, fp
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	f7fa fac7 	bl	80002a0 <__aeabi_uldivmod>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4613      	mov	r3, r2
 8005d18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d20:	d308      	bcc.n	8005d34 <UART_SetConfig+0x430>
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d28:	d204      	bcs.n	8005d34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6a3a      	ldr	r2, [r7, #32]
 8005d30:	60da      	str	r2, [r3, #12]
 8005d32:	e0ce      	b.n	8005ed2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d3a:	e0ca      	b.n	8005ed2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d44:	d166      	bne.n	8005e14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005d46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d827      	bhi.n	8005d9e <UART_SetConfig+0x49a>
 8005d4e:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <UART_SetConfig+0x450>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d81 	.word	0x08005d81
 8005d5c:	08005d89 	.word	0x08005d89
 8005d60:	08005d9f 	.word	0x08005d9f
 8005d64:	08005d8f 	.word	0x08005d8f
 8005d68:	08005d9f 	.word	0x08005d9f
 8005d6c:	08005d9f 	.word	0x08005d9f
 8005d70:	08005d9f 	.word	0x08005d9f
 8005d74:	08005d97 	.word	0x08005d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d78:	f7fe fe2e 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8005d7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d7e:	e014      	b.n	8005daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d80:	f7fe fe40 	bl	8004a04 <HAL_RCC_GetPCLK2Freq>
 8005d84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d86:	e010      	b.n	8005daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d88:	4b4e      	ldr	r3, [pc, #312]	; (8005ec4 <UART_SetConfig+0x5c0>)
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d8c:	e00d      	b.n	8005daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8e:	f7fe fd8b 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8005d92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d94:	e009      	b.n	8005daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d9c:	e005      	b.n	8005daa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8090 	beq.w	8005ed2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	4a44      	ldr	r2, [pc, #272]	; (8005ec8 <UART_SetConfig+0x5c4>)
 8005db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dc4:	005a      	lsls	r2, r3, #1
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	441a      	add	r2, r3
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	2b0f      	cmp	r3, #15
 8005ddc:	d916      	bls.n	8005e0c <UART_SetConfig+0x508>
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de4:	d212      	bcs.n	8005e0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f023 030f 	bic.w	r3, r3, #15
 8005dee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	8bfb      	ldrh	r3, [r7, #30]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	8bfa      	ldrh	r2, [r7, #30]
 8005e08:	60da      	str	r2, [r3, #12]
 8005e0a:	e062      	b.n	8005ed2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e12:	e05e      	b.n	8005ed2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d828      	bhi.n	8005e6e <UART_SetConfig+0x56a>
 8005e1c:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <UART_SetConfig+0x520>)
 8005e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e22:	bf00      	nop
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e51 	.word	0x08005e51
 8005e2c:	08005e59 	.word	0x08005e59
 8005e30:	08005e6f 	.word	0x08005e6f
 8005e34:	08005e5f 	.word	0x08005e5f
 8005e38:	08005e6f 	.word	0x08005e6f
 8005e3c:	08005e6f 	.word	0x08005e6f
 8005e40:	08005e6f 	.word	0x08005e6f
 8005e44:	08005e67 	.word	0x08005e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e48:	f7fe fdc6 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8005e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e4e:	e014      	b.n	8005e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e50:	f7fe fdd8 	bl	8004a04 <HAL_RCC_GetPCLK2Freq>
 8005e54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e56:	e010      	b.n	8005e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e58:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <UART_SetConfig+0x5c0>)
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e5c:	e00d      	b.n	8005e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e5e:	f7fe fd23 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8005e62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e64:	e009      	b.n	8005e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e6c:	e005      	b.n	8005e7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e78:	bf00      	nop
    }

    if (pclk != 0U)
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d028      	beq.n	8005ed2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	4a10      	ldr	r2, [pc, #64]	; (8005ec8 <UART_SetConfig+0x5c4>)
 8005e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	441a      	add	r2, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	2b0f      	cmp	r3, #15
 8005ea8:	d910      	bls.n	8005ecc <UART_SetConfig+0x5c8>
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb0:	d20c      	bcs.n	8005ecc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60da      	str	r2, [r3, #12]
 8005ebc:	e009      	b.n	8005ed2 <UART_SetConfig+0x5ce>
 8005ebe:	bf00      	nop
 8005ec0:	40008000 	.word	0x40008000
 8005ec4:	00f42400 	.word	0x00f42400
 8005ec8:	080074c8 	.word	0x080074c8
      }
      else
      {
        ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2200      	movs	r2, #0
 8005eec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005eee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3730      	adds	r7, #48	; 0x30
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01a      	beq.n	8006012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ffa:	d10a      	bne.n	8006012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	605a      	str	r2, [r3, #4]
  }
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b098      	sub	sp, #96	; 0x60
 8006044:	af02      	add	r7, sp, #8
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006050:	f7fb fcfc 	bl	8001a4c <HAL_GetTick>
 8006054:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b08      	cmp	r3, #8
 8006062:	d12f      	bne.n	80060c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606c:	2200      	movs	r2, #0
 800606e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f88e 	bl	8006194 <UART_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d022      	beq.n	80060c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006092:	653b      	str	r3, [r7, #80]	; 0x50
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800609c:	647b      	str	r3, [r7, #68]	; 0x44
 800609e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e6      	bne.n	800607e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e063      	b.n	800618c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d149      	bne.n	8006166 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060da:	2200      	movs	r2, #0
 80060dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f857 	bl	8006194 <UART_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d03c      	beq.n	8006166 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	623b      	str	r3, [r7, #32]
   return(result);
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006100:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610a:	633b      	str	r3, [r7, #48]	; 0x30
 800610c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e6      	bne.n	80060ec <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3308      	adds	r3, #8
 8006124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	60fb      	str	r3, [r7, #12]
   return(result);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	64bb      	str	r3, [r7, #72]	; 0x48
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3308      	adds	r3, #8
 800613c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800613e:	61fa      	str	r2, [r7, #28]
 8006140:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	69b9      	ldr	r1, [r7, #24]
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	617b      	str	r3, [r7, #20]
   return(result);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e5      	bne.n	800611e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e012      	b.n	800618c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3758      	adds	r7, #88	; 0x58
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a4:	e049      	b.n	800623a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d045      	beq.n	800623a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ae:	f7fb fc4d 	bl	8001a4c <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d302      	bcc.n	80061c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e048      	b.n	800625a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d031      	beq.n	800623a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d110      	bne.n	8006206 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2208      	movs	r2, #8
 80061ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f838 	bl	8006262 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2208      	movs	r2, #8
 80061f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e029      	b.n	800625a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006214:	d111      	bne.n	800623a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800621e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f81e 	bl	8006262 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e00f      	b.n	800625a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69da      	ldr	r2, [r3, #28]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4013      	ands	r3, r2
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	429a      	cmp	r2, r3
 8006248:	bf0c      	ite	eq
 800624a:	2301      	moveq	r3, #1
 800624c:	2300      	movne	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	429a      	cmp	r2, r3
 8006256:	d0a6      	beq.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006262:	b480      	push	{r7}
 8006264:	b095      	sub	sp, #84	; 0x54
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800627e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006288:	643b      	str	r3, [r7, #64]	; 0x40
 800628a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800628e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e6      	bne.n	800626a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3308      	adds	r3, #8
 80062be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e3      	bne.n	800629c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d118      	bne.n	800630e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f023 0310 	bic.w	r3, r3, #16
 80062f0:	647b      	str	r3, [r7, #68]	; 0x44
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6979      	ldr	r1, [r7, #20]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	613b      	str	r3, [r7, #16]
   return(result);
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e6      	bne.n	80062dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006322:	bf00      	nop
 8006324:	3754      	adds	r7, #84	; 0x54
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_UARTEx_DisableFifoMode+0x16>
 8006340:	2302      	movs	r3, #2
 8006342:	e027      	b.n	8006394 <HAL_UARTEx_DisableFifoMode+0x66>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2224      	movs	r2, #36	; 0x24
 8006350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0201 	bic.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006372:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e02d      	b.n	8006414 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2224      	movs	r2, #36	; 0x24
 80063c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f84f 	bl	8006498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006430:	2302      	movs	r3, #2
 8006432:	e02d      	b.n	8006490 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2224      	movs	r2, #36	; 0x24
 8006440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0201 	bic.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f811 	bl	8006498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d108      	bne.n	80064ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064b8:	e031      	b.n	800651e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064ba:	2308      	movs	r3, #8
 80064bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064be:	2308      	movs	r3, #8
 80064c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	0e5b      	lsrs	r3, r3, #25
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	0f5b      	lsrs	r3, r3, #29
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	7b3a      	ldrb	r2, [r7, #12]
 80064e6:	4911      	ldr	r1, [pc, #68]	; (800652c <UARTEx_SetNbDataToProcess+0x94>)
 80064e8:	5c8a      	ldrb	r2, [r1, r2]
 80064ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064ee:	7b3a      	ldrb	r2, [r7, #12]
 80064f0:	490f      	ldr	r1, [pc, #60]	; (8006530 <UARTEx_SetNbDataToProcess+0x98>)
 80064f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	7b7a      	ldrb	r2, [r7, #13]
 8006504:	4909      	ldr	r1, [pc, #36]	; (800652c <UARTEx_SetNbDataToProcess+0x94>)
 8006506:	5c8a      	ldrb	r2, [r1, r2]
 8006508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800650c:	7b7a      	ldrb	r2, [r7, #13]
 800650e:	4908      	ldr	r1, [pc, #32]	; (8006530 <UARTEx_SetNbDataToProcess+0x98>)
 8006510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006512:	fb93 f3f2 	sdiv	r3, r3, r2
 8006516:	b29a      	uxth	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	080074e0 	.word	0x080074e0
 8006530:	080074e8 	.word	0x080074e8

08006534 <std>:
 8006534:	2300      	movs	r3, #0
 8006536:	b510      	push	{r4, lr}
 8006538:	4604      	mov	r4, r0
 800653a:	e9c0 3300 	strd	r3, r3, [r0]
 800653e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006542:	6083      	str	r3, [r0, #8]
 8006544:	8181      	strh	r1, [r0, #12]
 8006546:	6643      	str	r3, [r0, #100]	; 0x64
 8006548:	81c2      	strh	r2, [r0, #14]
 800654a:	6183      	str	r3, [r0, #24]
 800654c:	4619      	mov	r1, r3
 800654e:	2208      	movs	r2, #8
 8006550:	305c      	adds	r0, #92	; 0x5c
 8006552:	f000 f9f7 	bl	8006944 <memset>
 8006556:	4b0d      	ldr	r3, [pc, #52]	; (800658c <std+0x58>)
 8006558:	6263      	str	r3, [r4, #36]	; 0x24
 800655a:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <std+0x5c>)
 800655c:	62a3      	str	r3, [r4, #40]	; 0x28
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <std+0x60>)
 8006560:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006562:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <std+0x64>)
 8006564:	6323      	str	r3, [r4, #48]	; 0x30
 8006566:	4b0d      	ldr	r3, [pc, #52]	; (800659c <std+0x68>)
 8006568:	6224      	str	r4, [r4, #32]
 800656a:	429c      	cmp	r4, r3
 800656c:	d006      	beq.n	800657c <std+0x48>
 800656e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006572:	4294      	cmp	r4, r2
 8006574:	d002      	beq.n	800657c <std+0x48>
 8006576:	33d0      	adds	r3, #208	; 0xd0
 8006578:	429c      	cmp	r4, r3
 800657a:	d105      	bne.n	8006588 <std+0x54>
 800657c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006584:	f000 ba56 	b.w	8006a34 <__retarget_lock_init_recursive>
 8006588:	bd10      	pop	{r4, pc}
 800658a:	bf00      	nop
 800658c:	08006795 	.word	0x08006795
 8006590:	080067b7 	.word	0x080067b7
 8006594:	080067ef 	.word	0x080067ef
 8006598:	08006813 	.word	0x08006813
 800659c:	20000564 	.word	0x20000564

080065a0 <stdio_exit_handler>:
 80065a0:	4a02      	ldr	r2, [pc, #8]	; (80065ac <stdio_exit_handler+0xc>)
 80065a2:	4903      	ldr	r1, [pc, #12]	; (80065b0 <stdio_exit_handler+0x10>)
 80065a4:	4803      	ldr	r0, [pc, #12]	; (80065b4 <stdio_exit_handler+0x14>)
 80065a6:	f000 b869 	b.w	800667c <_fwalk_sglue>
 80065aa:	bf00      	nop
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	080072e1 	.word	0x080072e1
 80065b4:	20000018 	.word	0x20000018

080065b8 <cleanup_stdio>:
 80065b8:	6841      	ldr	r1, [r0, #4]
 80065ba:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <cleanup_stdio+0x34>)
 80065bc:	4299      	cmp	r1, r3
 80065be:	b510      	push	{r4, lr}
 80065c0:	4604      	mov	r4, r0
 80065c2:	d001      	beq.n	80065c8 <cleanup_stdio+0x10>
 80065c4:	f000 fe8c 	bl	80072e0 <_fflush_r>
 80065c8:	68a1      	ldr	r1, [r4, #8]
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <cleanup_stdio+0x38>)
 80065cc:	4299      	cmp	r1, r3
 80065ce:	d002      	beq.n	80065d6 <cleanup_stdio+0x1e>
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 fe85 	bl	80072e0 <_fflush_r>
 80065d6:	68e1      	ldr	r1, [r4, #12]
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <cleanup_stdio+0x3c>)
 80065da:	4299      	cmp	r1, r3
 80065dc:	d004      	beq.n	80065e8 <cleanup_stdio+0x30>
 80065de:	4620      	mov	r0, r4
 80065e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e4:	f000 be7c 	b.w	80072e0 <_fflush_r>
 80065e8:	bd10      	pop	{r4, pc}
 80065ea:	bf00      	nop
 80065ec:	20000564 	.word	0x20000564
 80065f0:	200005cc 	.word	0x200005cc
 80065f4:	20000634 	.word	0x20000634

080065f8 <global_stdio_init.part.0>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <global_stdio_init.part.0+0x30>)
 80065fc:	4c0b      	ldr	r4, [pc, #44]	; (800662c <global_stdio_init.part.0+0x34>)
 80065fe:	4a0c      	ldr	r2, [pc, #48]	; (8006630 <global_stdio_init.part.0+0x38>)
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	4620      	mov	r0, r4
 8006604:	2200      	movs	r2, #0
 8006606:	2104      	movs	r1, #4
 8006608:	f7ff ff94 	bl	8006534 <std>
 800660c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006610:	2201      	movs	r2, #1
 8006612:	2109      	movs	r1, #9
 8006614:	f7ff ff8e 	bl	8006534 <std>
 8006618:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800661c:	2202      	movs	r2, #2
 800661e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006622:	2112      	movs	r1, #18
 8006624:	f7ff bf86 	b.w	8006534 <std>
 8006628:	2000069c 	.word	0x2000069c
 800662c:	20000564 	.word	0x20000564
 8006630:	080065a1 	.word	0x080065a1

08006634 <__sfp_lock_acquire>:
 8006634:	4801      	ldr	r0, [pc, #4]	; (800663c <__sfp_lock_acquire+0x8>)
 8006636:	f000 b9fe 	b.w	8006a36 <__retarget_lock_acquire_recursive>
 800663a:	bf00      	nop
 800663c:	200006a5 	.word	0x200006a5

08006640 <__sfp_lock_release>:
 8006640:	4801      	ldr	r0, [pc, #4]	; (8006648 <__sfp_lock_release+0x8>)
 8006642:	f000 b9f9 	b.w	8006a38 <__retarget_lock_release_recursive>
 8006646:	bf00      	nop
 8006648:	200006a5 	.word	0x200006a5

0800664c <__sinit>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4604      	mov	r4, r0
 8006650:	f7ff fff0 	bl	8006634 <__sfp_lock_acquire>
 8006654:	6a23      	ldr	r3, [r4, #32]
 8006656:	b11b      	cbz	r3, 8006660 <__sinit+0x14>
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f7ff bff0 	b.w	8006640 <__sfp_lock_release>
 8006660:	4b04      	ldr	r3, [pc, #16]	; (8006674 <__sinit+0x28>)
 8006662:	6223      	str	r3, [r4, #32]
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <__sinit+0x2c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f5      	bne.n	8006658 <__sinit+0xc>
 800666c:	f7ff ffc4 	bl	80065f8 <global_stdio_init.part.0>
 8006670:	e7f2      	b.n	8006658 <__sinit+0xc>
 8006672:	bf00      	nop
 8006674:	080065b9 	.word	0x080065b9
 8006678:	2000069c 	.word	0x2000069c

0800667c <_fwalk_sglue>:
 800667c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006680:	4607      	mov	r7, r0
 8006682:	4688      	mov	r8, r1
 8006684:	4614      	mov	r4, r2
 8006686:	2600      	movs	r6, #0
 8006688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800668c:	f1b9 0901 	subs.w	r9, r9, #1
 8006690:	d505      	bpl.n	800669e <_fwalk_sglue+0x22>
 8006692:	6824      	ldr	r4, [r4, #0]
 8006694:	2c00      	cmp	r4, #0
 8006696:	d1f7      	bne.n	8006688 <_fwalk_sglue+0xc>
 8006698:	4630      	mov	r0, r6
 800669a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800669e:	89ab      	ldrh	r3, [r5, #12]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d907      	bls.n	80066b4 <_fwalk_sglue+0x38>
 80066a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066a8:	3301      	adds	r3, #1
 80066aa:	d003      	beq.n	80066b4 <_fwalk_sglue+0x38>
 80066ac:	4629      	mov	r1, r5
 80066ae:	4638      	mov	r0, r7
 80066b0:	47c0      	blx	r8
 80066b2:	4306      	orrs	r6, r0
 80066b4:	3568      	adds	r5, #104	; 0x68
 80066b6:	e7e9      	b.n	800668c <_fwalk_sglue+0x10>

080066b8 <iprintf>:
 80066b8:	b40f      	push	{r0, r1, r2, r3}
 80066ba:	b507      	push	{r0, r1, r2, lr}
 80066bc:	4906      	ldr	r1, [pc, #24]	; (80066d8 <iprintf+0x20>)
 80066be:	ab04      	add	r3, sp, #16
 80066c0:	6808      	ldr	r0, [r1, #0]
 80066c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c6:	6881      	ldr	r1, [r0, #8]
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	f000 fad9 	bl	8006c80 <_vfiprintf_r>
 80066ce:	b003      	add	sp, #12
 80066d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066d4:	b004      	add	sp, #16
 80066d6:	4770      	bx	lr
 80066d8:	20000064 	.word	0x20000064

080066dc <_puts_r>:
 80066dc:	6a03      	ldr	r3, [r0, #32]
 80066de:	b570      	push	{r4, r5, r6, lr}
 80066e0:	6884      	ldr	r4, [r0, #8]
 80066e2:	4605      	mov	r5, r0
 80066e4:	460e      	mov	r6, r1
 80066e6:	b90b      	cbnz	r3, 80066ec <_puts_r+0x10>
 80066e8:	f7ff ffb0 	bl	800664c <__sinit>
 80066ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066ee:	07db      	lsls	r3, r3, #31
 80066f0:	d405      	bmi.n	80066fe <_puts_r+0x22>
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	0598      	lsls	r0, r3, #22
 80066f6:	d402      	bmi.n	80066fe <_puts_r+0x22>
 80066f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066fa:	f000 f99c 	bl	8006a36 <__retarget_lock_acquire_recursive>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	0719      	lsls	r1, r3, #28
 8006702:	d513      	bpl.n	800672c <_puts_r+0x50>
 8006704:	6923      	ldr	r3, [r4, #16]
 8006706:	b18b      	cbz	r3, 800672c <_puts_r+0x50>
 8006708:	3e01      	subs	r6, #1
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006710:	3b01      	subs	r3, #1
 8006712:	60a3      	str	r3, [r4, #8]
 8006714:	b9e9      	cbnz	r1, 8006752 <_puts_r+0x76>
 8006716:	2b00      	cmp	r3, #0
 8006718:	da2e      	bge.n	8006778 <_puts_r+0x9c>
 800671a:	4622      	mov	r2, r4
 800671c:	210a      	movs	r1, #10
 800671e:	4628      	mov	r0, r5
 8006720:	f000 f87b 	bl	800681a <__swbuf_r>
 8006724:	3001      	adds	r0, #1
 8006726:	d007      	beq.n	8006738 <_puts_r+0x5c>
 8006728:	250a      	movs	r5, #10
 800672a:	e007      	b.n	800673c <_puts_r+0x60>
 800672c:	4621      	mov	r1, r4
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f8b0 	bl	8006894 <__swsetup_r>
 8006734:	2800      	cmp	r0, #0
 8006736:	d0e7      	beq.n	8006708 <_puts_r+0x2c>
 8006738:	f04f 35ff 	mov.w	r5, #4294967295
 800673c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800673e:	07da      	lsls	r2, r3, #31
 8006740:	d405      	bmi.n	800674e <_puts_r+0x72>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	059b      	lsls	r3, r3, #22
 8006746:	d402      	bmi.n	800674e <_puts_r+0x72>
 8006748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800674a:	f000 f975 	bl	8006a38 <__retarget_lock_release_recursive>
 800674e:	4628      	mov	r0, r5
 8006750:	bd70      	pop	{r4, r5, r6, pc}
 8006752:	2b00      	cmp	r3, #0
 8006754:	da04      	bge.n	8006760 <_puts_r+0x84>
 8006756:	69a2      	ldr	r2, [r4, #24]
 8006758:	429a      	cmp	r2, r3
 800675a:	dc06      	bgt.n	800676a <_puts_r+0x8e>
 800675c:	290a      	cmp	r1, #10
 800675e:	d004      	beq.n	800676a <_puts_r+0x8e>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	6022      	str	r2, [r4, #0]
 8006766:	7019      	strb	r1, [r3, #0]
 8006768:	e7cf      	b.n	800670a <_puts_r+0x2e>
 800676a:	4622      	mov	r2, r4
 800676c:	4628      	mov	r0, r5
 800676e:	f000 f854 	bl	800681a <__swbuf_r>
 8006772:	3001      	adds	r0, #1
 8006774:	d1c9      	bne.n	800670a <_puts_r+0x2e>
 8006776:	e7df      	b.n	8006738 <_puts_r+0x5c>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	250a      	movs	r5, #10
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	6022      	str	r2, [r4, #0]
 8006780:	701d      	strb	r5, [r3, #0]
 8006782:	e7db      	b.n	800673c <_puts_r+0x60>

08006784 <puts>:
 8006784:	4b02      	ldr	r3, [pc, #8]	; (8006790 <puts+0xc>)
 8006786:	4601      	mov	r1, r0
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	f7ff bfa7 	b.w	80066dc <_puts_r>
 800678e:	bf00      	nop
 8006790:	20000064 	.word	0x20000064

08006794 <__sread>:
 8006794:	b510      	push	{r4, lr}
 8006796:	460c      	mov	r4, r1
 8006798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679c:	f000 f8fc 	bl	8006998 <_read_r>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	bfab      	itete	ge
 80067a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067a6:	89a3      	ldrhlt	r3, [r4, #12]
 80067a8:	181b      	addge	r3, r3, r0
 80067aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067ae:	bfac      	ite	ge
 80067b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80067b2:	81a3      	strhlt	r3, [r4, #12]
 80067b4:	bd10      	pop	{r4, pc}

080067b6 <__swrite>:
 80067b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ba:	461f      	mov	r7, r3
 80067bc:	898b      	ldrh	r3, [r1, #12]
 80067be:	05db      	lsls	r3, r3, #23
 80067c0:	4605      	mov	r5, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	4616      	mov	r6, r2
 80067c6:	d505      	bpl.n	80067d4 <__swrite+0x1e>
 80067c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067cc:	2302      	movs	r3, #2
 80067ce:	2200      	movs	r2, #0
 80067d0:	f000 f8d0 	bl	8006974 <_lseek_r>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	4632      	mov	r2, r6
 80067e2:	463b      	mov	r3, r7
 80067e4:	4628      	mov	r0, r5
 80067e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ea:	f000 b8e7 	b.w	80069bc <_write_r>

080067ee <__sseek>:
 80067ee:	b510      	push	{r4, lr}
 80067f0:	460c      	mov	r4, r1
 80067f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f6:	f000 f8bd 	bl	8006974 <_lseek_r>
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	bf15      	itete	ne
 8006800:	6560      	strne	r0, [r4, #84]	; 0x54
 8006802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800680a:	81a3      	strheq	r3, [r4, #12]
 800680c:	bf18      	it	ne
 800680e:	81a3      	strhne	r3, [r4, #12]
 8006810:	bd10      	pop	{r4, pc}

08006812 <__sclose>:
 8006812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006816:	f000 b89d 	b.w	8006954 <_close_r>

0800681a <__swbuf_r>:
 800681a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681c:	460e      	mov	r6, r1
 800681e:	4614      	mov	r4, r2
 8006820:	4605      	mov	r5, r0
 8006822:	b118      	cbz	r0, 800682c <__swbuf_r+0x12>
 8006824:	6a03      	ldr	r3, [r0, #32]
 8006826:	b90b      	cbnz	r3, 800682c <__swbuf_r+0x12>
 8006828:	f7ff ff10 	bl	800664c <__sinit>
 800682c:	69a3      	ldr	r3, [r4, #24]
 800682e:	60a3      	str	r3, [r4, #8]
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	071a      	lsls	r2, r3, #28
 8006834:	d525      	bpl.n	8006882 <__swbuf_r+0x68>
 8006836:	6923      	ldr	r3, [r4, #16]
 8006838:	b31b      	cbz	r3, 8006882 <__swbuf_r+0x68>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	6922      	ldr	r2, [r4, #16]
 800683e:	1a98      	subs	r0, r3, r2
 8006840:	6963      	ldr	r3, [r4, #20]
 8006842:	b2f6      	uxtb	r6, r6
 8006844:	4283      	cmp	r3, r0
 8006846:	4637      	mov	r7, r6
 8006848:	dc04      	bgt.n	8006854 <__swbuf_r+0x3a>
 800684a:	4621      	mov	r1, r4
 800684c:	4628      	mov	r0, r5
 800684e:	f000 fd47 	bl	80072e0 <_fflush_r>
 8006852:	b9e0      	cbnz	r0, 800688e <__swbuf_r+0x74>
 8006854:	68a3      	ldr	r3, [r4, #8]
 8006856:	3b01      	subs	r3, #1
 8006858:	60a3      	str	r3, [r4, #8]
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	6022      	str	r2, [r4, #0]
 8006860:	701e      	strb	r6, [r3, #0]
 8006862:	6962      	ldr	r2, [r4, #20]
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	429a      	cmp	r2, r3
 8006868:	d004      	beq.n	8006874 <__swbuf_r+0x5a>
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	07db      	lsls	r3, r3, #31
 800686e:	d506      	bpl.n	800687e <__swbuf_r+0x64>
 8006870:	2e0a      	cmp	r6, #10
 8006872:	d104      	bne.n	800687e <__swbuf_r+0x64>
 8006874:	4621      	mov	r1, r4
 8006876:	4628      	mov	r0, r5
 8006878:	f000 fd32 	bl	80072e0 <_fflush_r>
 800687c:	b938      	cbnz	r0, 800688e <__swbuf_r+0x74>
 800687e:	4638      	mov	r0, r7
 8006880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006882:	4621      	mov	r1, r4
 8006884:	4628      	mov	r0, r5
 8006886:	f000 f805 	bl	8006894 <__swsetup_r>
 800688a:	2800      	cmp	r0, #0
 800688c:	d0d5      	beq.n	800683a <__swbuf_r+0x20>
 800688e:	f04f 37ff 	mov.w	r7, #4294967295
 8006892:	e7f4      	b.n	800687e <__swbuf_r+0x64>

08006894 <__swsetup_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4b2a      	ldr	r3, [pc, #168]	; (8006940 <__swsetup_r+0xac>)
 8006898:	4605      	mov	r5, r0
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	460c      	mov	r4, r1
 800689e:	b118      	cbz	r0, 80068a8 <__swsetup_r+0x14>
 80068a0:	6a03      	ldr	r3, [r0, #32]
 80068a2:	b90b      	cbnz	r3, 80068a8 <__swsetup_r+0x14>
 80068a4:	f7ff fed2 	bl	800664c <__sinit>
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068ae:	0718      	lsls	r0, r3, #28
 80068b0:	d422      	bmi.n	80068f8 <__swsetup_r+0x64>
 80068b2:	06d9      	lsls	r1, r3, #27
 80068b4:	d407      	bmi.n	80068c6 <__swsetup_r+0x32>
 80068b6:	2309      	movs	r3, #9
 80068b8:	602b      	str	r3, [r5, #0]
 80068ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	e034      	b.n	8006930 <__swsetup_r+0x9c>
 80068c6:	0758      	lsls	r0, r3, #29
 80068c8:	d512      	bpl.n	80068f0 <__swsetup_r+0x5c>
 80068ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068cc:	b141      	cbz	r1, 80068e0 <__swsetup_r+0x4c>
 80068ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068d2:	4299      	cmp	r1, r3
 80068d4:	d002      	beq.n	80068dc <__swsetup_r+0x48>
 80068d6:	4628      	mov	r0, r5
 80068d8:	f000 f8b0 	bl	8006a3c <_free_r>
 80068dc:	2300      	movs	r3, #0
 80068de:	6363      	str	r3, [r4, #52]	; 0x34
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068e6:	81a3      	strh	r3, [r4, #12]
 80068e8:	2300      	movs	r3, #0
 80068ea:	6063      	str	r3, [r4, #4]
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	f043 0308 	orr.w	r3, r3, #8
 80068f6:	81a3      	strh	r3, [r4, #12]
 80068f8:	6923      	ldr	r3, [r4, #16]
 80068fa:	b94b      	cbnz	r3, 8006910 <__swsetup_r+0x7c>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006906:	d003      	beq.n	8006910 <__swsetup_r+0x7c>
 8006908:	4621      	mov	r1, r4
 800690a:	4628      	mov	r0, r5
 800690c:	f000 fd36 	bl	800737c <__smakebuf_r>
 8006910:	89a0      	ldrh	r0, [r4, #12]
 8006912:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006916:	f010 0301 	ands.w	r3, r0, #1
 800691a:	d00a      	beq.n	8006932 <__swsetup_r+0x9e>
 800691c:	2300      	movs	r3, #0
 800691e:	60a3      	str	r3, [r4, #8]
 8006920:	6963      	ldr	r3, [r4, #20]
 8006922:	425b      	negs	r3, r3
 8006924:	61a3      	str	r3, [r4, #24]
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	b943      	cbnz	r3, 800693c <__swsetup_r+0xa8>
 800692a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800692e:	d1c4      	bne.n	80068ba <__swsetup_r+0x26>
 8006930:	bd38      	pop	{r3, r4, r5, pc}
 8006932:	0781      	lsls	r1, r0, #30
 8006934:	bf58      	it	pl
 8006936:	6963      	ldrpl	r3, [r4, #20]
 8006938:	60a3      	str	r3, [r4, #8]
 800693a:	e7f4      	b.n	8006926 <__swsetup_r+0x92>
 800693c:	2000      	movs	r0, #0
 800693e:	e7f7      	b.n	8006930 <__swsetup_r+0x9c>
 8006940:	20000064 	.word	0x20000064

08006944 <memset>:
 8006944:	4402      	add	r2, r0
 8006946:	4603      	mov	r3, r0
 8006948:	4293      	cmp	r3, r2
 800694a:	d100      	bne.n	800694e <memset+0xa>
 800694c:	4770      	bx	lr
 800694e:	f803 1b01 	strb.w	r1, [r3], #1
 8006952:	e7f9      	b.n	8006948 <memset+0x4>

08006954 <_close_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d06      	ldr	r5, [pc, #24]	; (8006970 <_close_r+0x1c>)
 8006958:	2300      	movs	r3, #0
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fa ff66 	bl	8001830 <_close>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_close_r+0x1a>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_close_r+0x1a>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	200006a0 	.word	0x200006a0

08006974 <_lseek_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4d07      	ldr	r5, [pc, #28]	; (8006994 <_lseek_r+0x20>)
 8006978:	4604      	mov	r4, r0
 800697a:	4608      	mov	r0, r1
 800697c:	4611      	mov	r1, r2
 800697e:	2200      	movs	r2, #0
 8006980:	602a      	str	r2, [r5, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	f7fa ff7b 	bl	800187e <_lseek>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_lseek_r+0x1e>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_lseek_r+0x1e>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	200006a0 	.word	0x200006a0

08006998 <_read_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4d07      	ldr	r5, [pc, #28]	; (80069b8 <_read_r+0x20>)
 800699c:	4604      	mov	r4, r0
 800699e:	4608      	mov	r0, r1
 80069a0:	4611      	mov	r1, r2
 80069a2:	2200      	movs	r2, #0
 80069a4:	602a      	str	r2, [r5, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f7fa ff09 	bl	80017be <_read>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_read_r+0x1e>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_read_r+0x1e>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	200006a0 	.word	0x200006a0

080069bc <_write_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4d07      	ldr	r5, [pc, #28]	; (80069dc <_write_r+0x20>)
 80069c0:	4604      	mov	r4, r0
 80069c2:	4608      	mov	r0, r1
 80069c4:	4611      	mov	r1, r2
 80069c6:	2200      	movs	r2, #0
 80069c8:	602a      	str	r2, [r5, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f7fa ff14 	bl	80017f8 <_write>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_write_r+0x1e>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_write_r+0x1e>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	200006a0 	.word	0x200006a0

080069e0 <__errno>:
 80069e0:	4b01      	ldr	r3, [pc, #4]	; (80069e8 <__errno+0x8>)
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	20000064 	.word	0x20000064

080069ec <__libc_init_array>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	4d0d      	ldr	r5, [pc, #52]	; (8006a24 <__libc_init_array+0x38>)
 80069f0:	4c0d      	ldr	r4, [pc, #52]	; (8006a28 <__libc_init_array+0x3c>)
 80069f2:	1b64      	subs	r4, r4, r5
 80069f4:	10a4      	asrs	r4, r4, #2
 80069f6:	2600      	movs	r6, #0
 80069f8:	42a6      	cmp	r6, r4
 80069fa:	d109      	bne.n	8006a10 <__libc_init_array+0x24>
 80069fc:	4d0b      	ldr	r5, [pc, #44]	; (8006a2c <__libc_init_array+0x40>)
 80069fe:	4c0c      	ldr	r4, [pc, #48]	; (8006a30 <__libc_init_array+0x44>)
 8006a00:	f000 fd2a 	bl	8007458 <_init>
 8006a04:	1b64      	subs	r4, r4, r5
 8006a06:	10a4      	asrs	r4, r4, #2
 8006a08:	2600      	movs	r6, #0
 8006a0a:	42a6      	cmp	r6, r4
 8006a0c:	d105      	bne.n	8006a1a <__libc_init_array+0x2e>
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a14:	4798      	blx	r3
 8006a16:	3601      	adds	r6, #1
 8006a18:	e7ee      	b.n	80069f8 <__libc_init_array+0xc>
 8006a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1e:	4798      	blx	r3
 8006a20:	3601      	adds	r6, #1
 8006a22:	e7f2      	b.n	8006a0a <__libc_init_array+0x1e>
 8006a24:	0800752c 	.word	0x0800752c
 8006a28:	0800752c 	.word	0x0800752c
 8006a2c:	0800752c 	.word	0x0800752c
 8006a30:	08007530 	.word	0x08007530

08006a34 <__retarget_lock_init_recursive>:
 8006a34:	4770      	bx	lr

08006a36 <__retarget_lock_acquire_recursive>:
 8006a36:	4770      	bx	lr

08006a38 <__retarget_lock_release_recursive>:
 8006a38:	4770      	bx	lr
	...

08006a3c <_free_r>:
 8006a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a3e:	2900      	cmp	r1, #0
 8006a40:	d044      	beq.n	8006acc <_free_r+0x90>
 8006a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a46:	9001      	str	r0, [sp, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a4e:	bfb8      	it	lt
 8006a50:	18e4      	addlt	r4, r4, r3
 8006a52:	f000 f8df 	bl	8006c14 <__malloc_lock>
 8006a56:	4a1e      	ldr	r2, [pc, #120]	; (8006ad0 <_free_r+0x94>)
 8006a58:	9801      	ldr	r0, [sp, #4]
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	b933      	cbnz	r3, 8006a6c <_free_r+0x30>
 8006a5e:	6063      	str	r3, [r4, #4]
 8006a60:	6014      	str	r4, [r2, #0]
 8006a62:	b003      	add	sp, #12
 8006a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a68:	f000 b8da 	b.w	8006c20 <__malloc_unlock>
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	d908      	bls.n	8006a82 <_free_r+0x46>
 8006a70:	6825      	ldr	r5, [r4, #0]
 8006a72:	1961      	adds	r1, r4, r5
 8006a74:	428b      	cmp	r3, r1
 8006a76:	bf01      	itttt	eq
 8006a78:	6819      	ldreq	r1, [r3, #0]
 8006a7a:	685b      	ldreq	r3, [r3, #4]
 8006a7c:	1949      	addeq	r1, r1, r5
 8006a7e:	6021      	streq	r1, [r4, #0]
 8006a80:	e7ed      	b.n	8006a5e <_free_r+0x22>
 8006a82:	461a      	mov	r2, r3
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	b10b      	cbz	r3, 8006a8c <_free_r+0x50>
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	d9fa      	bls.n	8006a82 <_free_r+0x46>
 8006a8c:	6811      	ldr	r1, [r2, #0]
 8006a8e:	1855      	adds	r5, r2, r1
 8006a90:	42a5      	cmp	r5, r4
 8006a92:	d10b      	bne.n	8006aac <_free_r+0x70>
 8006a94:	6824      	ldr	r4, [r4, #0]
 8006a96:	4421      	add	r1, r4
 8006a98:	1854      	adds	r4, r2, r1
 8006a9a:	42a3      	cmp	r3, r4
 8006a9c:	6011      	str	r1, [r2, #0]
 8006a9e:	d1e0      	bne.n	8006a62 <_free_r+0x26>
 8006aa0:	681c      	ldr	r4, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	6053      	str	r3, [r2, #4]
 8006aa6:	440c      	add	r4, r1
 8006aa8:	6014      	str	r4, [r2, #0]
 8006aaa:	e7da      	b.n	8006a62 <_free_r+0x26>
 8006aac:	d902      	bls.n	8006ab4 <_free_r+0x78>
 8006aae:	230c      	movs	r3, #12
 8006ab0:	6003      	str	r3, [r0, #0]
 8006ab2:	e7d6      	b.n	8006a62 <_free_r+0x26>
 8006ab4:	6825      	ldr	r5, [r4, #0]
 8006ab6:	1961      	adds	r1, r4, r5
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	bf04      	itt	eq
 8006abc:	6819      	ldreq	r1, [r3, #0]
 8006abe:	685b      	ldreq	r3, [r3, #4]
 8006ac0:	6063      	str	r3, [r4, #4]
 8006ac2:	bf04      	itt	eq
 8006ac4:	1949      	addeq	r1, r1, r5
 8006ac6:	6021      	streq	r1, [r4, #0]
 8006ac8:	6054      	str	r4, [r2, #4]
 8006aca:	e7ca      	b.n	8006a62 <_free_r+0x26>
 8006acc:	b003      	add	sp, #12
 8006ace:	bd30      	pop	{r4, r5, pc}
 8006ad0:	200006a8 	.word	0x200006a8

08006ad4 <sbrk_aligned>:
 8006ad4:	b570      	push	{r4, r5, r6, lr}
 8006ad6:	4e0e      	ldr	r6, [pc, #56]	; (8006b10 <sbrk_aligned+0x3c>)
 8006ad8:	460c      	mov	r4, r1
 8006ada:	6831      	ldr	r1, [r6, #0]
 8006adc:	4605      	mov	r5, r0
 8006ade:	b911      	cbnz	r1, 8006ae6 <sbrk_aligned+0x12>
 8006ae0:	f000 fcaa 	bl	8007438 <_sbrk_r>
 8006ae4:	6030      	str	r0, [r6, #0]
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 fca5 	bl	8007438 <_sbrk_r>
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d00a      	beq.n	8006b08 <sbrk_aligned+0x34>
 8006af2:	1cc4      	adds	r4, r0, #3
 8006af4:	f024 0403 	bic.w	r4, r4, #3
 8006af8:	42a0      	cmp	r0, r4
 8006afa:	d007      	beq.n	8006b0c <sbrk_aligned+0x38>
 8006afc:	1a21      	subs	r1, r4, r0
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 fc9a 	bl	8007438 <_sbrk_r>
 8006b04:	3001      	adds	r0, #1
 8006b06:	d101      	bne.n	8006b0c <sbrk_aligned+0x38>
 8006b08:	f04f 34ff 	mov.w	r4, #4294967295
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	200006ac 	.word	0x200006ac

08006b14 <_malloc_r>:
 8006b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b18:	1ccd      	adds	r5, r1, #3
 8006b1a:	f025 0503 	bic.w	r5, r5, #3
 8006b1e:	3508      	adds	r5, #8
 8006b20:	2d0c      	cmp	r5, #12
 8006b22:	bf38      	it	cc
 8006b24:	250c      	movcc	r5, #12
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	4607      	mov	r7, r0
 8006b2a:	db01      	blt.n	8006b30 <_malloc_r+0x1c>
 8006b2c:	42a9      	cmp	r1, r5
 8006b2e:	d905      	bls.n	8006b3c <_malloc_r+0x28>
 8006b30:	230c      	movs	r3, #12
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	2600      	movs	r6, #0
 8006b36:	4630      	mov	r0, r6
 8006b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c10 <_malloc_r+0xfc>
 8006b40:	f000 f868 	bl	8006c14 <__malloc_lock>
 8006b44:	f8d8 3000 	ldr.w	r3, [r8]
 8006b48:	461c      	mov	r4, r3
 8006b4a:	bb5c      	cbnz	r4, 8006ba4 <_malloc_r+0x90>
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	4638      	mov	r0, r7
 8006b50:	f7ff ffc0 	bl	8006ad4 <sbrk_aligned>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	4604      	mov	r4, r0
 8006b58:	d155      	bne.n	8006c06 <_malloc_r+0xf2>
 8006b5a:	f8d8 4000 	ldr.w	r4, [r8]
 8006b5e:	4626      	mov	r6, r4
 8006b60:	2e00      	cmp	r6, #0
 8006b62:	d145      	bne.n	8006bf0 <_malloc_r+0xdc>
 8006b64:	2c00      	cmp	r4, #0
 8006b66:	d048      	beq.n	8006bfa <_malloc_r+0xe6>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	eb04 0903 	add.w	r9, r4, r3
 8006b72:	f000 fc61 	bl	8007438 <_sbrk_r>
 8006b76:	4581      	cmp	r9, r0
 8006b78:	d13f      	bne.n	8006bfa <_malloc_r+0xe6>
 8006b7a:	6821      	ldr	r1, [r4, #0]
 8006b7c:	1a6d      	subs	r5, r5, r1
 8006b7e:	4629      	mov	r1, r5
 8006b80:	4638      	mov	r0, r7
 8006b82:	f7ff ffa7 	bl	8006ad4 <sbrk_aligned>
 8006b86:	3001      	adds	r0, #1
 8006b88:	d037      	beq.n	8006bfa <_malloc_r+0xe6>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	442b      	add	r3, r5
 8006b8e:	6023      	str	r3, [r4, #0]
 8006b90:	f8d8 3000 	ldr.w	r3, [r8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d038      	beq.n	8006c0a <_malloc_r+0xf6>
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	42a2      	cmp	r2, r4
 8006b9c:	d12b      	bne.n	8006bf6 <_malloc_r+0xe2>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	e00f      	b.n	8006bc4 <_malloc_r+0xb0>
 8006ba4:	6822      	ldr	r2, [r4, #0]
 8006ba6:	1b52      	subs	r2, r2, r5
 8006ba8:	d41f      	bmi.n	8006bea <_malloc_r+0xd6>
 8006baa:	2a0b      	cmp	r2, #11
 8006bac:	d917      	bls.n	8006bde <_malloc_r+0xca>
 8006bae:	1961      	adds	r1, r4, r5
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	6025      	str	r5, [r4, #0]
 8006bb4:	bf18      	it	ne
 8006bb6:	6059      	strne	r1, [r3, #4]
 8006bb8:	6863      	ldr	r3, [r4, #4]
 8006bba:	bf08      	it	eq
 8006bbc:	f8c8 1000 	streq.w	r1, [r8]
 8006bc0:	5162      	str	r2, [r4, r5]
 8006bc2:	604b      	str	r3, [r1, #4]
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f104 060b 	add.w	r6, r4, #11
 8006bca:	f000 f829 	bl	8006c20 <__malloc_unlock>
 8006bce:	f026 0607 	bic.w	r6, r6, #7
 8006bd2:	1d23      	adds	r3, r4, #4
 8006bd4:	1af2      	subs	r2, r6, r3
 8006bd6:	d0ae      	beq.n	8006b36 <_malloc_r+0x22>
 8006bd8:	1b9b      	subs	r3, r3, r6
 8006bda:	50a3      	str	r3, [r4, r2]
 8006bdc:	e7ab      	b.n	8006b36 <_malloc_r+0x22>
 8006bde:	42a3      	cmp	r3, r4
 8006be0:	6862      	ldr	r2, [r4, #4]
 8006be2:	d1dd      	bne.n	8006ba0 <_malloc_r+0x8c>
 8006be4:	f8c8 2000 	str.w	r2, [r8]
 8006be8:	e7ec      	b.n	8006bc4 <_malloc_r+0xb0>
 8006bea:	4623      	mov	r3, r4
 8006bec:	6864      	ldr	r4, [r4, #4]
 8006bee:	e7ac      	b.n	8006b4a <_malloc_r+0x36>
 8006bf0:	4634      	mov	r4, r6
 8006bf2:	6876      	ldr	r6, [r6, #4]
 8006bf4:	e7b4      	b.n	8006b60 <_malloc_r+0x4c>
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	e7cc      	b.n	8006b94 <_malloc_r+0x80>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	603b      	str	r3, [r7, #0]
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f000 f80e 	bl	8006c20 <__malloc_unlock>
 8006c04:	e797      	b.n	8006b36 <_malloc_r+0x22>
 8006c06:	6025      	str	r5, [r4, #0]
 8006c08:	e7dc      	b.n	8006bc4 <_malloc_r+0xb0>
 8006c0a:	605b      	str	r3, [r3, #4]
 8006c0c:	deff      	udf	#255	; 0xff
 8006c0e:	bf00      	nop
 8006c10:	200006a8 	.word	0x200006a8

08006c14 <__malloc_lock>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__malloc_lock+0x8>)
 8006c16:	f7ff bf0e 	b.w	8006a36 <__retarget_lock_acquire_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	200006a4 	.word	0x200006a4

08006c20 <__malloc_unlock>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__malloc_unlock+0x8>)
 8006c22:	f7ff bf09 	b.w	8006a38 <__retarget_lock_release_recursive>
 8006c26:	bf00      	nop
 8006c28:	200006a4 	.word	0x200006a4

08006c2c <__sfputc_r>:
 8006c2c:	6893      	ldr	r3, [r2, #8]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	b410      	push	{r4}
 8006c34:	6093      	str	r3, [r2, #8]
 8006c36:	da08      	bge.n	8006c4a <__sfputc_r+0x1e>
 8006c38:	6994      	ldr	r4, [r2, #24]
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	db01      	blt.n	8006c42 <__sfputc_r+0x16>
 8006c3e:	290a      	cmp	r1, #10
 8006c40:	d103      	bne.n	8006c4a <__sfputc_r+0x1e>
 8006c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c46:	f7ff bde8 	b.w	800681a <__swbuf_r>
 8006c4a:	6813      	ldr	r3, [r2, #0]
 8006c4c:	1c58      	adds	r0, r3, #1
 8006c4e:	6010      	str	r0, [r2, #0]
 8006c50:	7019      	strb	r1, [r3, #0]
 8006c52:	4608      	mov	r0, r1
 8006c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <__sfputs_r>:
 8006c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	460f      	mov	r7, r1
 8006c60:	4614      	mov	r4, r2
 8006c62:	18d5      	adds	r5, r2, r3
 8006c64:	42ac      	cmp	r4, r5
 8006c66:	d101      	bne.n	8006c6c <__sfputs_r+0x12>
 8006c68:	2000      	movs	r0, #0
 8006c6a:	e007      	b.n	8006c7c <__sfputs_r+0x22>
 8006c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c70:	463a      	mov	r2, r7
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7ff ffda 	bl	8006c2c <__sfputc_r>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d1f3      	bne.n	8006c64 <__sfputs_r+0xa>
 8006c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c80 <_vfiprintf_r>:
 8006c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	460d      	mov	r5, r1
 8006c86:	b09d      	sub	sp, #116	; 0x74
 8006c88:	4614      	mov	r4, r2
 8006c8a:	4698      	mov	r8, r3
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	b118      	cbz	r0, 8006c98 <_vfiprintf_r+0x18>
 8006c90:	6a03      	ldr	r3, [r0, #32]
 8006c92:	b90b      	cbnz	r3, 8006c98 <_vfiprintf_r+0x18>
 8006c94:	f7ff fcda 	bl	800664c <__sinit>
 8006c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c9a:	07d9      	lsls	r1, r3, #31
 8006c9c:	d405      	bmi.n	8006caa <_vfiprintf_r+0x2a>
 8006c9e:	89ab      	ldrh	r3, [r5, #12]
 8006ca0:	059a      	lsls	r2, r3, #22
 8006ca2:	d402      	bmi.n	8006caa <_vfiprintf_r+0x2a>
 8006ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ca6:	f7ff fec6 	bl	8006a36 <__retarget_lock_acquire_recursive>
 8006caa:	89ab      	ldrh	r3, [r5, #12]
 8006cac:	071b      	lsls	r3, r3, #28
 8006cae:	d501      	bpl.n	8006cb4 <_vfiprintf_r+0x34>
 8006cb0:	692b      	ldr	r3, [r5, #16]
 8006cb2:	b99b      	cbnz	r3, 8006cdc <_vfiprintf_r+0x5c>
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff fdec 	bl	8006894 <__swsetup_r>
 8006cbc:	b170      	cbz	r0, 8006cdc <_vfiprintf_r+0x5c>
 8006cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cc0:	07dc      	lsls	r4, r3, #31
 8006cc2:	d504      	bpl.n	8006cce <_vfiprintf_r+0x4e>
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc8:	b01d      	add	sp, #116	; 0x74
 8006cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cce:	89ab      	ldrh	r3, [r5, #12]
 8006cd0:	0598      	lsls	r0, r3, #22
 8006cd2:	d4f7      	bmi.n	8006cc4 <_vfiprintf_r+0x44>
 8006cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cd6:	f7ff feaf 	bl	8006a38 <__retarget_lock_release_recursive>
 8006cda:	e7f3      	b.n	8006cc4 <_vfiprintf_r+0x44>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce0:	2320      	movs	r3, #32
 8006ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cea:	2330      	movs	r3, #48	; 0x30
 8006cec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006ea0 <_vfiprintf_r+0x220>
 8006cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cf4:	f04f 0901 	mov.w	r9, #1
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	469a      	mov	sl, r3
 8006cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d00:	b10a      	cbz	r2, 8006d06 <_vfiprintf_r+0x86>
 8006d02:	2a25      	cmp	r2, #37	; 0x25
 8006d04:	d1f9      	bne.n	8006cfa <_vfiprintf_r+0x7a>
 8006d06:	ebba 0b04 	subs.w	fp, sl, r4
 8006d0a:	d00b      	beq.n	8006d24 <_vfiprintf_r+0xa4>
 8006d0c:	465b      	mov	r3, fp
 8006d0e:	4622      	mov	r2, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	4630      	mov	r0, r6
 8006d14:	f7ff ffa1 	bl	8006c5a <__sfputs_r>
 8006d18:	3001      	adds	r0, #1
 8006d1a:	f000 80a9 	beq.w	8006e70 <_vfiprintf_r+0x1f0>
 8006d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d20:	445a      	add	r2, fp
 8006d22:	9209      	str	r2, [sp, #36]	; 0x24
 8006d24:	f89a 3000 	ldrb.w	r3, [sl]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 80a1 	beq.w	8006e70 <_vfiprintf_r+0x1f0>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295
 8006d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d38:	f10a 0a01 	add.w	sl, sl, #1
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	9307      	str	r3, [sp, #28]
 8006d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d44:	931a      	str	r3, [sp, #104]	; 0x68
 8006d46:	4654      	mov	r4, sl
 8006d48:	2205      	movs	r2, #5
 8006d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d4e:	4854      	ldr	r0, [pc, #336]	; (8006ea0 <_vfiprintf_r+0x220>)
 8006d50:	f7f9 fa56 	bl	8000200 <memchr>
 8006d54:	9a04      	ldr	r2, [sp, #16]
 8006d56:	b9d8      	cbnz	r0, 8006d90 <_vfiprintf_r+0x110>
 8006d58:	06d1      	lsls	r1, r2, #27
 8006d5a:	bf44      	itt	mi
 8006d5c:	2320      	movmi	r3, #32
 8006d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d62:	0713      	lsls	r3, r2, #28
 8006d64:	bf44      	itt	mi
 8006d66:	232b      	movmi	r3, #43	; 0x2b
 8006d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d70:	2b2a      	cmp	r3, #42	; 0x2a
 8006d72:	d015      	beq.n	8006da0 <_vfiprintf_r+0x120>
 8006d74:	9a07      	ldr	r2, [sp, #28]
 8006d76:	4654      	mov	r4, sl
 8006d78:	2000      	movs	r0, #0
 8006d7a:	f04f 0c0a 	mov.w	ip, #10
 8006d7e:	4621      	mov	r1, r4
 8006d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d84:	3b30      	subs	r3, #48	; 0x30
 8006d86:	2b09      	cmp	r3, #9
 8006d88:	d94d      	bls.n	8006e26 <_vfiprintf_r+0x1a6>
 8006d8a:	b1b0      	cbz	r0, 8006dba <_vfiprintf_r+0x13a>
 8006d8c:	9207      	str	r2, [sp, #28]
 8006d8e:	e014      	b.n	8006dba <_vfiprintf_r+0x13a>
 8006d90:	eba0 0308 	sub.w	r3, r0, r8
 8006d94:	fa09 f303 	lsl.w	r3, r9, r3
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	46a2      	mov	sl, r4
 8006d9e:	e7d2      	b.n	8006d46 <_vfiprintf_r+0xc6>
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	1d19      	adds	r1, r3, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	9103      	str	r1, [sp, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bfbb      	ittet	lt
 8006dac:	425b      	neglt	r3, r3
 8006dae:	f042 0202 	orrlt.w	r2, r2, #2
 8006db2:	9307      	strge	r3, [sp, #28]
 8006db4:	9307      	strlt	r3, [sp, #28]
 8006db6:	bfb8      	it	lt
 8006db8:	9204      	strlt	r2, [sp, #16]
 8006dba:	7823      	ldrb	r3, [r4, #0]
 8006dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8006dbe:	d10c      	bne.n	8006dda <_vfiprintf_r+0x15a>
 8006dc0:	7863      	ldrb	r3, [r4, #1]
 8006dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006dc4:	d134      	bne.n	8006e30 <_vfiprintf_r+0x1b0>
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	1d1a      	adds	r2, r3, #4
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	9203      	str	r2, [sp, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bfb8      	it	lt
 8006dd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dd6:	3402      	adds	r4, #2
 8006dd8:	9305      	str	r3, [sp, #20]
 8006dda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006eb0 <_vfiprintf_r+0x230>
 8006dde:	7821      	ldrb	r1, [r4, #0]
 8006de0:	2203      	movs	r2, #3
 8006de2:	4650      	mov	r0, sl
 8006de4:	f7f9 fa0c 	bl	8000200 <memchr>
 8006de8:	b138      	cbz	r0, 8006dfa <_vfiprintf_r+0x17a>
 8006dea:	9b04      	ldr	r3, [sp, #16]
 8006dec:	eba0 000a 	sub.w	r0, r0, sl
 8006df0:	2240      	movs	r2, #64	; 0x40
 8006df2:	4082      	lsls	r2, r0
 8006df4:	4313      	orrs	r3, r2
 8006df6:	3401      	adds	r4, #1
 8006df8:	9304      	str	r3, [sp, #16]
 8006dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfe:	4829      	ldr	r0, [pc, #164]	; (8006ea4 <_vfiprintf_r+0x224>)
 8006e00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e04:	2206      	movs	r2, #6
 8006e06:	f7f9 f9fb 	bl	8000200 <memchr>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d03f      	beq.n	8006e8e <_vfiprintf_r+0x20e>
 8006e0e:	4b26      	ldr	r3, [pc, #152]	; (8006ea8 <_vfiprintf_r+0x228>)
 8006e10:	bb1b      	cbnz	r3, 8006e5a <_vfiprintf_r+0x1da>
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	3307      	adds	r3, #7
 8006e16:	f023 0307 	bic.w	r3, r3, #7
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	9303      	str	r3, [sp, #12]
 8006e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e20:	443b      	add	r3, r7
 8006e22:	9309      	str	r3, [sp, #36]	; 0x24
 8006e24:	e768      	b.n	8006cf8 <_vfiprintf_r+0x78>
 8006e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	e7a6      	b.n	8006d7e <_vfiprintf_r+0xfe>
 8006e30:	2300      	movs	r3, #0
 8006e32:	3401      	adds	r4, #1
 8006e34:	9305      	str	r3, [sp, #20]
 8006e36:	4619      	mov	r1, r3
 8006e38:	f04f 0c0a 	mov.w	ip, #10
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e42:	3a30      	subs	r2, #48	; 0x30
 8006e44:	2a09      	cmp	r2, #9
 8006e46:	d903      	bls.n	8006e50 <_vfiprintf_r+0x1d0>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0c6      	beq.n	8006dda <_vfiprintf_r+0x15a>
 8006e4c:	9105      	str	r1, [sp, #20]
 8006e4e:	e7c4      	b.n	8006dda <_vfiprintf_r+0x15a>
 8006e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e54:	4604      	mov	r4, r0
 8006e56:	2301      	movs	r3, #1
 8006e58:	e7f0      	b.n	8006e3c <_vfiprintf_r+0x1bc>
 8006e5a:	ab03      	add	r3, sp, #12
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	462a      	mov	r2, r5
 8006e60:	4b12      	ldr	r3, [pc, #72]	; (8006eac <_vfiprintf_r+0x22c>)
 8006e62:	a904      	add	r1, sp, #16
 8006e64:	4630      	mov	r0, r6
 8006e66:	f3af 8000 	nop.w
 8006e6a:	4607      	mov	r7, r0
 8006e6c:	1c78      	adds	r0, r7, #1
 8006e6e:	d1d6      	bne.n	8006e1e <_vfiprintf_r+0x19e>
 8006e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e72:	07d9      	lsls	r1, r3, #31
 8006e74:	d405      	bmi.n	8006e82 <_vfiprintf_r+0x202>
 8006e76:	89ab      	ldrh	r3, [r5, #12]
 8006e78:	059a      	lsls	r2, r3, #22
 8006e7a:	d402      	bmi.n	8006e82 <_vfiprintf_r+0x202>
 8006e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e7e:	f7ff fddb 	bl	8006a38 <__retarget_lock_release_recursive>
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	065b      	lsls	r3, r3, #25
 8006e86:	f53f af1d 	bmi.w	8006cc4 <_vfiprintf_r+0x44>
 8006e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e8c:	e71c      	b.n	8006cc8 <_vfiprintf_r+0x48>
 8006e8e:	ab03      	add	r3, sp, #12
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	462a      	mov	r2, r5
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <_vfiprintf_r+0x22c>)
 8006e96:	a904      	add	r1, sp, #16
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f000 f879 	bl	8006f90 <_printf_i>
 8006e9e:	e7e4      	b.n	8006e6a <_vfiprintf_r+0x1ea>
 8006ea0:	080074f0 	.word	0x080074f0
 8006ea4:	080074fa 	.word	0x080074fa
 8006ea8:	00000000 	.word	0x00000000
 8006eac:	08006c5b 	.word	0x08006c5b
 8006eb0:	080074f6 	.word	0x080074f6

08006eb4 <_printf_common>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	4616      	mov	r6, r2
 8006eba:	4699      	mov	r9, r3
 8006ebc:	688a      	ldr	r2, [r1, #8]
 8006ebe:	690b      	ldr	r3, [r1, #16]
 8006ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	bfb8      	it	lt
 8006ec8:	4613      	movlt	r3, r2
 8006eca:	6033      	str	r3, [r6, #0]
 8006ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b10a      	cbz	r2, 8006eda <_printf_common+0x26>
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	6033      	str	r3, [r6, #0]
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	0699      	lsls	r1, r3, #26
 8006ede:	bf42      	ittt	mi
 8006ee0:	6833      	ldrmi	r3, [r6, #0]
 8006ee2:	3302      	addmi	r3, #2
 8006ee4:	6033      	strmi	r3, [r6, #0]
 8006ee6:	6825      	ldr	r5, [r4, #0]
 8006ee8:	f015 0506 	ands.w	r5, r5, #6
 8006eec:	d106      	bne.n	8006efc <_printf_common+0x48>
 8006eee:	f104 0a19 	add.w	sl, r4, #25
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	6832      	ldr	r2, [r6, #0]
 8006ef6:	1a9b      	subs	r3, r3, r2
 8006ef8:	42ab      	cmp	r3, r5
 8006efa:	dc26      	bgt.n	8006f4a <_printf_common+0x96>
 8006efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f00:	1e13      	subs	r3, r2, #0
 8006f02:	6822      	ldr	r2, [r4, #0]
 8006f04:	bf18      	it	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	0692      	lsls	r2, r2, #26
 8006f0a:	d42b      	bmi.n	8006f64 <_printf_common+0xb0>
 8006f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f10:	4649      	mov	r1, r9
 8006f12:	4638      	mov	r0, r7
 8006f14:	47c0      	blx	r8
 8006f16:	3001      	adds	r0, #1
 8006f18:	d01e      	beq.n	8006f58 <_printf_common+0xa4>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	6922      	ldr	r2, [r4, #16]
 8006f1e:	f003 0306 	and.w	r3, r3, #6
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	bf02      	ittt	eq
 8006f26:	68e5      	ldreq	r5, [r4, #12]
 8006f28:	6833      	ldreq	r3, [r6, #0]
 8006f2a:	1aed      	subeq	r5, r5, r3
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	bf0c      	ite	eq
 8006f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f34:	2500      	movne	r5, #0
 8006f36:	4293      	cmp	r3, r2
 8006f38:	bfc4      	itt	gt
 8006f3a:	1a9b      	subgt	r3, r3, r2
 8006f3c:	18ed      	addgt	r5, r5, r3
 8006f3e:	2600      	movs	r6, #0
 8006f40:	341a      	adds	r4, #26
 8006f42:	42b5      	cmp	r5, r6
 8006f44:	d11a      	bne.n	8006f7c <_printf_common+0xc8>
 8006f46:	2000      	movs	r0, #0
 8006f48:	e008      	b.n	8006f5c <_printf_common+0xa8>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	4649      	mov	r1, r9
 8006f50:	4638      	mov	r0, r7
 8006f52:	47c0      	blx	r8
 8006f54:	3001      	adds	r0, #1
 8006f56:	d103      	bne.n	8006f60 <_printf_common+0xac>
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f60:	3501      	adds	r5, #1
 8006f62:	e7c6      	b.n	8006ef2 <_printf_common+0x3e>
 8006f64:	18e1      	adds	r1, r4, r3
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	2030      	movs	r0, #48	; 0x30
 8006f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f6e:	4422      	add	r2, r4
 8006f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f78:	3302      	adds	r3, #2
 8006f7a:	e7c7      	b.n	8006f0c <_printf_common+0x58>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4649      	mov	r1, r9
 8006f82:	4638      	mov	r0, r7
 8006f84:	47c0      	blx	r8
 8006f86:	3001      	adds	r0, #1
 8006f88:	d0e6      	beq.n	8006f58 <_printf_common+0xa4>
 8006f8a:	3601      	adds	r6, #1
 8006f8c:	e7d9      	b.n	8006f42 <_printf_common+0x8e>
	...

08006f90 <_printf_i>:
 8006f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	7e0f      	ldrb	r7, [r1, #24]
 8006f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f98:	2f78      	cmp	r7, #120	; 0x78
 8006f9a:	4691      	mov	r9, r2
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	469a      	mov	sl, r3
 8006fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fa6:	d807      	bhi.n	8006fb8 <_printf_i+0x28>
 8006fa8:	2f62      	cmp	r7, #98	; 0x62
 8006faa:	d80a      	bhi.n	8006fc2 <_printf_i+0x32>
 8006fac:	2f00      	cmp	r7, #0
 8006fae:	f000 80d4 	beq.w	800715a <_printf_i+0x1ca>
 8006fb2:	2f58      	cmp	r7, #88	; 0x58
 8006fb4:	f000 80c0 	beq.w	8007138 <_printf_i+0x1a8>
 8006fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fc0:	e03a      	b.n	8007038 <_printf_i+0xa8>
 8006fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fc6:	2b15      	cmp	r3, #21
 8006fc8:	d8f6      	bhi.n	8006fb8 <_printf_i+0x28>
 8006fca:	a101      	add	r1, pc, #4	; (adr r1, 8006fd0 <_printf_i+0x40>)
 8006fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fd0:	08007029 	.word	0x08007029
 8006fd4:	0800703d 	.word	0x0800703d
 8006fd8:	08006fb9 	.word	0x08006fb9
 8006fdc:	08006fb9 	.word	0x08006fb9
 8006fe0:	08006fb9 	.word	0x08006fb9
 8006fe4:	08006fb9 	.word	0x08006fb9
 8006fe8:	0800703d 	.word	0x0800703d
 8006fec:	08006fb9 	.word	0x08006fb9
 8006ff0:	08006fb9 	.word	0x08006fb9
 8006ff4:	08006fb9 	.word	0x08006fb9
 8006ff8:	08006fb9 	.word	0x08006fb9
 8006ffc:	08007141 	.word	0x08007141
 8007000:	08007069 	.word	0x08007069
 8007004:	080070fb 	.word	0x080070fb
 8007008:	08006fb9 	.word	0x08006fb9
 800700c:	08006fb9 	.word	0x08006fb9
 8007010:	08007163 	.word	0x08007163
 8007014:	08006fb9 	.word	0x08006fb9
 8007018:	08007069 	.word	0x08007069
 800701c:	08006fb9 	.word	0x08006fb9
 8007020:	08006fb9 	.word	0x08006fb9
 8007024:	08007103 	.word	0x08007103
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	1d1a      	adds	r2, r3, #4
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	602a      	str	r2, [r5, #0]
 8007030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007038:	2301      	movs	r3, #1
 800703a:	e09f      	b.n	800717c <_printf_i+0x1ec>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	682b      	ldr	r3, [r5, #0]
 8007040:	0607      	lsls	r7, r0, #24
 8007042:	f103 0104 	add.w	r1, r3, #4
 8007046:	6029      	str	r1, [r5, #0]
 8007048:	d501      	bpl.n	800704e <_printf_i+0xbe>
 800704a:	681e      	ldr	r6, [r3, #0]
 800704c:	e003      	b.n	8007056 <_printf_i+0xc6>
 800704e:	0646      	lsls	r6, r0, #25
 8007050:	d5fb      	bpl.n	800704a <_printf_i+0xba>
 8007052:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007056:	2e00      	cmp	r6, #0
 8007058:	da03      	bge.n	8007062 <_printf_i+0xd2>
 800705a:	232d      	movs	r3, #45	; 0x2d
 800705c:	4276      	negs	r6, r6
 800705e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007062:	485a      	ldr	r0, [pc, #360]	; (80071cc <_printf_i+0x23c>)
 8007064:	230a      	movs	r3, #10
 8007066:	e012      	b.n	800708e <_printf_i+0xfe>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	6820      	ldr	r0, [r4, #0]
 800706c:	1d19      	adds	r1, r3, #4
 800706e:	6029      	str	r1, [r5, #0]
 8007070:	0605      	lsls	r5, r0, #24
 8007072:	d501      	bpl.n	8007078 <_printf_i+0xe8>
 8007074:	681e      	ldr	r6, [r3, #0]
 8007076:	e002      	b.n	800707e <_printf_i+0xee>
 8007078:	0641      	lsls	r1, r0, #25
 800707a:	d5fb      	bpl.n	8007074 <_printf_i+0xe4>
 800707c:	881e      	ldrh	r6, [r3, #0]
 800707e:	4853      	ldr	r0, [pc, #332]	; (80071cc <_printf_i+0x23c>)
 8007080:	2f6f      	cmp	r7, #111	; 0x6f
 8007082:	bf0c      	ite	eq
 8007084:	2308      	moveq	r3, #8
 8007086:	230a      	movne	r3, #10
 8007088:	2100      	movs	r1, #0
 800708a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800708e:	6865      	ldr	r5, [r4, #4]
 8007090:	60a5      	str	r5, [r4, #8]
 8007092:	2d00      	cmp	r5, #0
 8007094:	bfa2      	ittt	ge
 8007096:	6821      	ldrge	r1, [r4, #0]
 8007098:	f021 0104 	bicge.w	r1, r1, #4
 800709c:	6021      	strge	r1, [r4, #0]
 800709e:	b90e      	cbnz	r6, 80070a4 <_printf_i+0x114>
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	d04b      	beq.n	800713c <_printf_i+0x1ac>
 80070a4:	4615      	mov	r5, r2
 80070a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80070aa:	fb03 6711 	mls	r7, r3, r1, r6
 80070ae:	5dc7      	ldrb	r7, [r0, r7]
 80070b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070b4:	4637      	mov	r7, r6
 80070b6:	42bb      	cmp	r3, r7
 80070b8:	460e      	mov	r6, r1
 80070ba:	d9f4      	bls.n	80070a6 <_printf_i+0x116>
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d10b      	bne.n	80070d8 <_printf_i+0x148>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	07de      	lsls	r6, r3, #31
 80070c4:	d508      	bpl.n	80070d8 <_printf_i+0x148>
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	6861      	ldr	r1, [r4, #4]
 80070ca:	4299      	cmp	r1, r3
 80070cc:	bfde      	ittt	le
 80070ce:	2330      	movle	r3, #48	; 0x30
 80070d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070d8:	1b52      	subs	r2, r2, r5
 80070da:	6122      	str	r2, [r4, #16]
 80070dc:	f8cd a000 	str.w	sl, [sp]
 80070e0:	464b      	mov	r3, r9
 80070e2:	aa03      	add	r2, sp, #12
 80070e4:	4621      	mov	r1, r4
 80070e6:	4640      	mov	r0, r8
 80070e8:	f7ff fee4 	bl	8006eb4 <_printf_common>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d14a      	bne.n	8007186 <_printf_i+0x1f6>
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	b004      	add	sp, #16
 80070f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	f043 0320 	orr.w	r3, r3, #32
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	4833      	ldr	r0, [pc, #204]	; (80071d0 <_printf_i+0x240>)
 8007104:	2778      	movs	r7, #120	; 0x78
 8007106:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	6829      	ldr	r1, [r5, #0]
 800710e:	061f      	lsls	r7, r3, #24
 8007110:	f851 6b04 	ldr.w	r6, [r1], #4
 8007114:	d402      	bmi.n	800711c <_printf_i+0x18c>
 8007116:	065f      	lsls	r7, r3, #25
 8007118:	bf48      	it	mi
 800711a:	b2b6      	uxthmi	r6, r6
 800711c:	07df      	lsls	r7, r3, #31
 800711e:	bf48      	it	mi
 8007120:	f043 0320 	orrmi.w	r3, r3, #32
 8007124:	6029      	str	r1, [r5, #0]
 8007126:	bf48      	it	mi
 8007128:	6023      	strmi	r3, [r4, #0]
 800712a:	b91e      	cbnz	r6, 8007134 <_printf_i+0x1a4>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	f023 0320 	bic.w	r3, r3, #32
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	2310      	movs	r3, #16
 8007136:	e7a7      	b.n	8007088 <_printf_i+0xf8>
 8007138:	4824      	ldr	r0, [pc, #144]	; (80071cc <_printf_i+0x23c>)
 800713a:	e7e4      	b.n	8007106 <_printf_i+0x176>
 800713c:	4615      	mov	r5, r2
 800713e:	e7bd      	b.n	80070bc <_printf_i+0x12c>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	6826      	ldr	r6, [r4, #0]
 8007144:	6961      	ldr	r1, [r4, #20]
 8007146:	1d18      	adds	r0, r3, #4
 8007148:	6028      	str	r0, [r5, #0]
 800714a:	0635      	lsls	r5, r6, #24
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	d501      	bpl.n	8007154 <_printf_i+0x1c4>
 8007150:	6019      	str	r1, [r3, #0]
 8007152:	e002      	b.n	800715a <_printf_i+0x1ca>
 8007154:	0670      	lsls	r0, r6, #25
 8007156:	d5fb      	bpl.n	8007150 <_printf_i+0x1c0>
 8007158:	8019      	strh	r1, [r3, #0]
 800715a:	2300      	movs	r3, #0
 800715c:	6123      	str	r3, [r4, #16]
 800715e:	4615      	mov	r5, r2
 8007160:	e7bc      	b.n	80070dc <_printf_i+0x14c>
 8007162:	682b      	ldr	r3, [r5, #0]
 8007164:	1d1a      	adds	r2, r3, #4
 8007166:	602a      	str	r2, [r5, #0]
 8007168:	681d      	ldr	r5, [r3, #0]
 800716a:	6862      	ldr	r2, [r4, #4]
 800716c:	2100      	movs	r1, #0
 800716e:	4628      	mov	r0, r5
 8007170:	f7f9 f846 	bl	8000200 <memchr>
 8007174:	b108      	cbz	r0, 800717a <_printf_i+0x1ea>
 8007176:	1b40      	subs	r0, r0, r5
 8007178:	6060      	str	r0, [r4, #4]
 800717a:	6863      	ldr	r3, [r4, #4]
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	2300      	movs	r3, #0
 8007180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007184:	e7aa      	b.n	80070dc <_printf_i+0x14c>
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	462a      	mov	r2, r5
 800718a:	4649      	mov	r1, r9
 800718c:	4640      	mov	r0, r8
 800718e:	47d0      	blx	sl
 8007190:	3001      	adds	r0, #1
 8007192:	d0ad      	beq.n	80070f0 <_printf_i+0x160>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	079b      	lsls	r3, r3, #30
 8007198:	d413      	bmi.n	80071c2 <_printf_i+0x232>
 800719a:	68e0      	ldr	r0, [r4, #12]
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	4298      	cmp	r0, r3
 80071a0:	bfb8      	it	lt
 80071a2:	4618      	movlt	r0, r3
 80071a4:	e7a6      	b.n	80070f4 <_printf_i+0x164>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4632      	mov	r2, r6
 80071aa:	4649      	mov	r1, r9
 80071ac:	4640      	mov	r0, r8
 80071ae:	47d0      	blx	sl
 80071b0:	3001      	adds	r0, #1
 80071b2:	d09d      	beq.n	80070f0 <_printf_i+0x160>
 80071b4:	3501      	adds	r5, #1
 80071b6:	68e3      	ldr	r3, [r4, #12]
 80071b8:	9903      	ldr	r1, [sp, #12]
 80071ba:	1a5b      	subs	r3, r3, r1
 80071bc:	42ab      	cmp	r3, r5
 80071be:	dcf2      	bgt.n	80071a6 <_printf_i+0x216>
 80071c0:	e7eb      	b.n	800719a <_printf_i+0x20a>
 80071c2:	2500      	movs	r5, #0
 80071c4:	f104 0619 	add.w	r6, r4, #25
 80071c8:	e7f5      	b.n	80071b6 <_printf_i+0x226>
 80071ca:	bf00      	nop
 80071cc:	08007501 	.word	0x08007501
 80071d0:	08007512 	.word	0x08007512

080071d4 <__sflush_r>:
 80071d4:	898a      	ldrh	r2, [r1, #12]
 80071d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071da:	4605      	mov	r5, r0
 80071dc:	0710      	lsls	r0, r2, #28
 80071de:	460c      	mov	r4, r1
 80071e0:	d458      	bmi.n	8007294 <__sflush_r+0xc0>
 80071e2:	684b      	ldr	r3, [r1, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dc05      	bgt.n	80071f4 <__sflush_r+0x20>
 80071e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dc02      	bgt.n	80071f4 <__sflush_r+0x20>
 80071ee:	2000      	movs	r0, #0
 80071f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071f6:	2e00      	cmp	r6, #0
 80071f8:	d0f9      	beq.n	80071ee <__sflush_r+0x1a>
 80071fa:	2300      	movs	r3, #0
 80071fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007200:	682f      	ldr	r7, [r5, #0]
 8007202:	6a21      	ldr	r1, [r4, #32]
 8007204:	602b      	str	r3, [r5, #0]
 8007206:	d032      	beq.n	800726e <__sflush_r+0x9a>
 8007208:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	075a      	lsls	r2, r3, #29
 800720e:	d505      	bpl.n	800721c <__sflush_r+0x48>
 8007210:	6863      	ldr	r3, [r4, #4]
 8007212:	1ac0      	subs	r0, r0, r3
 8007214:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007216:	b10b      	cbz	r3, 800721c <__sflush_r+0x48>
 8007218:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800721a:	1ac0      	subs	r0, r0, r3
 800721c:	2300      	movs	r3, #0
 800721e:	4602      	mov	r2, r0
 8007220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007222:	6a21      	ldr	r1, [r4, #32]
 8007224:	4628      	mov	r0, r5
 8007226:	47b0      	blx	r6
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	d106      	bne.n	800723c <__sflush_r+0x68>
 800722e:	6829      	ldr	r1, [r5, #0]
 8007230:	291d      	cmp	r1, #29
 8007232:	d82b      	bhi.n	800728c <__sflush_r+0xb8>
 8007234:	4a29      	ldr	r2, [pc, #164]	; (80072dc <__sflush_r+0x108>)
 8007236:	410a      	asrs	r2, r1
 8007238:	07d6      	lsls	r6, r2, #31
 800723a:	d427      	bmi.n	800728c <__sflush_r+0xb8>
 800723c:	2200      	movs	r2, #0
 800723e:	6062      	str	r2, [r4, #4]
 8007240:	04d9      	lsls	r1, r3, #19
 8007242:	6922      	ldr	r2, [r4, #16]
 8007244:	6022      	str	r2, [r4, #0]
 8007246:	d504      	bpl.n	8007252 <__sflush_r+0x7e>
 8007248:	1c42      	adds	r2, r0, #1
 800724a:	d101      	bne.n	8007250 <__sflush_r+0x7c>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b903      	cbnz	r3, 8007252 <__sflush_r+0x7e>
 8007250:	6560      	str	r0, [r4, #84]	; 0x54
 8007252:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007254:	602f      	str	r7, [r5, #0]
 8007256:	2900      	cmp	r1, #0
 8007258:	d0c9      	beq.n	80071ee <__sflush_r+0x1a>
 800725a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800725e:	4299      	cmp	r1, r3
 8007260:	d002      	beq.n	8007268 <__sflush_r+0x94>
 8007262:	4628      	mov	r0, r5
 8007264:	f7ff fbea 	bl	8006a3c <_free_r>
 8007268:	2000      	movs	r0, #0
 800726a:	6360      	str	r0, [r4, #52]	; 0x34
 800726c:	e7c0      	b.n	80071f0 <__sflush_r+0x1c>
 800726e:	2301      	movs	r3, #1
 8007270:	4628      	mov	r0, r5
 8007272:	47b0      	blx	r6
 8007274:	1c41      	adds	r1, r0, #1
 8007276:	d1c8      	bne.n	800720a <__sflush_r+0x36>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0c5      	beq.n	800720a <__sflush_r+0x36>
 800727e:	2b1d      	cmp	r3, #29
 8007280:	d001      	beq.n	8007286 <__sflush_r+0xb2>
 8007282:	2b16      	cmp	r3, #22
 8007284:	d101      	bne.n	800728a <__sflush_r+0xb6>
 8007286:	602f      	str	r7, [r5, #0]
 8007288:	e7b1      	b.n	80071ee <__sflush_r+0x1a>
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007290:	81a3      	strh	r3, [r4, #12]
 8007292:	e7ad      	b.n	80071f0 <__sflush_r+0x1c>
 8007294:	690f      	ldr	r7, [r1, #16]
 8007296:	2f00      	cmp	r7, #0
 8007298:	d0a9      	beq.n	80071ee <__sflush_r+0x1a>
 800729a:	0793      	lsls	r3, r2, #30
 800729c:	680e      	ldr	r6, [r1, #0]
 800729e:	bf08      	it	eq
 80072a0:	694b      	ldreq	r3, [r1, #20]
 80072a2:	600f      	str	r7, [r1, #0]
 80072a4:	bf18      	it	ne
 80072a6:	2300      	movne	r3, #0
 80072a8:	eba6 0807 	sub.w	r8, r6, r7
 80072ac:	608b      	str	r3, [r1, #8]
 80072ae:	f1b8 0f00 	cmp.w	r8, #0
 80072b2:	dd9c      	ble.n	80071ee <__sflush_r+0x1a>
 80072b4:	6a21      	ldr	r1, [r4, #32]
 80072b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072b8:	4643      	mov	r3, r8
 80072ba:	463a      	mov	r2, r7
 80072bc:	4628      	mov	r0, r5
 80072be:	47b0      	blx	r6
 80072c0:	2800      	cmp	r0, #0
 80072c2:	dc06      	bgt.n	80072d2 <__sflush_r+0xfe>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ca:	81a3      	strh	r3, [r4, #12]
 80072cc:	f04f 30ff 	mov.w	r0, #4294967295
 80072d0:	e78e      	b.n	80071f0 <__sflush_r+0x1c>
 80072d2:	4407      	add	r7, r0
 80072d4:	eba8 0800 	sub.w	r8, r8, r0
 80072d8:	e7e9      	b.n	80072ae <__sflush_r+0xda>
 80072da:	bf00      	nop
 80072dc:	dfbffffe 	.word	0xdfbffffe

080072e0 <_fflush_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	4605      	mov	r5, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	b913      	cbnz	r3, 80072f0 <_fflush_r+0x10>
 80072ea:	2500      	movs	r5, #0
 80072ec:	4628      	mov	r0, r5
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	b118      	cbz	r0, 80072fa <_fflush_r+0x1a>
 80072f2:	6a03      	ldr	r3, [r0, #32]
 80072f4:	b90b      	cbnz	r3, 80072fa <_fflush_r+0x1a>
 80072f6:	f7ff f9a9 	bl	800664c <__sinit>
 80072fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f3      	beq.n	80072ea <_fflush_r+0xa>
 8007302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007304:	07d0      	lsls	r0, r2, #31
 8007306:	d404      	bmi.n	8007312 <_fflush_r+0x32>
 8007308:	0599      	lsls	r1, r3, #22
 800730a:	d402      	bmi.n	8007312 <_fflush_r+0x32>
 800730c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800730e:	f7ff fb92 	bl	8006a36 <__retarget_lock_acquire_recursive>
 8007312:	4628      	mov	r0, r5
 8007314:	4621      	mov	r1, r4
 8007316:	f7ff ff5d 	bl	80071d4 <__sflush_r>
 800731a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800731c:	07da      	lsls	r2, r3, #31
 800731e:	4605      	mov	r5, r0
 8007320:	d4e4      	bmi.n	80072ec <_fflush_r+0xc>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	059b      	lsls	r3, r3, #22
 8007326:	d4e1      	bmi.n	80072ec <_fflush_r+0xc>
 8007328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800732a:	f7ff fb85 	bl	8006a38 <__retarget_lock_release_recursive>
 800732e:	e7dd      	b.n	80072ec <_fflush_r+0xc>

08007330 <__swhatbuf_r>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	460c      	mov	r4, r1
 8007334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007338:	2900      	cmp	r1, #0
 800733a:	b096      	sub	sp, #88	; 0x58
 800733c:	4615      	mov	r5, r2
 800733e:	461e      	mov	r6, r3
 8007340:	da0d      	bge.n	800735e <__swhatbuf_r+0x2e>
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007348:	f04f 0100 	mov.w	r1, #0
 800734c:	bf0c      	ite	eq
 800734e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007352:	2340      	movne	r3, #64	; 0x40
 8007354:	2000      	movs	r0, #0
 8007356:	6031      	str	r1, [r6, #0]
 8007358:	602b      	str	r3, [r5, #0]
 800735a:	b016      	add	sp, #88	; 0x58
 800735c:	bd70      	pop	{r4, r5, r6, pc}
 800735e:	466a      	mov	r2, sp
 8007360:	f000 f848 	bl	80073f4 <_fstat_r>
 8007364:	2800      	cmp	r0, #0
 8007366:	dbec      	blt.n	8007342 <__swhatbuf_r+0x12>
 8007368:	9901      	ldr	r1, [sp, #4]
 800736a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800736e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007372:	4259      	negs	r1, r3
 8007374:	4159      	adcs	r1, r3
 8007376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800737a:	e7eb      	b.n	8007354 <__swhatbuf_r+0x24>

0800737c <__smakebuf_r>:
 800737c:	898b      	ldrh	r3, [r1, #12]
 800737e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007380:	079d      	lsls	r5, r3, #30
 8007382:	4606      	mov	r6, r0
 8007384:	460c      	mov	r4, r1
 8007386:	d507      	bpl.n	8007398 <__smakebuf_r+0x1c>
 8007388:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	6123      	str	r3, [r4, #16]
 8007390:	2301      	movs	r3, #1
 8007392:	6163      	str	r3, [r4, #20]
 8007394:	b002      	add	sp, #8
 8007396:	bd70      	pop	{r4, r5, r6, pc}
 8007398:	ab01      	add	r3, sp, #4
 800739a:	466a      	mov	r2, sp
 800739c:	f7ff ffc8 	bl	8007330 <__swhatbuf_r>
 80073a0:	9900      	ldr	r1, [sp, #0]
 80073a2:	4605      	mov	r5, r0
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7ff fbb5 	bl	8006b14 <_malloc_r>
 80073aa:	b948      	cbnz	r0, 80073c0 <__smakebuf_r+0x44>
 80073ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073b0:	059a      	lsls	r2, r3, #22
 80073b2:	d4ef      	bmi.n	8007394 <__smakebuf_r+0x18>
 80073b4:	f023 0303 	bic.w	r3, r3, #3
 80073b8:	f043 0302 	orr.w	r3, r3, #2
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	e7e3      	b.n	8007388 <__smakebuf_r+0xc>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	6020      	str	r0, [r4, #0]
 80073c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	9b00      	ldr	r3, [sp, #0]
 80073cc:	6163      	str	r3, [r4, #20]
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	6120      	str	r0, [r4, #16]
 80073d2:	b15b      	cbz	r3, 80073ec <__smakebuf_r+0x70>
 80073d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d8:	4630      	mov	r0, r6
 80073da:	f000 f81d 	bl	8007418 <_isatty_r>
 80073de:	b128      	cbz	r0, 80073ec <__smakebuf_r+0x70>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f023 0303 	bic.w	r3, r3, #3
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	81a3      	strh	r3, [r4, #12]
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	431d      	orrs	r5, r3
 80073f0:	81a5      	strh	r5, [r4, #12]
 80073f2:	e7cf      	b.n	8007394 <__smakebuf_r+0x18>

080073f4 <_fstat_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4d07      	ldr	r5, [pc, #28]	; (8007414 <_fstat_r+0x20>)
 80073f8:	2300      	movs	r3, #0
 80073fa:	4604      	mov	r4, r0
 80073fc:	4608      	mov	r0, r1
 80073fe:	4611      	mov	r1, r2
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	f7fa fa21 	bl	8001848 <_fstat>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	d102      	bne.n	8007410 <_fstat_r+0x1c>
 800740a:	682b      	ldr	r3, [r5, #0]
 800740c:	b103      	cbz	r3, 8007410 <_fstat_r+0x1c>
 800740e:	6023      	str	r3, [r4, #0]
 8007410:	bd38      	pop	{r3, r4, r5, pc}
 8007412:	bf00      	nop
 8007414:	200006a0 	.word	0x200006a0

08007418 <_isatty_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d06      	ldr	r5, [pc, #24]	; (8007434 <_isatty_r+0x1c>)
 800741c:	2300      	movs	r3, #0
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	602b      	str	r3, [r5, #0]
 8007424:	f7fa fa20 	bl	8001868 <_isatty>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d102      	bne.n	8007432 <_isatty_r+0x1a>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	b103      	cbz	r3, 8007432 <_isatty_r+0x1a>
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	200006a0 	.word	0x200006a0

08007438 <_sbrk_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4d06      	ldr	r5, [pc, #24]	; (8007454 <_sbrk_r+0x1c>)
 800743c:	2300      	movs	r3, #0
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	f7fa fa28 	bl	8001898 <_sbrk>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_sbrk_r+0x1a>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_sbrk_r+0x1a>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	200006a0 	.word	0x200006a0

08007458 <_init>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	bf00      	nop
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr

08007464 <_fini>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	bf00      	nop
 8007468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746a:	bc08      	pop	{r3}
 800746c:	469e      	mov	lr, r3
 800746e:	4770      	bx	lr
